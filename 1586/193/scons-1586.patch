Index: test/SConsignTests.py
===================================================================
--- test/SConsignTests.py	(revision 0)
+++ test/SConsignTests.py	(revision 0)
@@ -0,0 +1,71 @@
+import TestSCons
+
+# This is a test for fix of Issue 1586.
+# SCons would leave "ghost" files in the .sconsign.dblite,
+# and they'd get Nodes created for them on subsequent runs
+# which could cause errors when scanning dirs.
+
+test = TestSCons.TestSCons()
+
+# This test case is from Morten Elo Petersen.  It's harder because
+# blib-case1only actually exists in the build dir after the -c, so the
+# Dir scanner finds it and adds it to the dir's entries.
+# Unfortunately FS.py's File.exists() method checks it later and finds
+# it looks like a stale build copy of a missing source, so it deletes
+# it.  And then it's later discovered to be missing since it's still
+# in the dir's entries list.  The fix for this is to test for missing
+# source files in the dir scanner (Scanner/Dir.py), and delete them
+# (just like File.exists() does if they're found in the build dir
+# rather than making entries for them.
+
+test.write('SConstruct', """\
+env=Environment()
+Export('env')
+env['BUILDERS']['Cat']=Builder(action="cat $SOURCE > $TARGET", multi=1)
+SConscript('src/SConscript',build_dir='build')
+""")
+
+test.subdir('src')
+test.write(['src', 'SConscript'], """\
+Import('env')
+if ARGUMENTS['case']=='1':
+    A=env.Cat('#build/lib/blib-case1only','src.txt')
+    B=env.Cat('#build/lib/blibB','#build/lib/blib-case1only')
+if ARGUMENTS['case']=='2':
+    A=env.Cat('case2only','src.txt')
+    B=env.Cat('#build/lib/blibB.txt','case2only')
+env.Alias('go','#build/lib')
+""")
+
+test.write(['src', 'src.txt'], "anything")
+
+test.run(arguments="-Q go case=1")
+test.must_exist('build/lib/blib-case1only')
+test.run(arguments="-Q go case=2")
+test.run(arguments="-Q go case=2 -c")
+test.run(arguments="-Q go case=2")
+
+
+#############################################################################
+# This test case is from Jason Orendorff.
+# Checking for existence before making nodes for things found in the
+# .sconsign fixes this one.
+
+test.write('SConstruct', """\
+Command("d/current.txt", [], [Touch("$TARGET")])
+if ARGUMENTS.has_key('pass') and ARGUMENTS['pass'] == '1':
+  Command("d/obsolete.txt", [], [Touch("$TARGET")])
+Command("installer.exe", ['d'], [Touch("$TARGET")])
+""")
+
+test.run(arguments='-Q pass=1')
+# Now delete the created files
+test.unlink(['d', 'obsolete.txt'])
+test.unlink(['d', 'current.txt'])
+test.rmdir(['d'])
+# Run again, as pass 2
+test.run(arguments='-Q pass=2', stdout="""Touch("d/current.txt")
+Touch("installer.exe")
+""")
+
+test.pass_test()
Index: src/engine/SCons/Node/FS.py
===================================================================
--- src/engine/SCons/Node/FS.py	(revision 1927)
+++ src/engine/SCons/Node/FS.py	(working copy)
@@ -549,6 +549,8 @@
         self.suffix = SCons.Util.splitext(name)[1]
         self.fs = fs
 
+        # print "Node Base: creating node for .../%s"%(name)
+
         assert directory, "A directory must be provided"
 
         self.abspath = directory.entry_abspath(name)
@@ -617,6 +619,14 @@
     def rexists(self):
         return self.rfile().exists()
 
+    def set_nonexistent(self):
+        """Mark a file as not necessarily existing.
+        Once a file is known to exist, that status is cached.  Rarely
+        we need to delete a file after a node exists for it; this
+        allows us to delete it and not still think it exists.  It
+        could still come back next time stat() is called."""
+        del self._memo['stat']
+        
     def getmtime(self):
         st = self.stat()
         if st: return st[stat.ST_MTIME]
@@ -1840,8 +1850,16 @@
         the bsources, bdepends and bimplicit lists from strings to Nodes
         because they're not used in the normal case of just deciding
         whether or not to rebuild things.
+        Note that nonexistent files may appear in the sconsign file
+        from old builds; we don't want to make nodes for them so we
+        check for existence here and raise IOError, which the caller
+        should catch.
         """
-        self.node = dir.Entry(name)
+        if os.path.exists(os.path.join(str(dir), name)):
+            self.node = dir.Entry(name)
+        else:
+            raise IOError, "file found in sconsign doesn't exist anymore"
+
     def prepare_dependencies(self):
         """Prepare a FileBuildInfo object for explaining what changed
 
@@ -1850,6 +1868,8 @@
         as dependency info.  Convert the strings to actual Nodes (for
         use by the --debug=explain code and --implicit-cache).
         """
+        if not hasattr(self, 'node'):
+            return                      # just in case
         Entry_func = self.node.dir.Entry
         for attr in ['bsources', 'bdepends', 'bimplicit']:
             try:
@@ -2195,6 +2215,10 @@
                         # copy remains in the build directory.
                         if Base.exists(self) or self.islink():
                             self.fs.unlink(self.path)
+                            # also remove from parent's entries list
+                            del self.get_dir().entries[self.name]
+                            # and mark it nonexistent
+                            self.set_nonexistent()
                         # Return None explicitly because the Base.exists() call
                         # above will have cached its value if the file existed.
                         self._memo['exists'] = None
Index: src/engine/SCons/Scanner/Dir.py
===================================================================
--- src/engine/SCons/Scanner/Dir.py	(revision 1927)
+++ src/engine/SCons/Scanner/Dir.py	(working copy)
@@ -102,4 +102,29 @@
         return []
     entry_list = filter(do_not_scan, entries.keys())
     entry_list.sort()
-    return map(lambda n, e=entries: e[n], entry_list)
+
+    result = []
+    for x in entry_list:
+        e = entries[x]
+        # Sometimes if the current dir is in the build dir,
+        # some of the files in there could be stale source files
+        # left over from previous builds, with no matching source.
+        # We don't want to make entries for those; in fact they
+        # should be deleted.
+        # Note that this logic is similar to File.exists() in FS.py.
+        # Perhaps it should be abstracted into a separate File method.
+        # All three of the set_nonexistent(), fs.unlink, and del
+        # things here are required.  See the test case in
+        # test/SConsignTests.py.
+        if e.duplicate and not e.is_derived() and not e.linked:
+            src = e.srcnode()
+            if not src is e:
+                src = src.rfile()
+                if src.abspath != e.abspath and not src.exists():
+                    if SCons.Node.FS.Base.exists(e) or e.islink():
+                        e.set_nonexistent()
+                        e.fs.unlink(e.path)
+                        del entries[x]
+                        continue
+        result.append(e)
+    return result
Index: src/engine/SCons/SConsign.py
===================================================================
--- src/engine/SCons/SConsign.py	(revision 1927)
+++ src/engine/SCons/SConsign.py	(working copy)
@@ -174,7 +174,11 @@
                 SCons.Warnings.warn(SCons.Warnings.CorruptSConsignWarning,
                                     "Ignoring corrupt sconsign entry : %s (%s)\n"%(self.dir.tpath, e))
             for key, entry in self.entries.items():
-                entry.convert_from_sconsign(dir, key)
+                try:
+                    entry.convert_from_sconsign(dir, key)
+                except IOError, e:
+                    # the file doesn't exist anymore.
+                    self.set_entry = self.do_not_set_entry
 
         if mode == "r":
             # This directory is actually under a repository, which means
Index: QMTest/TestCmd.py
===================================================================
--- QMTest/TestCmd.py	(revision 1927)
+++ QMTest/TestCmd.py	(working copy)
@@ -873,6 +873,17 @@
         file = self.canonicalize(file)
         os.unlink(file)
 
+    def rmdir(self, dir):
+        """Removes the specified dir name.
+        The dir name may be a list, in which case the elements are
+        concatenated with the os.path.join() method.  The dir is
+        assumed to be under the temporary working directory unless it
+        is an absolute path name.
+        The dir must be empty.
+        """
+        dir = self.canonicalize(dir)
+        os.rmdir(dir)
+
     def verbose_set(self, verbose):
         """Set the verbose level.
         """
