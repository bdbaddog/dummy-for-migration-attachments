Index: src/engine/SCons/Defaults.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/Defaults.py,v
retrieving revision 1.106
diff -u -r1.106 Defaults.py
--- src/engine/SCons/Defaults.py	15 Feb 2005 14:09:07 -0000	1.106
+++ src/engine/SCons/Defaults.py	15 Mar 2005 21:28:32 -0000
@@ -70,15 +70,28 @@
 # Emitters for setting the shared attribute on object files,
 # and an action for checking that all of the source files
 # going into a shared library are, in fact, shared.
-def StaticObjectEmitter(target, source, env):
+def BaseObjectEmitter(target, source, env, shared):
     for tgt in target:
-        tgt.attributes.shared = None
+        tgt.attributes.shared = shared
+        
+    # Apply the first part of force include
+    forceinclude = env.get('CPPFORCEINCLUDE')
+    if forceinclude:
+        if SCons.Util.is_String(forceinclude):
+            forceinclude = string.split(forceinclude)
+        elif SCons.Util.is_List(forceinclude):
+            forceinclude = SCons.Util.flatten(forceinclude)
+        else:
+            forceinclude = [forceinclude]                
+        source[0].srcnode().extra_includes = forceinclude
+    
     return (target, source)
+    
+def StaticObjectEmitter(target, source, env):
+    return BaseObjectEmitter(target, source, env, None)
 
 def SharedObjectEmitter(target, source, env):
-    for tgt in target:
-        tgt.attributes.shared = 1
-    return (target, source)
+    return BaseObjectEmitter(target, source, env, 1)
 
 def SharedFlagChecker(source, target, env):
     same = env.subst('$STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME')
@@ -361,6 +374,7 @@
     '_LIBFLAGS'     : '${_concat(LIBLINKPREFIX, LIBS, LIBLINKSUFFIX, __env__)}',
     '_LIBDIRFLAGS'  : '$( ${_concat(LIBDIRPREFIX, LIBPATH, LIBDIRSUFFIX, __env__, RDirs, TARGET)} $)',
     '_CPPINCFLAGS'  : '$( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET)} $)',
+    '_CPPFORCEINCLUDEFLAGS' : '${_concat(FORCEINCLUDEPREFIX, CPPFORCEINCLUDE, FORCEINCLUDESUFFIX, __env__)}',
     '_CPPDEFFLAGS'  : '${_defines(CPPDEFPREFIX, CPPDEFINES, CPPDEFSUFFIX, __env__)}',
     'TEMPFILE'      : NullCmdGenerator,
     'Dir'           : Variable_Method_Caller('TARGET', 'Dir'),
Index: src/engine/SCons/Scanner/__init__.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/Scanner/__init__.py,v
retrieving revision 1.40
diff -u -r1.40 __init__.py
--- src/engine/SCons/Scanner/__init__.py	1 Mar 2005 21:00:50 -0000	1.40
+++ src/engine/SCons/Scanner/__init__.py	15 Mar 2005 21:28:32 -0000
@@ -320,12 +320,28 @@
 
         self.cre = re.compile(regex, re.M)
         self.fs = fs
-
+        self.root_node = None
         def _scan(node, env, path=(), self=self):
             node = node.rfile()
             if not node.exists():
                 return []
-            return self.scan(node, path)
+            result = []
+            try:                
+                if node.extra_includes:
+                    source_dir = node.get_dir()
+                    for include in node.extra_includes:
+                        if SCons.Util.is_String(include):
+                            include = env.subst(include)
+                            includenode = self.find_include(('"',include), source_dir, path)[0]
+                            if includenode:
+                                result.append(includenode)
+                        else:
+                            result.append(include)
+            except AttributeError:
+                pass
+            
+            result += self.scan(node, path)
+            return result                      
 
         kw['function'] = _scan
         kw['path_function'] = FindPathDirs(path_variable, fs)
 
Index: src/engine/SCons/Tool/c++.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/Tool/c++.py,v
retrieving revision 1.7
diff -u -r1.7 c++.py
--- src/engine/SCons/Tool/c++.py	28 Feb 2005 00:07:14 -0000	1.7
+++ src/engine/SCons/Tool/c++.py	15 Mar 2005 21:28:32 -0000
@@ -70,10 +70,10 @@
         
     env['CXX']        = 'c++'
     env['CXXFLAGS']   = SCons.Util.CLVar('$CCFLAGS')
-    env['CXXCOM']     = '$CXX $CXXFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS -c -o $TARGET $SOURCES'
+    env['CXXCOM']     = '$CXX $CXXFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $_CPPFORCEINCLUDEFLAGS -c -o $TARGET $SOURCES'
     env['SHCXX']      = '$CXX'
     env['SHCXXFLAGS'] = SCons.Util.CLVar('$CXXFLAGS')
-    env['SHCXXCOM']   = '$SHCXX $SHCXXFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS -c -o $TARGET $SOURCES'
+    env['SHCXXCOM']   = '$SHCXX $SHCXXFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $_CPPFORCEINCLUDEFLAGS -c -o $TARGET $SOURCES'
 
     env['CPPDEFPREFIX']  = '-D'
     env['CPPDEFSUFFIX']  = ''
Index: src/engine/SCons/Tool/cc.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/Tool/cc.py,v
retrieving revision 1.8
diff -u -r1.8 cc.py
--- src/engine/SCons/Tool/cc.py	28 Feb 2005 00:07:15 -0000	1.8
+++ src/engine/SCons/Tool/cc.py	15 Mar 2005 21:28:32 -0000
@@ -54,15 +54,17 @@
         
     env['CC']        = 'cc'
     env['CCFLAGS']   = SCons.Util.CLVar('')
-    env['CCCOM']     = '$CC $CCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS -c -o $TARGET $SOURCES'
+    env['CCCOM']     = '$CC $CCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $_CPPFORCEINCLUDEFLAGS -c -o $TARGET $SOURCES'
     env['SHCC']      = '$CC'
     env['SHCCFLAGS'] = SCons.Util.CLVar('$CCFLAGS')
-    env['SHCCCOM']   = '$SHCC $SHCCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS -c -o $TARGET $SOURCES'
+    env['SHCCCOM']   = '$SHCC $SHCCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $_CPPFORCEINCLUDEFLAGS -c -o $TARGET $SOURCES'
 
     env['CPPDEFPREFIX']  = '-D'
     env['CPPDEFSUFFIX']  = ''
     env['INCPREFIX']  = '-I'
     env['INCSUFFIX']  = ''
+    env['FORCEINCLUDEPREFIX'] = '-include '
+    env['FORCEINCLUDESUFFIX'] = ''
     env['SHOBJSUFFIX'] = '.os'
     env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 0
 
Index: src/engine/SCons/Tool/msvc.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/Tool/msvc.py,v
retrieving revision 1.44
diff -u -r1.44 msvc.py
--- src/engine/SCons/Tool/msvc.py	14 Feb 2005 00:44:20 -0000	1.44
+++ src/engine/SCons/Tool/msvc.py	15 Mar 2005 21:28:32 -0000
@@ -350,11 +350,16 @@
 
 def validate_vars(env):
     """Validate the PCH and PCHSTOP construction variables."""
-    if env.has_key('PCH') and env['PCH']:
-        if not env.has_key('PCHSTOP'):
-            raise SCons.Errors.UserError, "The PCHSTOP construction must be defined if PCH is defined."
-        if not SCons.Util.is_String(env['PCHSTOP']):
-            raise SCons.Errors.UserError, "The PCHSTOP construction variable must be a string: %r"%env['PCHSTOP']
+    if env.has_key('CCPCH') and env['CCPCH']:
+        if not env.has_key('CCPCHSTOP'):
+            raise SCons.Errors.UserError, "The CCPCHSTOP construction must be defined if PCH is defined."
+        if not SCons.Util.is_String(env['CCPCHSTOP']):
+            raise SCons.Errors.UserError, "The CCPCHSTOP construction variable must be a string: %r"%env['CCPCHSTOP']
+    if env.has_key('CXXPCH') and env['CXXPCH']:
+        if not env.has_key('CXXPCHSTOP'):
+            raise SCons.Errors.UserError, "The CXXPCHSTOP construction must be defined if PCH is defined."
+        if not SCons.Util.is_String(env['CXXPCHSTOP']):
+            raise SCons.Errors.UserError, "The CXXPCHSTOP construction variable must be a string: %r"%env['CXXPCHSTOP']
 
 def pch_emitter(target, source, env):
     """Adds the object file target."""
@@ -375,8 +380,15 @@
 
     target = [pch, obj] # pch must be first, and obj second for the PCHCOM to work
 
+    pdb = env.get('PDB')
+    if SCons.Util.is_String(pdb):
+        env['PDB'] = pdb = env.File(pdb)
+    if pdb:
+        env.SideEffect(pdb, target)
+    
     return (target, source)
 
+print_find_forceincludes = None
 def object_emitter(target, source, env, parent_emitter):
     """Sets up the PCH dependencies for an object file."""
 
@@ -384,9 +396,20 @@
 
     parent_emitter(target, source, env)
 
-    if env.has_key('PCH') and env['PCH']:
-        env.Depends(target, env['PCH'])
-
+    if SCons.Util.splitext(str(source[0]))[1].lower() in ['.cpp', '.cc']:
+        pchvar = 'CXXPCH'
+    else:
+        pchvar = 'CCPCH'
+        
+    if env.has_key(pchvar) and env[pchvar]:
+        env.Depends(target, env[pchvar])
+        
+    pdb = env.get('PDB')
+    if SCons.Util.is_String(pdb):
+        env['PDB'] = pdb = env.File(pdb)
+    if pdb:
+        env.SideEffect(pdb, target)
+    
     return (target, source)
 
 def static_object_emitter(target, source, env):
@@ -397,8 +420,12 @@
     return object_emitter(target, source, env,
                           SCons.Defaults.SharedObjectEmitter)
 
-pch_action = SCons.Action.Action('$PCHCOM', '$PCHCOMSTR')
-pch_builder = SCons.Builder.Builder(action=pch_action, suffix='.pch',
+ccpch_action = SCons.Action.Action('$CCPCHCOM', '$CCPCHCOMSTR')
+ccpch_builder = SCons.Builder.Builder(action=ccpch_action, suffix='.pch',
+                                    emitter=pch_emitter,
+                                    source_scanner=SCons.Tool.SourceFileScanner)
+cxxpch_action = SCons.Action.Action('$CXXPCHCOM', '$CXXPCHCOMSTR')
+cxxpch_builder = SCons.Builder.Builder(action=cxxpch_action, suffix='.pch',
                                     emitter=pch_emitter,
                                     source_scanner=SCons.Tool.SourceFileScanner)
 res_action = SCons.Action.Action('$RCCOM', '$RCCOMSTR')
@@ -423,31 +450,36 @@
         shared_obj.add_emitter(suffix, shared_object_emitter)
 
     env['CCPDBFLAGS'] = SCons.Util.CLVar(['${(PDB and "/Z7") or ""}'])
-    env['CCPCHFLAGS'] = SCons.Util.CLVar(['${(PCH and "/Yu%s /Fp%s"%(PCHSTOP or "",File(PCH))) or ""}'])
-    env['CCCOMFLAGS'] = '$CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS /c $SOURCES /Fo$TARGET $CCPCHFLAGS $CCPDBFLAGS'
-    env['CC']         = 'cl'
+    env['CCPCHFLAGS'] = SCons.Util.CLVar(['${(CCPCH and "/Yu%s /Fp%s"%(CCPCHSTOP or "",File(CCPCH))) or ""}'])
+    env['CXXPCHFLAGS'] = SCons.Util.CLVar(['${(CXXPCH and "/Yu%s /Fp%s"%(CXXPCHSTOP or "",File(CXXPCH))) or ""}'])
+    env['CCCOMFLAGS'] = '$CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $_CPPFORCEINCLUDEFLAGS /c $SOURCES /Fo$TARGET $CCPDBFLAGS'
+    env['CL']         = 'cl'
+    env['CC']         = '$CL $( /TC $)'
     env['CCFLAGS']    = SCons.Util.CLVar('/nologo')
-    env['CCCOM']      = '$CC $CCFLAGS $CCCOMFLAGS'
+    env['CCCOM']      = '$CC $CCFLAGS $CCCOMFLAGS $CCPCHFLAGS'
     env['SHCC']       = '$CC'
     env['SHCCFLAGS']  = SCons.Util.CLVar('$CCFLAGS')
-    env['SHCCCOM']    = '$SHCC $SHCCFLAGS $CCCOMFLAGS'
-    env['CXX']        = '$CC'
-    env['CXXFLAGS']   = SCons.Util.CLVar('$CCFLAGS $( /TP $)')
-    env['CXXCOM']     = '$CXX $CXXFLAGS $CCCOMFLAGS'
+    env['SHCCCOM']    = '$SHCC $SHCCFLAGS $CCCOMFLAGS $CCPCHFLAGS'
+    env['CXX']        = '$CL $( /TP $)'
+    env['CXXFLAGS']   = SCons.Util.CLVar('$CCFLAGS')
+    env['CXXCOM']     = '$CXX $CXXFLAGS $CCCOMFLAGS $CXXPCHFLAGS'
     env['SHCXX']      = '$CXX'
     env['SHCXXFLAGS'] = SCons.Util.CLVar('$CXXFLAGS')
-    env['SHCXXCOM']   = '$SHCXX $SHCXXFLAGS $CCCOMFLAGS'
+    env['SHCXXCOM']   = '$SHCXX $SHCXXFLAGS $CCCOMFLAGS $CXXPCHFLAGS'
     env['CPPDEFPREFIX']  = '/D'
     env['CPPDEFSUFFIX']  = ''
     env['INCPREFIX']  = '/I'
     env['INCSUFFIX']  = ''
+    env['FORCEINCLUDEPREFIX'] = '/FI '
+    env['FORCEINCLUDESUFFIX'] = ''
+    
 #    env.Append(OBJEMITTER = [static_object_emitter])
 #    env.Append(SHOBJEMITTER = [shared_object_emitter])
     env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1
 
     env['RC'] = 'rc'
     env['RCFLAGS'] = SCons.Util.CLVar('')
-    env['RCCOM'] = '$RC $_CPPDEFFLAGS $_CPPINCFLAGS $RCFLAGS /fo$TARGET $SOURCES'
+    env['RCCOM'] = '$RC $_CPPDEFFLAGS $_CPPINCFLAGS $_CPPFORCEINCLUDEFLAGS $RCFLAGS /fo$TARGET $SOURCES'
     env['BUILDERS']['RES'] = res_builder
     env['OBJPREFIX']      = ''
     env['OBJSUFFIX']      = '.obj'
@@ -476,8 +508,10 @@
     env['CXXFILESUFFIX'] = '.cc'
 
     env['PCHPDBFLAGS'] = SCons.Util.CLVar(['${(PDB and "/Yd") or ""}'])
-    env['PCHCOM'] = '$CXX $CXXFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS /c $SOURCES /Fo${TARGETS[1]} /Yc$PCHSTOP /Fp${TARGETS[0]} $CCPDBFLAGS $PCHPDBFLAGS'
-    env['BUILDERS']['PCH'] = pch_builder
+    env['CCPCHCOM'] = '$CC $CCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $_CPPFORCEINCLUDEFLAGS /c $SOURCES /Fo${TARGETS[1]} /Yc$PCHSTOP /Fp${TARGETS[0]} $CCPDBFLAGS $PCHPDBFLAGS'
+    env['CXXPCHCOM'] = '$CXX $CXXFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $_CPPFORCEINCLUDEFLAGS /c $SOURCES /Fo${TARGETS[1]} /Yc$PCHSTOP /Fp${TARGETS[0]} $CCPDBFLAGS $PCHPDBFLAGS'
+    env['BUILDERS']['CCPCH'] = ccpch_builder
+    env['BUILDERS']['CXXPCH'] = cxxpch_builder
 
 def exists(env):
     if SCons.Tool.msvs.is_msvs_installed():
