diff -r 2791fed90f49 src/engine/SCons/Taskmaster.py
--- a/src/engine/SCons/Taskmaster.py	Wed Dec 12 08:54:06 2007 -0500
+++ b/src/engine/SCons/Taskmaster.py	Wed Dec 12 12:20:56 2007 -0500
@@ -562,21 +562,34 @@ class Taskmaster:
 
             childstate = map(lambda N: (N, N.get_state()), children)
 
-            # Skip this node if any of its children have failed.  This
-            # catches the case where we're descending a top-level target
-            # and one of our children failed while trying to be built
-            # by a *previous* descent of an earlier top-level target.
+            # Skip this node if any of its children have failed.  
+            # 
+            # This catches the case where we're descending a top-level
+            # target and one of our children failed while trying to be
+            # built by a *previous* descent of an earlier top-level
+            # target. 
+            #
+            # It can also occur if a node is reused in multiple
+            # targets. One first descends though the one of the
+            # target, the next time occurs through the other target.
+            #
+            # Note that we can only have failed_children if the
+            # --keep-going flag was used, because without it the build
+            # will stop before diving in the other branch.
+            #
+            # Note that even if one of the children fails, we still
+            # add the other children to the list of candidate nodes to
+            # keep on building (--keep-going).
             failed_children = filter(lambda I: I[1] == SCons.Node.failed,
                                      childstate)
             if failed_children:
                 node.set_state(SCons.Node.failed)
                 if S: S.child_failed = S.child_failed + 1
                 if T:
-                    c = map(str, failed_children)
+                    c = map(lambda I: str(I[0]), failed_children)
                     c.sort()
                     T.write(' children failed:\n    %s\n' % c)
-                continue
-
+          
             # Detect dependency cycles:
             pending_nodes = filter(lambda I: I[1] == SCons.Node.pending, childstate)
             if pending_nodes:
@@ -636,6 +649,14 @@ class Taskmaster:
             # this node is ready to be built.
             if S: S.build = S.build + 1
             if T: T.write(' evaluating %s\n' % node)
+
+            # The current node might have been marked as Failed if any
+            # of its children had failed. In that case, we simply find
+            # another candidate node. (This case only occurs with the
+            # --keep-going flag).
+            if node.get_state() != SCons.Node.pending:
+                continue
+
             return node
 
         return None
diff -r 2791fed90f49 test/option-k.py
--- a/test/option-k.py	Wed Dec 12 08:54:06 2007 -0500
+++ b/test/option-k.py	Wed Dec 12 12:20:56 2007 -0500
@@ -32,7 +32,7 @@ _python_ = TestSCons._python_
 
 test = TestSCons.TestSCons()
 
-test.subdir('work1', 'work2')
+test.subdir('work1', 'work2', 'work3')
 
 
 
@@ -48,6 +48,11 @@ import sys
 import sys
 sys.exit(1)
 """)
+
+
+#
+# Test: work1
+# 
 
 test.write(['work1', 'SConstruct'], """\
 Succeed = Builder(action = r'%(_python_)s ../succeed.py $TARGETS')
@@ -92,6 +97,10 @@ test.must_match(['work1', 'bbb.out'], "s
 
 
 
+#
+# Test: work2
+# 
+
 test.write(['work2', 'SConstruct'], """\
 Succeed = Builder(action = r'%(_python_)s ../succeed.py $TARGETS')
 Fail = Builder(action = r'%(_python_)s ../fail.py $TARGETS')
@@ -126,4 +135,145 @@ test.must_match(['work2', 'ddd.out'], "s
 
 
 
+#
+# Test: work3
+#
+# Check that the -k (keep-going) switch works correctly when the Nodes
+# forms a DAG. The test case is the following
+#
+#               all
+#                |
+#          +-----+-----+-------------+
+#          |           |             |
+#         a1           a2           a3
+#          |           |             |
+#          +       +---+---+     +---+---+ 
+#          \       |      /      |       |
+#           \   bbb.out  /      a4    ccc.out
+#            \          /       /        
+#             \        /       /  
+#              \      /       /  
+#              aaa.out (fails)
+#
+
+test.write(['work3', 'SConstruct'], """\
+Succeed = Builder(action = r'%(_python_)s ../succeed.py $TARGETS')
+Fail = Builder(action = r'%(_python_)s ../fail.py $TARGETS')
+env = Environment(BUILDERS = { 'Succeed' : Succeed, 'Fail' : Fail })
+a = env.Fail('aaa.out', 'aaa.in')
+b = env.Succeed('bbb.out', 'bbb.in')
+c = env.Succeed('ccc.out', 'ccc.in')
+
+a1 = Alias( 'a1', a )
+a2 = Alias( 'a2', a+b) 
+a4 = Alias( 'a4', c) 
+a3 = Alias( 'a3', a4+c) 
+
+Alias('all', a1+a2+a3)
+""" % locals())
+
+test.write(['work3', 'aaa.in'], "aaa.in\n")
+test.write(['work3', 'bbb.in'], "bbb.in\n")
+test.write(['work3', 'ccc.in'], "ccc.in\n")
+
+
+# Test tegular build (i.e. without -k)
+test.run(chdir = 'work3',
+         arguments = '.',
+         status = 2,
+         stderr = None,
+         stdout = """\
+scons: Reading SConscript files ...
+scons: done reading SConscript files.
+scons: Building targets ...
+%(_python_)s ../fail.py aaa.out
+scons: building terminated because of errors.
+""" % locals())
+
+test.must_not_exist(['work3', 'aaa.out'])
+test.must_not_exist(['work3', 'bbb.out'])
+test.must_not_exist(['work3', 'ccc.out'])
+
+
+test.run(chdir = 'work3',
+         arguments = '-c .')
+test.must_not_exist(['work3', 'aaa.out'])
+test.must_not_exist(['work3', 'bbb.out'])
+test.must_not_exist(['work3', 'ccc.out'])
+
+
+# Current directory
+test.run(chdir = 'work3',
+         arguments = '-k .',
+         status = 2,
+         stderr = None,
+         stdout = """\
+scons: Reading SConscript files ...
+scons: done reading SConscript files.
+scons: Building targets ...
+%(_python_)s ../fail.py aaa.out
+%(_python_)s ../succeed.py bbb.out
+%(_python_)s ../succeed.py ccc.out
+scons: done building targets (errors occurred during build).
+""" % locals())
+
+test.must_not_exist(['work3', 'aaa.out'])
+test.must_exist(['work3', 'bbb.out'])
+test.must_exist(['work3', 'ccc.out'])
+
+
+test.run(chdir = 'work3',
+         arguments = '-c .')
+test.must_not_exist(['work3', 'aaa.out'])
+test.must_not_exist(['work3', 'bbb.out'])
+test.must_not_exist(['work3', 'ccc.out'])
+
+
+# Single target
+test.run(chdir = 'work3',
+         arguments = '--keep-going all',
+         status = 2,
+         stderr = None,
+         stdout = """\
+scons: Reading SConscript files ...
+scons: done reading SConscript files.
+scons: Building targets ...
+%(_python_)s ../fail.py aaa.out
+%(_python_)s ../succeed.py bbb.out
+%(_python_)s ../succeed.py ccc.out
+scons: done building targets (errors occurred during build).
+""" % locals())
+
+test.must_not_exist(['work3', 'aaa.out'])
+test.must_exist(['work3', 'bbb.out'])
+test.must_exist(['work3', 'ccc.out'])
+
+
+test.run(chdir = 'work3',
+         arguments = '-c .')
+test.must_not_exist(['work3', 'aaa.out'])
+test.must_not_exist(['work3', 'bbb.out'])
+test.must_not_exist(['work3', 'ccc.out'])
+
+
+# Separate top-level targets
+test.run(chdir = 'work3',
+         arguments = '-k a1 a2 a3',
+         status = 2,
+         stderr = None,
+         stdout = """\
+scons: Reading SConscript files ...
+scons: done reading SConscript files.
+scons: Building targets ...
+%(_python_)s ../fail.py aaa.out
+%(_python_)s ../succeed.py bbb.out
+%(_python_)s ../succeed.py ccc.out
+scons: done building targets (errors occurred during build).
+""" % locals())
+
+test.must_not_exist(['work3', 'aaa.out'])
+test.must_exist(['work3', 'bbb.out'])
+test.must_exist(['work3', 'ccc.out'])
+
+
 test.pass_test()
