diff -ruN -x '*.pyc' original/Node/__init__.py new/Node/__init__.py
--- original/Node/__init__.py	2008-12-20 22:59:59.000000000 -0800
+++ new/Node/__init__.py	2008-12-31 15:32:05.000000000 -0800
@@ -71,7 +71,8 @@
 executing = 2
 up_to_date = 3
 executed = 4
-failed = 5
+not_executed = 5
+failed = 6
 
 StateString = {
     0 : "no_state",
@@ -79,7 +80,8 @@
     2 : "executing",
     3 : "up_to_date",
     4 : "executed",
-    5 : "failed",
+    5 : "not_executed",
+    6 : "failed",
 }
 
 # controls whether implicit dependencies are cached:
diff -ruN -x '*.pyc' original/Taskmaster.py new/Taskmaster.py
--- original/Taskmaster.py	2008-12-20 22:59:59.000000000 -0800
+++ new/Taskmaster.py	2008-12-31 16:16:00.000000000 -0800
@@ -65,6 +65,7 @@
 NODE_EXECUTING = SCons.Node.executing
 NODE_UP_TO_DATE = SCons.Node.up_to_date
 NODE_EXECUTED = SCons.Node.executed
+NODE_NOT_EXECUTED = SCons.Node.not_executed
 NODE_FAILED = SCons.Node.failed
 
 
@@ -582,7 +583,10 @@
         while self.candidates:
             candidates = self.candidates
             self.candidates = []
-            self.will_not_build(candidates)
+            def node_func(n):
+                if n.get_state() < NODE_UP_TO_DATE:
+                    n.set_state(NODE_NOT_EXECUTED)
+            self.will_not_build(candidates, node_func)
         return None
 
     def _validate_pending_children(self):
@@ -727,7 +731,15 @@
 
             if T: T.write(self.trace_message('    Considering node %s and its children:' % self.trace_node(node)))
 
-            if state == NODE_NO_STATE:
+            # If any node has state NODE_NOT_EXECUTED, it is considered here to
+            # have state NODE_NO_STATE. A state of NODE_NOT_EXECUTED means that
+            # a previous Taskmaster instance that could have executed it failed
+            # or was stopped first, but this node was not dependent on the
+            # any failed node. If this Taskmaster had not seen the node, its
+            # status of NODE_NOT_EXECUTED would have been considered to be
+            # equivalent to NODE_FAILED, but now it gets another chance.
+
+            if state == NODE_NO_STATE or state == NODE_NOT_EXECUTED:
                 # Mark this node as being on the execution stack:
                 node.set_state(NODE_PENDING)
             elif state > NODE_PENDING:
@@ -764,6 +776,10 @@
 
                 if T: T.write(self.trace_message('       ' + self.trace_node(child)))
 
+                if childstate == NODE_NOT_EXECUTED:
+                    child.set_state(NODE_NO_STATE)
+                    childstate = NODE_NO_STATE
+
                 if childstate == NODE_NO_STATE:
                     children_not_visited.append(child)
                 elif childstate == NODE_PENDING:
