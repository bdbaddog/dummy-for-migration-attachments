Index: src/engine/SCons/Scanner/__init__.py
===================================================================
--- src/engine/SCons/Scanner/__init__.py	(revision 2542)
+++ src/engine/SCons/Scanner/__init__.py	(working copy)
@@ -346,13 +346,16 @@
     def sort_key(self, include):
         return SCons.Node.FS._my_normcase(include)
 
+    def find_include_names (self, node):
+        return self.cre.findall (node.get_contents())
+
     def scan(self, node, path=()):
 
         # cache the includes list in node so we only scan it once:
         if node.includes != None:
             includes = node.includes
         else:
-            includes = self.cre.findall(node.get_contents())
+            includes = self.find_include_names (node)
             node.includes = includes
 
         # This is a hand-coded DSU (decorate-sort-undecorate, or
Index: src/engine/SCons/Scanner/D.py
===================================================================
--- src/engine/SCons/Scanner/D.py	(revision 2542)
+++ src/engine/SCons/Scanner/D.py	(working copy)
@@ -32,19 +32,25 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
+import re
 import string
 
 import SCons.Scanner
 
 def DScanner():
     """Return a prototype Scanner instance for scanning D source files"""
-    ds = D(name = "DScanner",
-           suffixes = '$DSUFFIXES',
-           path_variable = 'DPATH',
-           regex = 'import\s+([^\;]*)\;')
+    ds = D()
     return ds
 
 class D(SCons.Scanner.Classic):
+    def __init__ (self):
+        SCons.Scanner.Classic.__init__ (self,
+               name = "DScanner",
+               suffixes = '$DSUFFIXES',
+               path_variable = 'DPATH',
+               regex = 'import\s+([a-zA-Z0-9_.]+)\s*(?:,\s*([a-zA-Z0-9_.]+)\s*)*;')
+        self.cre2 = re.compile ('(?:import\s)?\s*([a-zA-Z0-9_.]+)\s*(?:,|;)', re.M)
+
     def find_include(self, include, source_dir, path):
         # translate dots (package separators) to slashes
         inc = string.replace(include, '.', '/')
@@ -53,3 +59,9 @@
         if i is None:
             i = SCons.Node.FS.find_file (inc + '.di', (source_dir,) + path)
         return i, include
+
+    def find_include_names(self, node):
+        includes = []
+        for i in self.cre.findall(node.get_contents()):
+            includes = includes + self.cre2.findall(i)
+        return includes
