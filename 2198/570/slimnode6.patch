Index: bench/uniquify_list.py
===================================================================
--- bench/uniquify_list.py	(Revision 0)
+++ bench/uniquify_list.py	(Revision 0)
@@ -0,0 +1,52 @@
+# Remove duplicate entries while preserving order.
+
+def Func01(seq):
+    seen = {}
+    result = []
+    for item in seq:
+        #if not item in seen:
+        if not seen.has_key(item):
+            seen[item] = 1
+            result.append(item)
+    return result
+
+def Func02(seq):
+    u, s = [], set()
+    for i in seq:
+        if i not in s:
+           s.add(i)
+           u.append(i)
+    return u
+
+# Data to pass to the functions on each run.  Each entry is a
+# three-element tuple:
+#
+#   (
+#       "Label to print describing this data run",
+#       ('positional', 'arguments'),
+#       {'keyword' : 'arguments'},
+#   ),
+
+Data = [
+    (
+        "Unique list",
+        ([1,2,3,4,5,6,7,8,9],),
+        {},
+    ),
+    (
+        "One duplicate",
+        ([1,2,3,4,5,6,7,8,9,4],),
+        {},
+    ),
+    (
+        "Many duplicates",
+        ([1,1,2,2,2,3,4,5,5,6,7,8,6,6,8,8,9,9,9,6,7,7],),
+        {},
+    ),
+    (
+        "Strings, few duplicates",
+        (['spam','eggs','foo','bar','monty','python','spam','spam','spam'],),
+        {},
+    ),
+]
+
Index: src/engine/SCons/Node/NodeTests.py
===================================================================
--- src/engine/SCons/Node/NodeTests.py	(Revision 3884)
+++ src/engine/SCons/Node/NodeTests.py	(Arbeitskopie)
@@ -585,13 +585,14 @@
         i = SCons.Node.Node()
         i.get_ninfo().csig = 888
         node.depends = [d]
+        assert node.get_depends() == [d], node.get_depends()
         node.implicit = [i]
 
         binfo = node.get_binfo()
         assert isinstance(binfo, SCons.Node.BuildInfoBase), binfo
         assert hasattr(binfo, 'bsources')
         assert hasattr(binfo, 'bsourcesigs')
-        assert binfo.bdepends == [d]
+        assert binfo.bdepends == [d], binfo.bdepends
         assert hasattr(binfo, 'bdependsigs')
         assert binfo.bimplicit == [i]
         assert hasattr(binfo, 'bimplicitsigs')
@@ -716,24 +717,18 @@
 
         n1 = SCons.Node.Node()
         n1.builder_set(Builder())
-        node.implicit = []
-        node.implicit_set = set()
-        node._add_child(node.implicit, node.implicit_set, [n1])
+        node.add_to_implicit([n1])
 
         node.prepare()  # should not throw an exception
 
         n2 = SCons.Node.Node()
         n2.linked = 1
-        node.implicit = []
-        node.implicit_set = set()
-        node._add_child(node.implicit, node.implicit_set, [n2])
+        node.add_to_implicit([n2])
 
         node.prepare()  # should not throw an exception
 
         n3 = SCons.Node.Node()
-        node.implicit = []
-        node.implicit_set = set()
-        node._add_child(node.implicit, node.implicit_set, [n3])
+        node.add_to_implicit([n3])
 
         node.prepare()  # should not throw an exception
 
@@ -741,9 +736,7 @@
             def rexists(self):
                 return None
         n4 = MyNode()
-        node.implicit = []
-        node.implicit_set = set()
-        node._add_child(node.implicit, node.implicit_set, [n4])
+        node.add_to_implicit([n4])
         exc_caught = 0
         try:
             node.prepare()
@@ -819,7 +812,7 @@
         """Test adding files whose dependencies should be ignored.
         """
         node = SCons.Node.Node()
-        assert node.ignore == []
+        assert node.ignore == set()
 
         zero = SCons.Node.Node()
         one = SCons.Node.Node()
@@ -830,13 +823,13 @@
         six = SCons.Node.Node()
 
         node.add_ignore([zero])
-        assert node.ignore == [zero]
+        assert node.ignore == set([zero])
         node.add_ignore([one])
-        assert node.ignore == [zero, one]
+        assert node.ignore == set([zero, one])
         node.add_ignore([two, three])
-        assert node.ignore == [zero, one, two, three]
+        assert node.ignore == set([zero, one, two, three])
         node.add_ignore([three, four, one])
-        assert node.ignore == [zero, one, two, three, four]
+        assert node.ignore == set([zero, one, two, three, four])
 
         try:
             node.add_ignore([[five, six]])
@@ -844,7 +837,7 @@
             pass
         else:
             raise "did not catch expected exception"
-        assert node.ignore == [zero, one, two, three, four]
+        assert node.ignore == set([zero, one, two, three, four])
 
     def test_get_found_includes(self):
         """Test the default get_found_includes() method
@@ -1035,10 +1028,8 @@
 
         node.add_source([n1, n2, n3])
         node.add_dependency([n4, n5, n6])
-        node.implicit = []
-        node.implicit_set = set()
-        node._add_child(node.implicit, node.implicit_set, [n7, n8, n9])
-        node._add_child(node.implicit, node.implicit_set, [n10, n11, n12])
+        node.add_to_implicit([n7, n8, n9])
+        node.add_to_implicit([n10, n11, n12])
         node.add_ignore([n2, n5, n8, n11])
 
         kids = node.children()
@@ -1066,15 +1057,14 @@
 
         node.add_source([n1, n2, n3])
         node.add_dependency([n4, n5, n6])
-        node.implicit = []
-        node.implicit_set = set()
-        node._add_child(node.implicit, node.implicit_set, [n7, n8, n9])
-        node._add_child(node.implicit, node.implicit_set, [n10, n11, n12])
+        node.add_to_implicit([n7, n8, n9])
+        node.add_to_implicit([n10, n11, n12])
         node.add_ignore([n2, n5, n8, n11])
 
         kids = node.all_children()
+        assert len(kids) == 12, len(kids)
         for kid in [n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12]:
-            assert kid in kids, kid
+            assert kid in kids, str(kid)
 
     def test_state(self):
         """Test setting and getting the state of a node
Index: src/engine/SCons/Node/__init__.py
===================================================================
--- src/engine/SCons/Node/__init__.py	(Revision 3884)
+++ src/engine/SCons/Node/__init__.py	(Arbeitskopie)
@@ -172,7 +172,7 @@
     def merge(self, other):
         self.__dict__.update(other.__dict__)
 
-class Node:
+class Node(object):
     """The base Node class, for entities that we know how to
     build, or use to build other Nodes.
     """
@@ -180,6 +180,21 @@
     if SCons.Memoize.use_memoizer:
         __metaclass__ = SCons.Memoize.Memoized_Metaclass
 
+    # only scalar attributes
+    _specific_sources = False
+    ref_count = 0
+    wkids = None  # Kids yet to walk, when it's an array
+    env = None
+    state = no_state
+    precious = None
+    noclean = 0
+    nocache = 0
+    always_build = None
+    includes = None
+    _implicit = None  # implicit (scanned) dependencies (None means not scanned yet)
+    side_effect = 0 # true iff this node is a side effect
+    linked = 0 # is this node linked to the variant directory?
+
     memoizer_counters = []
 
     class Attrs:
@@ -200,32 +215,14 @@
         # this way, instead of wrapping up each list+dictionary pair in
         # a class.  (Of course, we could always still do that in the
         # future if we had a good reason to...).
-        self.sources = []       # source files used to build node
-        self.sources_set = set()
-        self._specific_sources = False
-        self.depends = []       # explicit dependencies (from Depends)
-        self.depends_set = set()
-        self.ignore = []        # dependencies to ignore
-        self.ignore_set = set()
+        self._sources = []  # source files used to build node
+        self._depends = []  # explicit dependencies (from Depends)
+        self.ignore = set()  # dependencies to ignore
         self.prerequisites = SCons.Util.UniqueList()
-        self.implicit = None    # implicit (scanned) dependencies (None means not scanned yet)
         self.waiting_parents = set()
         self.waiting_s_e = set()
-        self.ref_count = 0
-        self.wkids = None       # Kids yet to walk, when it's an array
-
-        self.env = None
-        self.state = no_state
-        self.precious = None
-        self.noclean = 0
-        self.nocache = 0
-        self.always_build = None
-        self.includes = None
         self.attributes = self.Attrs() # Generic place to stick information about the Node.
-        self.side_effect = 0 # true iff this node is a side effect
         self.side_effects = [] # the side effects of building this target
-        self.linked = 0 # is this node linked to the variant directory?
-
         self.clear_memoized_values()
 
         # Let the interface in which the build engine is embedded
@@ -241,6 +238,37 @@
 
     memoizer_counters.append(SCons.Memoize.CountValue('get_build_env'))
 
+    def get_depends(self, ignore=[]):
+        self._depends = SCons.Util.uniquer_setables(self._depends)
+        return self._depends
+    def set_depends(self, value):
+        self._depends = value
+    depends = property(get_depends, set_depends)
+
+    def get_implicit(self):
+        if self._implicit is None:
+            return None
+        self._implicit = SCons.Util.uniquer_setables(self._implicit)
+        return self._implicit
+    def set_implicit(self, value):
+        self._implicit = value
+     # XXX for Python 1.5, remove property and change
+     # all .implicit references to .get_implicit() or
+     # .set_implicit(None)
+    implicit = property(get_implicit, set_implicit)
+
+    def get_sources(self):
+        """
+        Get the sources of the node. 
+        """
+        self._sources = SCons.Util.uniquer_setables(self._sources)
+        return self._sources
+    def set_sources(self, value):
+        self._sources = value
+     # XXX for Python 1.5, remove property and change
+     # all .sources references to .get_sources()
+    sources = property(get_sources, set_sources)
+
     def get_build_env(self):
         """Fetch the appropriate Environment to build this node.
         """
@@ -277,7 +305,7 @@
                                                    self.env or self.builder.env,
                                                    [self.builder.overrides],
                                                    [self],
-                                                   self.sources)
+                                                   self.get_sources())
             self.executor = executor
         return executor
 
@@ -343,15 +371,12 @@
         methods should call this base class method to get the child
         check and the BuildInfo structure.
         """
-        for d in self.depends:
-            if d.missing():
-                msg = "Explicit dependency `%s' not found, needed by target `%s'."
-                raise SCons.Errors.StopError, msg % (d, self)
-        if not self.implicit is None:
-            for i in self.implicit:
-                if i.missing():
-                    msg = "Implicit dependency `%s' not found, needed by target `%s'."
-                    raise SCons.Errors.StopError, msg % (i, self)
+        for t, nodes in (('Explicit', self._depends),
+                         ('Implicit', self._implicit or [])):
+            for n in SCons.Util.uniquer_setables(nodes):  # uniquify
+                if n.missing():
+                    m = "%s dependency `%s' not found, needed by target `%s'."
+                    raise SCons.Errors.StopError, m % (t, n, self)
         self.binfo = self.get_binfo()
 
     def build(self, **kw):
@@ -378,7 +403,7 @@
         # Clear the implicit dependency caches of any Nodes
         # waiting for this Node to be built.
         for parent in self.waiting_parents:
-            parent.implicit = None
+            parent._implicit = None
 
         self.clear()
 
@@ -586,21 +611,24 @@
         return scanner
 
     def add_to_implicit(self, deps):
-        if not hasattr(self, 'implicit') or self.implicit is None:
-            self.implicit = []
-            self.implicit_set = set()
+        if self._implicit is None:
+            self._implicit = []
             self._children_reset()
-        self._add_child(self.implicit, self.implicit_set, deps)
+        #self._add_check(deps)
+        self._add_child(self._implicit, deps)
+        #if getattr(self, '_implicit', None) is None:
+        #    self._implicit = []
+        #    self._children_reset()
+        #self._add_child(self._implicit, deps)
 
     def scan(self):
         """Scan this node's dependents for implicit dependencies."""
         # Don't bother scanning non-derived files, because we don't
         # care what their dependencies are.
         # Don't scan again, if we already have scanned.
-        if not self.implicit is None:
+        if not self._implicit is None:
             return
-        self.implicit = []
-        self.implicit_set = set()
+        self._implicit = []
         self._children_reset()
         if not self.has_builder():
             return
@@ -628,8 +656,7 @@
                     return
                 # one of this node's sources has changed,
                 # so we must recalculate the implicit deps:
-                self.implicit = []
-                self.implicit_set = set()
+                self._implicit = []
 
         # Have the executor scan the sources.
         executor.scan_sources(self.builder.source_scanner)
@@ -680,6 +707,19 @@
         binfo = self.BuildInfo(self)
         return binfo
 
+    def _nodesigs(self, nodes, ignore=None):
+         # helper for .get_binfo
+        sigs = []
+        if ignore:
+            for n in nodes:
+                if n not in ignore:
+                    sigs.append(n.get_ninfo())
+        else:
+            for n in nodes:
+                sigs.append(n.get_ninfo())
+
+        return sigs
+
     def get_binfo(self):
         """
         Fetch a node's build information.
@@ -702,45 +742,27 @@
         self.binfo = binfo
 
         executor = self.get_executor()
-        ignore_set = self.ignore_set
 
         if self.has_builder():
             binfo.bact = str(executor)
             binfo.bactsig = SCons.Util.MD5signature(executor.get_contents())
 
         if self._specific_sources:
-            sources = []
-            for s in self.sources:
-                if s not in ignore_set:
-                    sources.append(s)
+            sources = SCons.Util.uniquer_setables(self._sources, self.ignore)
         else:
             sources = executor.get_unignored_sources(self, self.ignore)
-        seen = set()
-        bsources = []
-        bsourcesigs = []
-        for s in sources:
-            if not s in seen:
-                seen.add(s)
-                bsources.append(s)
-                bsourcesigs.append(s.get_ninfo())
-        binfo.bsources = bsources
-        binfo.bsourcesigs = bsourcesigs
+            # The executor gets the sources from the batches which might still
+            # contain duplicates ...
+            sources = SCons.Util.uniquer_setables(sources)
+             
+        binfo.bsources    = sources
+        binfo.bsourcesigs = self._nodesigs(sources)
 
-        depends = self.depends
-        dependsigs = []
-        for d in depends:
-            if d not in ignore_set:
-                dependsigs.append(d.get_ninfo())
-        binfo.bdepends = depends
-        binfo.bdependsigs = dependsigs
+        binfo.bdepends    = self.get_depends()
+        binfo.bdependsigs = self._nodesigs(self._depends, self.ignore)
 
-        implicit = self.implicit or []
-        implicitsigs = []
-        for i in implicit:
-            if i not in ignore_set:
-                implicitsigs.append(i.get_ninfo())
-        binfo.bimplicit = implicit
-        binfo.bimplicitsigs = implicitsigs
+        binfo.bimplicit     = self.get_implicit() or []
+        binfo.bimplicitsigs = self._nodesigs(binfo.bimplicit, self.ignore)
 
         return binfo
 
@@ -822,15 +844,8 @@
 
     def add_dependency(self, depend):
         """Adds dependencies."""
-        try:
-            self._add_child(self.depends, self.depends_set, depend)
-        except TypeError, e:
-            e = e.args[0]
-            if SCons.Util.is_List(e):
-                s = map(str, e)
-            else:
-                s = str(e)
-            raise SCons.Errors.UserError("attempted to add a non-Node dependency to %s:\n\t%s is a %s, not a Node" % (str(self), s, type(e)))
+        self._add_check(depend)
+        self._add_child(self._depends, depend)
 
     def add_prerequisite(self, prerequisite):
         """Adds prerequisites"""
@@ -838,48 +853,40 @@
         self._children_reset()
 
     def add_ignore(self, depend):
-        """Adds dependencies to ignore."""
-        try:
-            self._add_child(self.ignore, self.ignore_set, depend)
-        except TypeError, e:
-            e = e.args[0]
-            if SCons.Util.is_List(e):
-                s = map(str, e)
-            else:
-                s = str(e)
-            raise SCons.Errors.UserError("attempted to ignore a non-Node dependency of %s:\n\t%s is a %s, not a Node" % (str(self), s, type(e)))
+        """Adds dependencies to ignore. The ignored nodes need not be ordered so
+        a set is used for fast containment checks."""
+        self._add_check(depend, add='ignore')
+        for dep in depend:
+            self.ignore.add(dep)
 
     def add_source(self, source):
         """Adds sources."""
         if self._specific_sources:
             return
-        try:
-            self._add_child(self.sources, self.sources_set, source)
-        except TypeError, e:
-            e = e.args[0]
-            if SCons.Util.is_List(e):
-                s = map(str, e)
-            else:
-                s = str(e)
-            raise SCons.Errors.UserError("attempted to add a non-Node as source of %s:\n\t%s is a %s, not a Node" % (str(self), s, type(e)))
+        self._add_check(source, dep='as source')
+        self._add_child(self._sources, source)
 
-    def _add_child(self, collection, set, child):
-        """Adds 'child' to 'collection', first checking 'set' to see if it's
-        already present."""
-        #if type(child) is not type([]):
-        #    child = [child]
-        #for c in child:
-        #    if not isinstance(c, Node):
-        #        raise TypeError, c
-        added = None
-        for c in child:
-            if c not in set:
-                set.add(c)
-                collection.append(c)
-                added = 1
-        if added:
+    def _add_child(self, collection, child):
+        """Adds 'child' to 'collection'."""
+        if child:
+            # append preserving order, any
+            # duplicates are removed by the
+            # corresponing .get_...  method
+            collection.extend(list(child))
             self._children_reset()
 
+    def _add_check(self, child, add='add', dep='dependency'):
+        if type(child) is not type([]):
+            child = [child]
+        for c in child:
+            if not isinstance(c, Node):
+                if SCons.Util.is_List(c):
+                    s = map(str, c)
+                else:
+                    s = str(c)
+                raise SCons.Errors.UserError("attempted to %s a non-Node %s to %s:\n\t%s is a %s, not a Node"
+                                             % (add, dep, str(self), s, type(c)))
+
     def set_specific_source(self, source):
         self.add_source(source)
         self._specific_sources = True
@@ -890,7 +897,8 @@
             self.wkids.append(wkid)
 
     def _children_reset(self):
-        self.clear_memoized_values()
+        #self.clear_memoized_values()
+        self._memo.pop('children_get', 0)
         # We need to let the Executor clear out any calculated
         # build info that it's cached so we can re-calculate it.
         self.executor_cleanup()
@@ -920,21 +928,15 @@
         # using dictionary keys, lose the order, and the only ordered
         # dictionary patterns I found all ended up using "not in"
         # internally anyway...)
-        if self.ignore_set:
-            if self.implicit is None:
-                iter = chain(self.sources,self.depends)
-            else:
-                iter = chain(self.sources, self.depends, self.implicit)
-
+        implicit = self.get_implicit() or [] # TODO
+        if self.ignore:
+            iter = chain(self.get_sources(), self._depends, implicit) # XXX
             children = []
-            for i in iter:
-                if i not in self.ignore_set:
-                    children.append(i)
+            for node in iter:
+                if node not in self.ignore:
+                    children.append(node)
         else:
-            if self.implicit is None:
-                children = self.sources + self.depends
-            else:
-                children = self.sources + self.depends + self.implicit
+            children = self.get_sources() + self._depends + implicit # XXX
 
         self._memo['children_get'] = children
         return children
@@ -961,10 +963,10 @@
         # using dictionary keys, lose the order, and the only ordered
         # dictionary patterns I found all ended up using "not in"
         # internally anyway...)
-        if self.implicit is None:
-            return self.sources + self.depends
+        if self._implicit:
+            return self.get_sources() + self._depends + self._implicit # XXX
         else:
-            return self.sources + self.depends + self.implicit
+            return self.get_sources() + self._depends # XXX
 
     def children(self, scan=1):
         """Return a list of the node's direct children, minus those
@@ -1102,7 +1104,7 @@
         """
         if self.is_derived() and self.env:
             env = self.get_build_env()
-            for s in self.sources:
+            for s in self.get_sources():
                 scanner = self.get_source_scanner(s)
                 if scanner:
                     path = self.get_build_scanner_path(scanner)
Index: src/engine/SCons/EnvironmentTests.py
===================================================================
--- src/engine/SCons/EnvironmentTests.py	(Revision 3884)
+++ src/engine/SCons/EnvironmentTests.py	(Arbeitskopie)
@@ -3029,7 +3029,7 @@
         assert t.__class__.__name__ == 'Entry', t.__class__.__name__
         assert t.path == 'targ.py'
         assert len(t.ignore) == 1
-        i = t.ignore[0]
+        i = list(t.ignore)[0]
         assert i.__class__.__name__ == 'Entry', i.__class__.__name__
         assert i.path == 'dep.py'
 
@@ -3037,7 +3037,7 @@
         assert t.__class__.__name__ == 'File', t.__class__.__name__
         assert t.path == 'yyyzzz'
         assert len(t.ignore) == 1
-        i = t.ignore[0]
+        i = list(t.ignore)[0]
         assert i.__class__.__name__ == 'File', i.__class__.__name__
         assert i.path == 'zzzyyy'
 
@@ -3045,7 +3045,7 @@
         assert t.__class__.__name__ == 'Dir', t.__class__.__name__
         assert t.path == 'dir1'
         assert len(t.ignore) == 1
-        i = t.ignore[0]
+        i = list(t.ignore)[0]
         assert i.__class__.__name__ == 'Dir', i.__class__.__name__
         assert i.path == 'dir2'
 
Index: src/engine/SCons/Util.py
===================================================================
--- src/engine/SCons/Util.py	(Revision 3884)
+++ src/engine/SCons/Util.py	(Arbeitskopie)
@@ -1259,8 +1259,26 @@
             result.append(item)
     return result
 
+# The following function achieves the same with set logic. It seems to be
+# a bit faster when many duplicates are in the list and allows to filter the
+# results via the ignore parameter.
 
+def uniquer_setables(seq, ignore=set()):
+    """
+    Return the list of unique items in a sequence except any to be ignored and
+    retaining the original order.
+    """
+    result = []
+    seen = set(ignore)
+    for i in seq:
+        if i not in seen:
+            seen.add(i)
+            result.append(i)
+    return result
+    
 
+
+
 # Much of the logic here was originally based on recipe 4.9 from the
 # Python CookBook, but we had to dumb it way down for Python 1.5.2.
 class LogicalLines:
