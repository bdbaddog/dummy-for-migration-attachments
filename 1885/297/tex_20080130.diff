Index: src/engine/SCons/Tool/pdflatex.py
===================================================================
--- src/engine/SCons/Tool/pdflatex.py	(revision 2645)
+++ src/engine/SCons/Tool/pdflatex.py	(working copy)
@@ -9,7 +9,7 @@
 """
 
 #
-# __COPYRIGHT__
+# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007 The SCons Foundation
 #
 # Permission is hereby granted, free of charge, to any person obtaining
 # a copy of this software and associated documentation files (the
@@ -31,7 +31,7 @@
 # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #
 
-__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+__revision__ = "src/engine/SCons/Tool/pdflatex.py 2611 2008/01/29 11:58:38 managan"
 
 import SCons.Action
 import SCons.Util
@@ -66,7 +66,7 @@
     bld.add_emitter('.latex', SCons.Tool.tex.tex_emitter)
 
     env['PDFLATEX']      = 'pdflatex'
-    env['PDFLATEXFLAGS'] = SCons.Util.CLVar('')
+    env['PDFLATEXFLAGS'] = SCons.Util.CLVar('-interaction=nonstopmode')
     env['PDFLATEXCOM']   = 'cd ${TARGET.dir} && $PDFLATEX $PDFLATEXFLAGS ${SOURCE.file}'
     env['LATEXRETRIES']  = 3
 
Index: src/engine/SCons/Tool/tex.py
===================================================================
--- src/engine/SCons/Tool/tex.py	(revision 2645)
+++ src/engine/SCons/Tool/tex.py	(working copy)
@@ -9,7 +9,7 @@
 """
 
 #
-# __COPYRIGHT__
+# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007 The SCons Foundation
 #
 # Permission is hereby granted, free of charge, to any person obtaining
 # a copy of this software and associated documentation files (the
@@ -31,7 +31,7 @@
 # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #
 
-__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+__revision__ = "src/engine/SCons/Tool/tex.py 2611 2008/01/29 11:58:38 managan"
 
 import os.path
 import re
@@ -54,8 +54,11 @@
 openout_re = re.compile(r"\\openout.*`(.*)'")
 
 makeindex_re = re.compile(r"^[^%]*\\makeindex", re.MULTILINE)
+index_re = re.compile(r"^[^%]*\\index", re.MULTILINE)
 tableofcontents_re = re.compile(r"^[^%]*\\tableofcontents", re.MULTILINE)
 bibliography_re = re.compile(r"^[^%]*\\bibliography", re.MULTILINE)
+listoffigures_re = re.compile(r"^[^%]*\\listoffigures", re.MULTILINE)
+hyperref_re = re.compile(r"^[^%]*\\usepackage.*\{hyperref\}", re.MULTILINE)
 
 # An Action sufficient to build any generic tex file.
 TeXAction = None
@@ -121,8 +124,20 @@
     if os.path.exists(tocfilename):
         tocContents = open(tocfilename, "rb").read()
 
+    loffilename = os.path.join(targetdir, basefile + '.lof')
+    lofContents = ""
+    if os.path.exists(loffilename):
+        lofContents = open(loffilename, "rb").read()
+
+    outfilename = os.path.join(targetdir, basefile + '.out')
+    outContents = ""
+    if os.path.exists(outfilename):
+        outContents = open(outfilename, "rb").read()
+
     # Run LaTeX once to generate a new aux file and log file.
-    XXXLaTeXAction(target, source, env)
+    result = XXXLaTeXAction(target, source, env)
+    if result != 0:
+        return result
 
     # Decide if various things need to be run, or run again.  We check
     # for the existence of files before opening them--even ones like the
@@ -143,7 +158,9 @@
             content = open(target_aux, "rb").read()
             if string.find(content, "bibdata") != -1:
                 bibfile = env.fs.File(targetbase)
-                BibTeXAction(bibfile, bibfile, env)
+                result = BibTeXAction(bibfile, bibfile, env)
+                if result != 0:
+                    return result
                 break
 
     must_rerun_latex = 0
@@ -159,11 +176,23 @@
     if os.path.exists(idxfilename) and idxContents != open(idxfilename, "rb").read():
         # We must run makeindex
         idxfile = env.fs.File(targetbase)
-        MakeIndexAction(idxfile, idxfile, env)
+        result = MakeIndexAction(idxfile, idxfile, env)
+        if result != 0:
+            return result
         must_rerun_latex = 1
 
+    # Now decide if latex will need to be run again due to list of figures.
+    if os.path.exists(loffilename) and lofContents != open(loffilename, "rb").read():
+        must_rerun_latex = 1
+
+    # Now decide if latex will need to be run again due to hyperref bookmarks
+    if os.path.exists(outfilename) and outContents != open(outfilename, "rb").read():
+        must_rerun_latex = 1
+
     if must_rerun_latex == 1:
-        XXXLaTeXAction(target, source, env)
+        result = XXXLaTeXAction(target, source, env)
+        if result != 0:
+            return result
 
     # Now decide if latex needs to be run yet again to resolve warnings.
     logfilename = targetbase + '.log'
@@ -175,7 +204,9 @@
            not rerun_citations_re.search(content) and \
            not undefined_references_re.search(content):
             break
-        XXXLaTeXAction(target, source, env)
+        result = XXXLaTeXAction(target, source, env)
+        if result != 0:
+            return result
 
     env['ENV']['TEXINPUTS'] = texinputs_save
     env['ENV']['BIBINPUTS'] = bibinputs_save
@@ -185,10 +216,11 @@
     # later on Mac OSX so leave it,
     # env['ENV']['TEXPICTS']  = texpicts_save
 
-    return 0
+    return result
 
 def LaTeXAuxAction(target = None, source= None, env=None):
-    InternalLaTeXAuxAction( LaTeXAction, target, source, env )
+    result = InternalLaTeXAuxAction( LaTeXAction, target, source, env )
+    return result
 
 LaTeX_re = re.compile("\\\\document(style|class)")
 
@@ -205,12 +237,17 @@
     decide the "flavor" of the source and then executes the appropriate
     program."""
     if is_LaTeX(source):
-        LaTeXAuxAction(target,source,env)
+        result = LaTeXAuxAction(target,source,env)
     else:
-        TeXAction(target,source,env)
-    return 0
+        result = TeXAction(target,source,env)
+    return result
 
 def tex_emitter(target, source, env):
+    """An emitter for TeX and LaTeX sources. 
+    For LaTeX sources we try and find the common created files that
+    are needed on subsequent runs of latex to finish tables of contents,
+    bibliographies, indices, lists of figures, and hyperlink references.
+    """
     base = SCons.Util.splitext(str(source[0]))[0]
     targetbase = SCons.Util.splitext(str(target[0]))[0]
 
@@ -219,26 +256,63 @@
     target.append(targetbase + '.log')
     for f in source:
         content = f.get_contents()
+        # even with no sections or chapters \tableofcontents generates an empty .toc file
         if tableofcontents_re.search(content):
             target.append(targetbase + '.toc')
             env.Precious(targetbase + '.toc')
+        # \makeindex by itself generates empty .idx file
+        # \printindex by itself does nothing, \index by itself does nothing
+        # \printindex \index by themselves do nothing
+        # \makeindex & \index causes makeindex run and generates .idx, .ilg, & .ind files
+        # \makeindex & \printindex generates empty .idx file; makeindex not run
         if makeindex_re.search(content):
-            target.append(targetbase + '.ilg')
-            target.append(targetbase + '.ind')
             target.append(targetbase + '.idx')
             env.Precious(targetbase + '.idx')
+        if (makeindex_re.search(content) and index_re.search(content)):
+            target.append(targetbase + '.ind')
+            target.append(targetbase + '.ilg')
+        # \bibliography by itself generates empty .bbl file, nonempty .blg file, errors for no \cite, \bibstyle
+        # \bibliographystyle by itself generates nothing, bibtex not run
+        # \cite by itself generates nothing, bibtex not run, latex reruns to limit
+        # \bibliographystyle & \cite by themselves generates nothing, bibtex not run, latex reruns to limit
+        # \bibliography & \bibliographystyle by themselves generates .bbl file, & .blg file, errors for no \cite
         if bibliography_re.search(content):
             target.append(targetbase + '.bbl')
             env.Precious(targetbase + '.bbl')
             target.append(targetbase + '.blg')
+        # even with no figures \listoffigures generates an empty .lof file
+        # It takes a \begin{figure} with \caption to get nonempty .lof
+        if listoffigures_re.search(content):
+            target.append(targetbase + '.lof')
+            env.Precious(targetbase + '.lof')
+        # even with no sections or chapters \usepackage{hyperref} generates an empty .out file
+        if hyperref_re.search(content):
+            target.append(targetbase + '.out')
+            env.Precious(targetbase + '.out')
 
-    # read log file to get all .aux files
+    # read log file to get all other files that latex creates and will read on the next pass
     logfilename = targetbase + '.log'
     dir, base_nodir = os.path.split(targetbase)
     if os.path.exists(logfilename):
         content = open(logfilename, "rb").read()
         out_files = openout_re.findall(content)
+        # remove files from list that we have already added to the target list
+        # remove the .aux file from the list
         out_files = filter(lambda f, b=base_nodir+'.aux': f != b, out_files)
+        # remove the .toc file from the list
+        out_files = filter(lambda f, b=base_nodir+'.toc': f != b, out_files)
+        # remove the .idx file from the list
+        out_files = filter(lambda f, b=base_nodir+'.idx': f != b, out_files)
+        # remove the .ilg file from the list
+        out_files = filter(lambda f, b=base_nodir+'.ilg': f != b, out_files)
+        # remove the .bbl file from the list
+        out_files = filter(lambda f, b=base_nodir+'.bbl': f != b, out_files)
+        # remove the .blg file from the list
+        out_files = filter(lambda f, b=base_nodir+'.blg': f != b, out_files)
+        # remove the .lof file from the list
+        out_files = filter(lambda f, b=base_nodir+'.lof': f != b, out_files)
+        # remove the .out file from the list
+        out_files = filter(lambda f, b=base_nodir+'.out': f != b, out_files)
         if dir != '':
             out_files = map(lambda f, d=dir: d+os.sep+f, out_files)
         target.extend(out_files)
@@ -275,7 +349,7 @@
 
     global TeXLaTeXAction
     if TeXLaTeXAction is None:
-        TeXLaTeXAction = SCons.Action.Action(TeXLaTeXFunction, strfunction=None)
+        TeXLaTeXAction = SCons.Action.Action(TeXLaTeXFunction)
 
     import dvi
     dvi.generate(env)
@@ -290,7 +364,7 @@
 
     # Duplicate from latex.py.  If latex.py goes away, then this is still OK.
     env['LATEX']        = 'latex'
-    env['LATEXFLAGS']   = SCons.Util.CLVar('')
+    env['LATEXFLAGS']   = SCons.Util.CLVar('-interaction=nonstopmode')
     env['LATEXCOM']     = 'cd ${TARGET.dir} && $LATEX $LATEXFLAGS ${SOURCE.file}'
     env['LATEXRETRIES'] = 3
 
@@ -302,5 +376,11 @@
     env['MAKEINDEXFLAGS'] = SCons.Util.CLVar('')
     env['MAKEINDEXCOM']   = 'cd ${TARGET.dir} && $MAKEINDEX $MAKEINDEXFLAGS ${SOURCE.file}'
 
+    # Duplicate from pdflatex.py.  If latex.py goes away, then this is still OK.
+    env['PDFLATEX']      = 'pdflatex'
+    env['PDFLATEXFLAGS'] = SCons.Util.CLVar('-interaction=nonstopmode')
+    env['PDFLATEXCOM']   = 'cd ${TARGET.dir} && $PDFLATEX $PDFLATEXFLAGS ${SOURCE.file}'
+    env['LATEXRETRIES']  = 3
+
 def exists(env):
     return env.Detect('tex')
Index: src/engine/SCons/Tool/latex.py
===================================================================
--- src/engine/SCons/Tool/latex.py	(revision 2645)
+++ src/engine/SCons/Tool/latex.py	(working copy)
@@ -9,7 +9,7 @@
 """
 
 #
-# __COPYRIGHT__
+# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007 The SCons Foundation
 #
 # Permission is hereby granted, free of charge, to any person obtaining
 # a copy of this software and associated documentation files (the
@@ -31,7 +31,7 @@
 # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #
 
-__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+__revision__ = "src/engine/SCons/Tool/latex.py 2611 2008/01/29 11:58:38 managan"
 
 import SCons.Action
 import SCons.Defaults
@@ -63,7 +63,7 @@
     bld.add_emitter('.latex', SCons.Tool.tex.tex_emitter)
 
     env['LATEX']        = 'latex'
-    env['LATEXFLAGS']   = SCons.Util.CLVar('')
+    env['LATEXFLAGS']   = SCons.Util.CLVar('-interaction=nonstopmode')
     env['LATEXCOM']     = 'cd ${TARGET.dir} && $LATEX $LATEXFLAGS ${SOURCE.file}'
     env['LATEXRETRIES'] = 3
 
