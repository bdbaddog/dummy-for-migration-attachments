diff --exclude='*.pyc' --exclude='*.pyo' -Naur SCons.patched/Scanner/LaTeX.py SCons/Scanner/LaTeX.py
--- SCons.patched/Scanner/LaTeX.py	2008-04-23 21:21:07.000000000 +0930
+++ SCons/Scanner/LaTeX.py	2008-04-28 00:02:45.000000000 +0930
@@ -31,6 +31,7 @@
 
 import os.path
 import string
+import re
 
 import SCons.Scanner
 
@@ -91,6 +92,7 @@
         # as can be the case with the bibliography keyword.
         #
         # cache the includes list in node so we only scan it once:
+        noopt_cre = re.compile('\[.*$')
         if node.includes != None:
             includes = node.includes
         else:
@@ -111,16 +113,15 @@
             #
             inc_list = string.split(include[1],',')
             for j in range(len(inc_list)):
-                include_local = [include[0],inc_list[j]]
+                include_local = [noopt_cre.sub('', include[0]), inc_list[j]]
                 n, i = self.find_include(include_local, source_dir, path)
-
-            if n is None:
-                SCons.Warnings.warn(SCons.Warnings.DependencyWarning,
-                                    "No dependency generated for file: %s (included from: %s) -- file not found" % (i, node))
-            else:
-                sortkey = self.sort_key(include)
-                nodes.append((sortkey, n))
-
+                if n is None:
+                    SCons.Warnings.warn(SCons.Warnings.DependencyWarning,
+                                        "No dependency generated for file: %s (included from: %s) -- file not found" % (i, node))
+                else:
+                    sortkey = self.sort_key(include_local)
+                    nodes.append((sortkey, n))
+        #
         nodes.sort()
         nodes = map(lambda pair: pair[1], nodes)
         return nodes
