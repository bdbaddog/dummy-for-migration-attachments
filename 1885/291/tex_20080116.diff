Index: src/engine/SCons/Tool/tex.py
===================================================================
--- src/engine/SCons/Tool/tex.py	(revision 2611)
+++ src/engine/SCons/Tool/tex.py	(working copy)
@@ -122,7 +122,9 @@
         tocContents = open(tocfilename, "rb").read()
 
     # Run LaTeX once to generate a new aux file and log file.
-    XXXLaTeXAction(target, source, env)
+    result = XXXLaTeXAction(target, source, env)
+    if result != 0:
+        return result
 
     # Decide if various things need to be run, or run again.  We check
     # for the existence of files before opening them--even ones like the
@@ -143,7 +145,9 @@
             content = open(target_aux, "rb").read()
             if string.find(content, "bibdata") != -1:
                 bibfile = env.fs.File(targetbase)
-                BibTeXAction(bibfile, bibfile, env)
+                result = BibTeXAction(bibfile, bibfile, env)
+                if result != 0:
+                    return result
                 break
 
     must_rerun_latex = 0
@@ -159,11 +163,15 @@
     if os.path.exists(idxfilename) and idxContents != open(idxfilename, "rb").read():
         # We must run makeindex
         idxfile = env.fs.File(targetbase)
-        MakeIndexAction(idxfile, idxfile, env)
+        result = MakeIndexAction(idxfile, idxfile, env)
+        if result != 0:
+            return result
         must_rerun_latex = 1
 
     if must_rerun_latex == 1:
-        XXXLaTeXAction(target, source, env)
+        result = XXXLaTeXAction(target, source, env)
+        if result != 0:
+            return result
 
     # Now decide if latex needs to be run yet again to resolve warnings.
     logfilename = targetbase + '.log'
@@ -175,7 +183,9 @@
            not rerun_citations_re.search(content) and \
            not undefined_references_re.search(content):
             break
-        XXXLaTeXAction(target, source, env)
+        result = XXXLaTeXAction(target, source, env)
+        if result != 0:
+            return result
 
     env['ENV']['TEXINPUTS'] = texinputs_save
     env['ENV']['BIBINPUTS'] = bibinputs_save
@@ -185,10 +195,11 @@
     # later on Mac OSX so leave it,
     # env['ENV']['TEXPICTS']  = texpicts_save
 
-    return 0
+    return result
 
 def LaTeXAuxAction(target = None, source= None, env=None):
-    InternalLaTeXAuxAction( LaTeXAction, target, source, env )
+    result = InternalLaTeXAuxAction( LaTeXAction, target, source, env )
+    return result
 
 LaTeX_re = re.compile("\\\\document(style|class)")
 
@@ -205,10 +216,10 @@
     decide the "flavor" of the source and then executes the appropriate
     program."""
     if is_LaTeX(source):
-        LaTeXAuxAction(target,source,env)
+        result = LaTeXAuxAction(target,source,env)
     else:
-        TeXAction(target,source,env)
-    return 0
+        result = TeXAction(target,source,env)
+    return result
 
 def tex_emitter(target, source, env):
     base = SCons.Util.splitext(str(source[0]))[0]
@@ -275,7 +286,7 @@
 
     global TeXLaTeXAction
     if TeXLaTeXAction is None:
-        TeXLaTeXAction = SCons.Action.Action(TeXLaTeXFunction, strfunction=None)
+        TeXLaTeXAction = SCons.Action.Action(TeXLaTeXFunction)
 
     import dvi
     dvi.generate(env)
@@ -290,7 +301,7 @@
 
     # Duplicate from latex.py.  If latex.py goes away, then this is still OK.
     env['LATEX']        = 'latex'
-    env['LATEXFLAGS']   = SCons.Util.CLVar('')
+    env['LATEXFLAGS']   = SCons.Util.CLVar('-interaction=nonstopmode')
     env['LATEXCOM']     = 'cd ${TARGET.dir} && $LATEX $LATEXFLAGS ${SOURCE.file}'
     env['LATEXRETRIES'] = 3
 
