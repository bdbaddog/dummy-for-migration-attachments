Index: test/TEX/subdir_variantdir_input.py
===================================================================
*** test/TEX/subdir_variantdir_input.py	(revision 0)
--- test/TEX/subdir_variantdir_input.py	(revision 0)
***************
*** 0 ****
--- 1,114 ----
+ #!/usr/bin/env python
+ #
+ # __COPYRIGHT__
+ #
+ # Permission is hereby granted, free of charge, to any person obtaining
+ # a copy of this software and associated documentation files (the
+ # "Software"), to deal in the Software without restriction, including
+ # without limitation the rights to use, copy, modify, merge, publish,
+ # distribute, sublicense, and/or sell copies of the Software, and to
+ # permit persons to whom the Software is furnished to do so, subject to
+ # the following conditions:
+ #
+ # The above copyright notice and this permission notice shall be included
+ # in all copies or substantial portions of the Software.
+ #
+ # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+ # KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+ # WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ # NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ # LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ # OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ #
+ 
+ __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+ 
+ """
+ Verify that we execute TeX in a subdirectory (if that's where the document
+ resides) by checking that all the auxiliary files get created there and
+ not in the top-level directory. Test this when variantDir is used
+ 
+ Also check that we find files
+ 
+ Test case courtesy Joel B. Mohler.
+ """
+ 
+ import TestSCons
+ 
+ test = TestSCons.TestSCons()
+ 
+ #test.verbose_set(2)
+ 
+ latex = test.where_is('latex')
+ if not latex:
+     test.skip_test("Could not find 'latex'; skipping test.\n")
+ 
+ pdflatex = test.where_is('pdflatex')
+ if not pdflatex:
+     test.skip_test("Could not find 'pdflatex'; skipping test.\n")
+ 
+ test.subdir('docs')
+ test.subdir(['docs','sub'])
+ 
+ test.write('SConstruct', """\
+ env = Environment(TOOLS = ['tex', 'pdftex'])
+ 
+ env.VariantDir('build', 'docs',duplicate=0)
+ env.SConscript('build/SConscript', exports = ['env'])
+ """)
+ 
+ test.write(['docs','SConscript'], """\
+ Import('env')
+ 
+ env.PDF( 'sub/x.tex' )
+ env.DVI( 'sub/x.tex' )
+ """)
+ 
+ test.write(['docs','sub', 'x.tex'],
+ r"""\documentclass{article}
+ \usepackage{makeidx}
+ \makeindex
+ \begin{document}
+ Hi there.
+ \index{info}
+ \input{y}
+ \printindex{}
+ \end{document}
+ """)
+ 
+ test.write(['docs','sub', 'y.tex'], """\
+ Sub-document 1
+ """)
+ 
+ test.run(arguments = '.', stderr=None, stdout=None)
+ 
+ test.must_exist(['build', 'sub', 'x.aux'])
+ test.must_exist(['build', 'sub', 'x.dvi'])
+ test.must_exist(['build', 'sub', 'x.log'])
+ test.must_exist(['build', 'sub', 'x.pdf'])
+ 
+ test.must_not_exist('x.aux')
+ test.must_not_exist('x.dvi')
+ test.must_not_exist('x.log')
+ test.must_not_exist('x.pdf')
+ 
+ test.must_not_exist(['docs', 'x.aux'])
+ test.must_not_exist(['docs', 'x.dvi'])
+ test.must_not_exist(['docs', 'x.log'])
+ test.must_not_exist(['docs', 'x.pdf'])
+ 
+ test.must_not_exist(['docs', 'sub', 'x.aux'])
+ test.must_not_exist(['docs', 'sub', 'x.dvi'])
+ test.must_not_exist(['docs', 'sub', 'x.log'])
+ test.must_not_exist(['docs', 'sub', 'x.pdf'])
+ 
+ test.up_to_date(arguments = '.', stderr=None, stdout=None)
+ 
+ test.write(['docs','sub', 'y.tex'], """\
+ Sub-document 2
+ """)
+ 
+ test.not_up_to_date(arguments = '.')
+ 
+ test.pass_test()
Index: test/TEX/variant_dir_dup0.py
===================================================================
*** test/TEX/variant_dir_dup0.py	(revision 2901)
--- test/TEX/variant_dir_dup0.py	(working copy)
***************
*** 62,68 ****
  Import('env')
  
  test_dvi = env.DVI(source='test.tex')
! testpdf = env.PDF(source=test_dvi)
  """)
  
  
--- 62,70 ----
  Import('env')
  
  test_dvi = env.DVI(source='test.tex')
! test2_dvi = env.DVI(target='result',source='test2.tex')
! testpdf = env.PDF(target='pdfoutput',source=test_dvi)
! test2pdf = env.PDF(target='pdfoutput.xyz',source=test2_dvi)
  """)
  
  
***************
*** 228,233 ****
--- 230,292 ----
  \end{document}
  """)
  
+ test.write(['docs', 'test2.tex'],
+ r"""\documentclass{report}
+ 
+ \usepackage{graphicx}
+ \usepackage{epsfig,color} % for .tex version of figures if we go that way
+ 
+ \usepackage{makeidx}
+ \makeindex
+ 
+ \begin{document}
+  
+ \title{Report Title}
+ 
+ \author{A. N. Author}
+  
+ \maketitle 
+  
+ \begin{abstract}
+ there is no abstract
+ \end{abstract}
+ 
+ \tableofcontents
+ \listoffigures
+ 
+ \chapter{Introduction}
+ 
+ The introduction is short.
+ 
+ \index{Acknowledgements}
+ 
+ \section{Acknowledgements}
+ 
+ The Acknowledgements are show as well \cite{AnAuthor:2006fk}.  
+ 
+ \index{Getting the Report}
+ 
+ To get a hard copy of this report call me.
+ 
+ \begin{figure}[htbp]
+ \begin{center}
+ \input{Fig1.tex} % testing figure variant that uses TeX labeling
+ \caption{Zone and Node indexing}
+ \label{fig1}
+ \end{center}
+ \end{figure}
+ 
+ All done now.
+ 
+ \bibliographystyle{unsrt}
+ \bibliography{test}
+ \newpage
+ 
+ \printindex
+ 
+ \end{document}
+ """)
+ 
  
  # makeindex will write status messages to stderr (grrr...), so ignore it.
  test.run(arguments = '.', stderr=None)
***************
*** 245,252 ****
      'test.ind',
      'test.lof',
      'test.log',
-     'test.pdf',
      'test.toc',
  ]
  
  for f in files:
--- 304,322 ----
      'test.ind',
      'test.lof',
      'test.log',
      'test.toc',
+     'test2.aux',
+     'test2.bbl',
+     'test2.blg',
+     'test2.idx',
+     'test2.ilg',
+     'test2.ind',
+     'test2.lof',
+     'test2.log',
+     'test2.toc',
+     'result.dvi',
+     'pdfoutput.pdf',
+     'pdfoutput.xyz'
  ]
  
  for f in files:
Index: test/TEX/TEX.py
===================================================================
*** test/TEX/TEX.py	(revision 2901)
--- test/TEX/TEX.py	(working copy)
***************
*** 45,52 ****
  test.write('mytex.py', r"""
  import sys
  import os
! base_name = os.path.splitext(sys.argv[1])[0]
! infile = open(sys.argv[1], 'rb')
  dvi_file = open(base_name+'.dvi', 'wb')
  aux_file = open(base_name+'.aux', 'wb')
  log_file = open(base_name+'.log', 'wb')
--- 45,57 ----
  test.write('mytex.py', r"""
  import sys
  import os
! i = 1
! arg = sys.argv[i]
! while arg[0] == '-':
!     i += 1
!     arg = sys.argv[i]
! base_name = os.path.splitext(arg)[0]
! infile = open(arg, 'rb')
  dvi_file = open(base_name+'.dvi', 'wb')
  aux_file = open(base_name+'.aux', 'wb')
  log_file = open(base_name+'.log', 'wb')
***************
*** 175,181 ****
      test.run(stderr = None)
      output_lines = string.split(test.stdout(), '\n')
  
!     reruns = filter(lambda x: string.find(x, 'latex rerun.tex') != -1, output_lines)
      if len(reruns) != 2:
          print "Expected 2 latex calls, got %s:" % len(reruns)
          print string.join(reruns, '\n')
--- 180,187 ----
      test.run(stderr = None)
      output_lines = string.split(test.stdout(), '\n')
  
!     reruns = filter(lambda x: string.find(x, 'latex -interaction=nonstopmode rerun.tex') != -1, output_lines)
! 
      if len(reruns) != 2:
          print "Expected 2 latex calls, got %s:" % len(reruns)
          print string.join(reruns, '\n')
Index: test/TEX/PDFLATEX.py
===================================================================
*** test/TEX/PDFLATEX.py	(revision 2901)
--- test/TEX/PDFLATEX.py	(working copy)
***************
*** 45,52 ****
  test.write('mypdflatex.py', r"""
  import sys
  import os
! base_name = os.path.splitext(sys.argv[1])[0]
! infile = open(sys.argv[1], 'rb')
  pdf_file = open(base_name+'.pdf', 'wb')
  aux_file = open(base_name+'.aux', 'wb')
  log_file = open(base_name+'.log', 'wb')
--- 45,57 ----
  test.write('mypdflatex.py', r"""
  import sys
  import os
! i = 1
! arg = sys.argv[i]
! while arg[0] == '-':
!     i += 1
!     arg = sys.argv[i]
! base_name = os.path.splitext(arg)[0]
! infile = open(arg, 'rb')
  pdf_file = open(base_name+'.pdf', 'wb')
  aux_file = open(base_name+'.aux', 'wb')
  log_file = open(base_name+'.log', 'wb')
Index: test/TEX/LATEX.py
===================================================================
*** test/TEX/LATEX.py	(revision 2901)
--- test/TEX/LATEX.py	(working copy)
***************
*** 45,52 ****
  test.write('mylatex.py', r"""
  import sys
  import os
! base_name = os.path.splitext(sys.argv[1])[0]
! infile = open(sys.argv[1], 'rb')
  dvi_file = open(base_name+'.dvi', 'wb')
  aux_file = open(base_name+'.aux', 'wb')
  log_file = open(base_name+'.log', 'wb')
--- 45,57 ----
  test.write('mylatex.py', r"""
  import sys
  import os
! i = 1
! arg = sys.argv[i]
! while arg[0] == '-':
!     i += 1
!     arg = sys.argv[i]
! base_name = os.path.splitext(arg)[0]
! infile = open(arg, 'rb')
  dvi_file = open(base_name+'.dvi', 'wb')
  aux_file = open(base_name+'.aux', 'wb')
  log_file = open(base_name+'.log', 'wb')
***************
*** 112,120 ****
  foo = Environment(ENV = ENV)
  latex = foo.Dictionary('LATEX')
  makeindex = foo.Dictionary('MAKEINDEX')
  bar = Environment(ENV = ENV,
!                   LATEX = r'%(_python_)s wrapper.py ' + latex,
!                   MAKEINDEX =  r' wrapper.py ' + makeindex)
  foo.DVI(target = 'foo.dvi', source = 'foo.ltx')
  bar.DVI(target = 'bar', source = 'bar.latex')
  
--- 117,126 ----
  foo = Environment(ENV = ENV)
  latex = foo.Dictionary('LATEX')
  makeindex = foo.Dictionary('MAKEINDEX')
+ python_path = r'%(_python_)s'
  bar = Environment(ENV = ENV,
!                   LATEX = python_path + ' wrapper.py ' + latex,
!                   MAKEINDEX =  python_path + ' wrapper.py ' + makeindex)
  foo.DVI(target = 'foo.dvi', source = 'foo.ltx')
  bar.DVI(target = 'bar', source = 'bar.latex')
  
***************
*** 130,136 ****
  """
  
      makeindex =  r"""
! \documentclass{letter}
  \usepackage{makeidx}
  \makeindex
  \begin{document}
--- 136,142 ----
  """
  
      makeindex =  r"""
! \documentclass{report}
  \usepackage{makeidx}
  \makeindex
  \begin{document}
***************
*** 141,147 ****
  """
  
      latex1 = r"""
! \documentclass{letter}
  \usepackage{makeidx}
  \makeindex
  \begin{document}
--- 147,153 ----
  """
  
      latex1 = r"""
! \documentclass{report}
  \usepackage{makeidx}
  \makeindex
  \begin{document}
Index: src/engine/SCons/Tool/pdflatex.py
===================================================================
*** src/engine/SCons/Tool/pdflatex.py	(revision 2901)
--- src/engine/SCons/Tool/pdflatex.py	(working copy)
***************
*** 9,15 ****
  """
  
  #
! # __COPYRIGHT__
  #
  # Permission is hereby granted, free of charge, to any person obtaining
  # a copy of this software and associated documentation files (the
--- 9,15 ----
  """
  
  #
! # Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007 The SCons Foundation
  #
  # Permission is hereby granted, free of charge, to any person obtaining
  # a copy of this software and associated documentation files (the
***************
*** 31,37 ****
  # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  #
  
! __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
  
  import SCons.Action
  import SCons.Util
--- 31,37 ----
  # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  #
  
! __revision__ = "src/engine/SCons/Tool/pdflatex.py 2611 2008/01/29 11:58:38 managan"
  
  import SCons.Action
  import SCons.Util
***************
*** 66,72 ****
      bld.add_emitter('.latex', SCons.Tool.tex.tex_emitter)
  
      env['PDFLATEX']      = 'pdflatex'
!     env['PDFLATEXFLAGS'] = SCons.Util.CLVar('')
      env['PDFLATEXCOM']   = 'cd ${TARGET.dir} && $PDFLATEX $PDFLATEXFLAGS ${SOURCE.file}'
      env['LATEXRETRIES']  = 3
  
--- 66,72 ----
      bld.add_emitter('.latex', SCons.Tool.tex.tex_emitter)
  
      env['PDFLATEX']      = 'pdflatex'
!     env['PDFLATEXFLAGS'] = SCons.Util.CLVar('-interaction=nonstopmode')
      env['PDFLATEXCOM']   = 'cd ${TARGET.dir} && $PDFLATEX $PDFLATEXFLAGS ${SOURCE.file}'
      env['LATEXRETRIES']  = 3
  
Index: src/engine/SCons/Tool/tex.py
===================================================================
*** src/engine/SCons/Tool/tex.py	(revision 2901)
--- src/engine/SCons/Tool/tex.py	(working copy)
***************
*** 9,15 ****
  """
  
  #
! # __COPYRIGHT__
  #
  # Permission is hereby granted, free of charge, to any person obtaining
  # a copy of this software and associated documentation files (the
--- 9,15 ----
  """
  
  #
! # Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007 The SCons Foundation
  #
  # Permission is hereby granted, free of charge, to any person obtaining
  # a copy of this software and associated documentation files (the
***************
*** 31,47 ****
  # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  #
  
! __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
  
  import os.path
  import re
  import string
  
  import SCons.Action
  import SCons.Node
  import SCons.Node.FS
  import SCons.Util
! 
  warning_rerun_re = re.compile('(^LaTeX Warning:.*Rerun)|(^Package \w+ Warning:.*Rerun)', re.MULTILINE)
  
  rerun_citations_str = "^LaTeX Warning:.*\n.*Rerun to get citations correct"
--- 31,51 ----
  # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  #
  
! __revision__ = "src/engine/SCons/Tool/tex.py 2611 2008/01/29 11:58:38 managan"
  
  import os.path
  import re
  import string
+ import shutil
  
  import SCons.Action
  import SCons.Node
  import SCons.Node.FS
  import SCons.Util
! #
! # regular expressions used to search for Latex features
! # or outputs that require rerunning latex
! #
  warning_rerun_re = re.compile('(^LaTeX Warning:.*Rerun)|(^Package \w+ Warning:.*Rerun)', re.MULTILINE)
  
  rerun_citations_str = "^LaTeX Warning:.*\n.*Rerun to get citations correct"
***************
*** 54,61 ****
--- 58,68 ----
  openout_re = re.compile(r"\\openout.*`(.*)'")
  
  makeindex_re = re.compile(r"^[^%]*\\makeindex", re.MULTILINE)
+ index_re = re.compile(r"^[^%]*\\index", re.MULTILINE)
  tableofcontents_re = re.compile(r"^[^%]*\\tableofcontents", re.MULTILINE)
  bibliography_re = re.compile(r"^[^%]*\\bibliography", re.MULTILINE)
+ listoffigures_re = re.compile(r"^[^%]*\\listoffigures", re.MULTILINE)
+ hyperref_re = re.compile(r"^[^%]*\\usepackage.*\{hyperref\}", re.MULTILINE)
  
  # An Action sufficient to build any generic tex file.
  TeXAction = None
***************
*** 78,84 ****
      basedir = os.path.split(str(source[0]))[0]
      basefile = os.path.split(str(basename))[1]
      abspath = os.path.abspath(basedir)
!     targetbase = SCons.Util.splitext(str(target[0]))[0]
      targetdir = os.path.split(str(target[0]))[0]
  
      # Not sure if these environment changes should go here or make the
--- 85,91 ----
      basedir = os.path.split(str(source[0]))[0]
      basefile = os.path.split(str(basename))[1]
      abspath = os.path.abspath(basedir)
!     targetext = os.path.splitext(str(target[0]))[1]
      targetdir = os.path.split(str(target[0]))[0]
  
      # Not sure if these environment changes should go here or make the
***************
*** 121,128 ****
      if os.path.exists(tocfilename):
          tocContents = open(tocfilename, "rb").read()
  
      # Run LaTeX once to generate a new aux file and log file.
!     XXXLaTeXAction(target, source, env)
  
      # Decide if various things need to be run, or run again.  We check
      # for the existence of files before opening them--even ones like the
--- 128,150 ----
      if os.path.exists(tocfilename):
          tocContents = open(tocfilename, "rb").read()
  
+     loffilename = os.path.join(targetdir, basefile + '.lof')
+     lofContents = ""
+     if os.path.exists(loffilename):
+         lofContents = open(loffilename, "rb").read()
+ 
+     outfilename = os.path.join(targetdir, basefile + '.out')
+     outContents = ""
+     if os.path.exists(outfilename):
+         outContents = open(outfilename, "rb").read()
+ 
+     # generate the file name that latex will generate
+     resultfilename = os.path.join(targetdir, basefile + targetext)
+ 
      # Run LaTeX once to generate a new aux file and log file.
!     result = XXXLaTeXAction(target, source, env)
!     if result != 0:
!         return result
  
      # Decide if various things need to be run, or run again.  We check
      # for the existence of files before opening them--even ones like the
***************
*** 130,136 ****
      # with stubs that don't necessarily generate all of the same files.
  
      # Read the log file to find all .aux files
!     logfilename = os.path.join(targetbase + '.log')
      auxfiles = []
      if os.path.exists(logfilename):
          content = open(logfilename, "rb").read()
--- 152,158 ----
      # with stubs that don't necessarily generate all of the same files.
  
      # Read the log file to find all .aux files
!     logfilename = os.path.join(targetdir,basefile + '.log')
      auxfiles = []
      if os.path.exists(logfilename):
          content = open(logfilename, "rb").read()
***************
*** 142,149 ****
          if os.path.exists(target_aux):
              content = open(target_aux, "rb").read()
              if string.find(content, "bibdata") != -1:
!                 bibfile = env.fs.File(targetbase)
!                 BibTeXAction(bibfile, bibfile, env)
                  break
  
      must_rerun_latex = 0
--- 164,173 ----
          if os.path.exists(target_aux):
              content = open(target_aux, "rb").read()
              if string.find(content, "bibdata") != -1:
!                 bibfile = env.fs.File(os.path.join(targetdir,basefile))
!                 result = BibTeXAction(bibfile, bibfile, env)
!                 if result != 0:
!                     return result
                  break
  
      must_rerun_latex = 0
***************
*** 158,172 ****
      # Now decide if latex will need to be run again due to index.
      if os.path.exists(idxfilename) and idxContents != open(idxfilename, "rb").read():
          # We must run makeindex
!         idxfile = env.fs.File(targetbase)
!         MakeIndexAction(idxfile, idxfile, env)
          must_rerun_latex = 1
  
      if must_rerun_latex == 1:
!         XXXLaTeXAction(target, source, env)
  
      # Now decide if latex needs to be run yet again to resolve warnings.
-     logfilename = targetbase + '.log'
      for _ in range(int(env.subst('$LATEXRETRIES'))):
          if not os.path.exists(logfilename):
              break
--- 182,207 ----
      # Now decide if latex will need to be run again due to index.
      if os.path.exists(idxfilename) and idxContents != open(idxfilename, "rb").read():
          # We must run makeindex
!         idxfile = env.fs.File(os.path.join(targetdir,basefile))
!         result = MakeIndexAction(idxfile, idxfile, env)
!         if result != 0:
!             return result
!         must_rerun_latex = 1
! 
!     # Now decide if latex will need to be run again due to list of figures.
!     if os.path.exists(loffilename) and lofContents != open(loffilename, "rb").read():
!         must_rerun_latex = 1
! 
!     # Now decide if latex will need to be run again due to hyperref bookmarks
!     if os.path.exists(outfilename) and outContents != open(outfilename, "rb").read():
          must_rerun_latex = 1
  
      if must_rerun_latex == 1:
!         result = XXXLaTeXAction(target, source, env)
!         if result != 0:
!             return result
  
      # Now decide if latex needs to be run yet again to resolve warnings.
      for _ in range(int(env.subst('$LATEXRETRIES'))):
          if not os.path.exists(logfilename):
              break
***************
*** 175,182 ****
             not rerun_citations_re.search(content) and \
             not undefined_references_re.search(content):
              break
!         XXXLaTeXAction(target, source, env)
! 
      env['ENV']['TEXINPUTS'] = texinputs_save
      env['ENV']['BIBINPUTS'] = bibinputs_save
      env['ENV']['BSTINPUTS'] = bibinputs_save
--- 210,234 ----
             not rerun_citations_re.search(content) and \
             not undefined_references_re.search(content):
              break
!         result = XXXLaTeXAction(target, source, env)
!         if result != 0:
!             return result
! 
!     # rename Latex's output to what the target name is
!     if not (str(target[0]) == resultfilename  and  os.path.exists(resultfilename)):
!         if os.path.exists(resultfilename):
!             print "move %s to %s" % (resultfilename, str(target[0]), )
!             shutil.move(resultfilename,str(target[0]))
!         # if the user gave some other extension try  PDFSUFFIX and then .dvi
!         # not sure how to tell if we got here from a PDF or DVI builder.
!         else:
!             for ext in [env['PDFSUFFIX'],'.dvi']:
!                 resultfilename = os.path.splitext(resultfilename)[0] + ext
!                 if os.path.exists(resultfilename):
!                     print "move %s to %s" % (resultfilename, str(target[0]), )
!                     shutil.move(resultfilename,str(target[0]))
!                     break
!     
      env['ENV']['TEXINPUTS'] = texinputs_save
      env['ENV']['BIBINPUTS'] = bibinputs_save
      env['ENV']['BSTINPUTS'] = bibinputs_save
***************
*** 185,194 ****
      # later on Mac OSX so leave it,
      # env['ENV']['TEXPICTS']  = texpicts_save
  
!     return 0
  
  def LaTeXAuxAction(target = None, source= None, env=None):
!     InternalLaTeXAuxAction( LaTeXAction, target, source, env )
  
  LaTeX_re = re.compile("\\\\document(style|class)")
  
--- 237,247 ----
      # later on Mac OSX so leave it,
      # env['ENV']['TEXPICTS']  = texpicts_save
  
!     return result
  
  def LaTeXAuxAction(target = None, source= None, env=None):
!     result = InternalLaTeXAuxAction( LaTeXAction, target, source, env )
!     return result
  
  LaTeX_re = re.compile("\\\\document(style|class)")
  
***************
*** 205,246 ****
      decide the "flavor" of the source and then executes the appropriate
      program."""
      if is_LaTeX(source):
!         LaTeXAuxAction(target,source,env)
      else:
!         TeXAction(target,source,env)
!     return 0
  
  def tex_emitter(target, source, env):
!     base = SCons.Util.splitext(str(source[0]))[0]
      targetbase = SCons.Util.splitext(str(target[0]))[0]
  
!     target.append(targetbase + '.aux')
!     env.Precious(targetbase + '.aux')
!     target.append(targetbase + '.log')
      for f in source:
          content = f.get_contents()
          if tableofcontents_re.search(content):
!             target.append(targetbase + '.toc')
!             env.Precious(targetbase + '.toc')
          if makeindex_re.search(content):
!             target.append(targetbase + '.ilg')
!             target.append(targetbase + '.ind')
!             target.append(targetbase + '.idx')
!             env.Precious(targetbase + '.idx')
          if bibliography_re.search(content):
!             target.append(targetbase + '.bbl')
!             env.Precious(targetbase + '.bbl')
!             target.append(targetbase + '.blg')
  
!     # read log file to get all .aux files
!     logfilename = targetbase + '.log'
!     dir, base_nodir = os.path.split(targetbase)
      if os.path.exists(logfilename):
          content = open(logfilename, "rb").read()
          out_files = openout_re.findall(content)
!         out_files = filter(lambda f, b=base_nodir+'.aux': f != b, out_files)
!         if dir != '':
!             out_files = map(lambda f, d=dir: d+os.sep+f, out_files)
          target.extend(out_files)
          for f in out_files:
              env.Precious( f )
--- 258,362 ----
      decide the "flavor" of the source and then executes the appropriate
      program."""
      if is_LaTeX(source):
!         result = LaTeXAuxAction(target,source,env)
      else:
!         result = TeXAction(target,source,env)
!     return result
  
  def tex_emitter(target, source, env):
!     """An emitter for TeX and LaTeX sources. 
!     For LaTeX sources we try and find the common created files that
!     are needed on subsequent runs of latex to finish tables of contents,
!     bibliographies, indices, lists of figures, and hyperlink references.
!     """
      targetbase = SCons.Util.splitext(str(target[0]))[0]
+     basename = SCons.Util.splitext(str(source[0]))[0]
+     basefile = os.path.split(str(basename))[1]
+     
+     #
+     # file names we will make use of in searching the sources and log file
+     #
+     auxfilename = targetbase + '.aux'
+     tocfilename = targetbase + '.toc'
+     idxfilename = targetbase + '.idx'
+     indfilename = targetbase + '.ind'
+     ilgfilename = targetbase + '.ilg'
+     bblfilename = targetbase + '.bbl'
+     blgfilename = targetbase + '.blg'
+     loffilename = targetbase + '.lof'
+     outfilename = targetbase + '.out'
  
!     target.append(auxfilename)
!     env.Precious(auxfilename)
!     logfilename = targetbase + '.log'
!     target.append(logfilename)
      for f in source:
          content = f.get_contents()
+         # even with no sections or chapters \tableofcontents generates an empty .toc file
          if tableofcontents_re.search(content):
!             target.append(tocfilename)
!             env.Precious(tocfilename)
! 
!         # \makeindex by itself generates empty .idx file
!         # \printindex by itself does nothing, \index by itself does nothing
!         # \printindex \index by themselves do nothing
!         # \makeindex & \index causes makeindex run and generates .idx, .ilg, & .ind files
!         # \makeindex & \printindex generates empty .idx file; makeindex not run
          if makeindex_re.search(content):
!             target.append(idxfilename)
!             env.Precious(idxfilename)
!         if (makeindex_re.search(content) and index_re.search(content)):
!             target.append(indfilename)
!             env.Precious(indfilename)
!             target.append(ilgfilename)
!             env.Precious(ilgfilename)
! 
!         # \bibliography by itself generates empty .bbl file, nonempty .blg file, errors for no \cite, \bibstyle
!         # \bibliographystyle by itself generates nothing, bibtex not run
!         # \cite by itself generates nothing, bibtex not run, latex reruns to limit
!         # \bibliographystyle & \cite by themselves generates nothing, bibtex not run, latex reruns to limit
!         # \bibliography & \bibliographystyle by themselves generates .bbl file, & .blg file, errors for no \cite
          if bibliography_re.search(content):
!             target.append(bblfilename)
!             env.Precious(bblfilename)
!             target.append(blgfilename)
!             env.Precious(blgfilename)
! 
!         # even with no figures \listoffigures generates an empty .lof file
!         # It takes a \begin{figure} with \caption to get nonempty .lof
!         if listoffigures_re.search(content):
!             target.append(loffilename)
!             env.Precious(loffilename)
! 
!         # even with no sections or chapters \usepackage{hyperref} generates an empty .out file
!         if hyperref_re.search(content):
!             target.append(outfilename)
!             env.Precious(outfilename)
  
!     # read log file to get all other files that latex creates and will read on the next pass
      if os.path.exists(logfilename):
          content = open(logfilename, "rb").read()
          out_files = openout_re.findall(content)
!         # remove files from list that we have already added to the target list
!         # remove the .aux file from the list
!         out_files = filter(lambda f, b=basefile + '.aux': f != b, out_files)
!         # remove the .toc file from the list
!         out_files = filter(lambda f, b=basefile + '.toc': f != b, out_files)
!         # remove the .idx file from the list
!         out_files = filter(lambda f, b=basefile + '.idx': f != b, out_files)
!         # remove the .ind file from the list
!         out_files = filter(lambda f, b=basefile + '.ind': f != b, out_files)
!         # remove the .ilg file from the list
!         out_files = filter(lambda f, b=basefile + '.ilg': f != b, out_files)
!         # remove the .bbl file from the list
!         out_files = filter(lambda f, b=basefile + '.bbl': f != b, out_files)
!         # remove the .blg file from the list
!         out_files = filter(lambda f, b=basefile + '.blg': f != b, out_files)
!         # remove the .lof file from the list
!         out_files = filter(lambda f, b=basefile + '.lof': f != b, out_files)
!         # remove the .out file from the list
!         out_files = filter(lambda f, b=basefile + '.out': f != b, out_files)
! 
          target.extend(out_files)
          for f in out_files:
              env.Precious( f )
***************
*** 285,296 ****
      bld.add_emitter('.tex', tex_emitter)
  
      env['TEX']      = 'tex'
!     env['TEXFLAGS'] = SCons.Util.CLVar('')
      env['TEXCOM']   = 'cd ${TARGET.dir} && $TEX $TEXFLAGS ${SOURCE.file}'
  
      # Duplicate from latex.py.  If latex.py goes away, then this is still OK.
      env['LATEX']        = 'latex'
!     env['LATEXFLAGS']   = SCons.Util.CLVar('')
      env['LATEXCOM']     = 'cd ${TARGET.dir} && $LATEX $LATEXFLAGS ${SOURCE.file}'
      env['LATEXRETRIES'] = 3
  
--- 401,412 ----
      bld.add_emitter('.tex', tex_emitter)
  
      env['TEX']      = 'tex'
!     env['TEXFLAGS'] = SCons.Util.CLVar('-interaction=nonstopmode')
      env['TEXCOM']   = 'cd ${TARGET.dir} && $TEX $TEXFLAGS ${SOURCE.file}'
  
      # Duplicate from latex.py.  If latex.py goes away, then this is still OK.
      env['LATEX']        = 'latex'
!     env['LATEXFLAGS']   = SCons.Util.CLVar('-interaction=nonstopmode')
      env['LATEXCOM']     = 'cd ${TARGET.dir} && $LATEX $LATEXFLAGS ${SOURCE.file}'
      env['LATEXRETRIES'] = 3
  
***************
*** 302,306 ****
--- 418,428 ----
      env['MAKEINDEXFLAGS'] = SCons.Util.CLVar('')
      env['MAKEINDEXCOM']   = 'cd ${TARGET.dir} && $MAKEINDEX $MAKEINDEXFLAGS ${SOURCE.file}'
  
+     # Duplicate from pdflatex.py.  If latex.py goes away, then this is still OK.
+     env['PDFLATEX']      = 'pdflatex'
+     env['PDFLATEXFLAGS'] = SCons.Util.CLVar('-interaction=nonstopmode')
+     env['PDFLATEXCOM']   = 'cd ${TARGET.dir} && $PDFLATEX $PDFLATEXFLAGS ${SOURCE.file}'
+     env['LATEXRETRIES']  = 3
+ 
  def exists(env):
      return env.Detect('tex')
Index: src/engine/SCons/Tool/latex.py
===================================================================
*** src/engine/SCons/Tool/latex.py	(revision 2901)
--- src/engine/SCons/Tool/latex.py	(working copy)
***************
*** 9,15 ****
  """
  
  #
! # __COPYRIGHT__
  #
  # Permission is hereby granted, free of charge, to any person obtaining
  # a copy of this software and associated documentation files (the
--- 9,15 ----
  """
  
  #
! # Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007 The SCons Foundation
  #
  # Permission is hereby granted, free of charge, to any person obtaining
  # a copy of this software and associated documentation files (the
***************
*** 31,37 ****
  # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  #
  
! __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
  
  import SCons.Action
  import SCons.Defaults
--- 31,37 ----
  # WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  #
  
! __revision__ = "src/engine/SCons/Tool/latex.py 2611 2008/01/29 11:58:38 managan"
  
  import SCons.Action
  import SCons.Defaults
***************
*** 63,69 ****
      bld.add_emitter('.latex', SCons.Tool.tex.tex_emitter)
  
      env['LATEX']        = 'latex'
!     env['LATEXFLAGS']   = SCons.Util.CLVar('')
      env['LATEXCOM']     = 'cd ${TARGET.dir} && $LATEX $LATEXFLAGS ${SOURCE.file}'
      env['LATEXRETRIES'] = 3
  
--- 63,69 ----
      bld.add_emitter('.latex', SCons.Tool.tex.tex_emitter)
  
      env['LATEX']        = 'latex'
!     env['LATEXFLAGS']   = SCons.Util.CLVar('-interaction=nonstopmode')
      env['LATEXCOM']     = 'cd ${TARGET.dir} && $LATEX $LATEXFLAGS ${SOURCE.file}'
      env['LATEXRETRIES'] = 3
  
