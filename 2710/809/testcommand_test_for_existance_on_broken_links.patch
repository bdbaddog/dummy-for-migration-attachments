Index: QMTest/TestCommon.py
===================================================================
--- QMTest/TestCommon.py	(revision 5177)
+++ QMTest/TestCommon.py	(working copy)
@@ -417,7 +417,7 @@
         if any of the files does not exist.
         """
         files = [is_List(x) and os.path.join(*x) or x for x in files]
-        missing = [x for x in files if not os.path.exists(x)]
+        missing = [x for x in files if not os.path.exists(x) and not os.path.islink(x) ]
         if missing:
             print "Missing files: `%s'" % "', `".join(missing)
             self.fail_test(missing)
@@ -493,7 +493,7 @@
         Exits FAILED if any of the files exists.
         """
         files = [is_List(x) and os.path.join(*x) or x for x in files]
-        existing = list(filter(os.path.exists, files))
+        existing = [x for x in files if os.path.exists(x) or os.path.islink(x)]
         if existing:
             print "Unexpected files exist: `%s'" % "', `".join(existing)
             self.fail_test(existing)
Index: QMTest/TestCommonTests.py
===================================================================
--- QMTest/TestCommonTests.py	(revision 5177)
+++ QMTest/TestCommonTests.py	(working copy)
@@ -974,8 +974,25 @@
         stderr = run_env.stderr()
         assert stderr == "PASSED\n", stderr
 
+    def test_broken_link(self) :
+        """Test must_exist():  exists but it is a broken link"""
+        run_env = self.run_env
 
+        script = lstrip("""\
+        from TestCommon import TestCommon
+        tc = TestCommon(workdir='')
+        tc.symlink('badtarget', "brokenlink")
+        tc.must_exist('brokenlink')
+        tc.pass_test()
+        """)
+        run_env.run(program=sys.executable, stdin=script)
+        stdout = run_env.stdout()
+        assert stdout == "", stdout
+        stderr = run_env.stderr()
+        assert stderr == "PASSED\n", stderr
 
+
+
 class must_match_TestCase(TestCommonTestCase):
     def test_success(self):
         """Test must_match():  success"""
@@ -1498,8 +1515,24 @@
         stderr = run_env.stderr()
         assert stderr == "PASSED\n", stderr
 
+    def test_existing_broken_link(self):
+        """Test must_not_exist():  exists but it is a broken link"""
+        run_env = self.run_env
 
+        script = lstrip("""\
+        from TestCommon import TestCommon
+        tc = TestCommon(workdir='')
+        tc.symlink('badtarget', 'brokenlink')
+        tc.must_not_exist('brokenlink')
+        tc.pass_test()
+        """)
+        run_env.run(program=sys.executable, stdin=script)
+        stdout = run_env.stdout()
+        assert stdout == "Unexpected files exist: `brokenlink'\n", stdout
+        stderr = run_env.stderr()
+        assert stderr.find("FAILED") != -1, stderr
 
+
 class run_TestCase(TestCommonTestCase):
     def test_argument_handling(self):
         """Test run():  argument handling"""
