=== added file 'src/engine/SCons/Tool/pyext.py'
--- src/engine/SCons/Tool/pyext.py	1970-01-01 00:00:00 +0000
+++ src/engine/SCons/Tool/pyext.py	2008-01-02 18:34:46 +0000
@@ -0,0 +1,97 @@
+"""SCons.Tool.pyext
+
+Tool-specific initialization for python extensions.
+
+There normally shouldn't be any need to import this module directly.
+It will usually be imported through the generic SCons.Tool.Tool()
+selection method.
+
+"""
+
+#
+# __COPYRIGHT__
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+
+import os
+
+import SCons.Action
+import SCons.Defaults
+# import SCons.Scanner
+import SCons.Tool
+import SCons.Util
+
+def generate(env):
+    """Add Builders and construction variables for python extensions to an
+    Environment."""
+    env['PYEXTPREFFIX'] = ''
+    env['PYEXTPYTHON']  = 'python'
+
+    # Set to 0 if the targeted python is different than the python executing
+    # scons
+    same = 1
+
+    # We define commands as strings so that we can either execute them using
+    # eval (same python for scons and distutils) or by executing them through
+    # the shell.
+    cmds = {'PYEXTCC': "sysconfig.get_config_var('CC')", 
+            'PYEXTCFLAGS': "sysconfig.get_config_var('CFLAGS')", 
+            'PYEXTCCSHARED': "sysconfig.get_config_var('CCSHARED')", 
+            'PYEXTLINKFLAGS': "sysconfig.get_config_var('LDFLAGS')", 
+            'PYEXTLINK': "sysconfig.get_config_var('LDSHARED')", 
+            'PYEXTINCPATH': "sysconfig.get_python_inc()", 
+            'PYEXTSUFFIX': "sysconfig.get_config_var('SO')"} 
+    if same:
+        from distutils import sysconfig
+        for k, v in cmds.items():
+            env[k] = eval(v)
+    else:
+        raise NotImplementedError("Compiling extensions for a different "\
+                                  "python than the one executing scons is"\
+                                  " not supported yet")
+        cmd = env['PYEXTPYTHON'] + ' -c "from distutils import sysconfig; print %s"'
+
+    env['PYEXTCPPPATH']         = SCons.Util.CLVar(env['PYEXTINCPATH'])
+    env['_PYEXTCPPINCFLAGS']    = '$( ${_concat(INCPREFIX, PYEXTCPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)'
+    env['PYEXTOBJSUFFIX']       = env['SHOBJSUFFIX']
+    env['PYEXTOBJPREFIX']       = env['SHOBJPREFIX']
+
+    # XXX: This won't work with MS tools ...
+    env['PYEXTCCCOM']       = "$PYEXTCC -o $TARGET -c $PYEXTCCSHARED $PYEXTCFLAGS $_PYEXTCPPINCFLAGS $SOURCES"
+    env['PYEXTLINKCOM']     = "$PYEXTLINK -o $TARGET $PYEXTLINKFLAGS $SOURCES $PYEXTLINKFLAGSEND"
+
+    # Create the PythonObject builder
+    pyobj = SCons.Tool.createPythonObjectBuilder(env)
+    action = SCons.Action.Action("$PYEXTCCCOM", "$PYEXTCCCOMSTR")
+    pyobj.add_emitter('.c', SCons.Defaults.SharedObjectEmitter)
+    pyobj.add_action('.c', action)
+
+    # Create the PythonExtension builder
+    SCons.Tool.createPythonExtensionBuilder(env)
+
+def exists(env):
+    try:
+        import distutils
+        return 1
+    except ImportError:
+        return 0

=== added directory 'test/Pyext'
=== added file 'test/Pyext/basic_pyext.py'
--- test/Pyext/basic_pyext.py	1970-01-01 00:00:00 +0000
+++ test/Pyext/basic_pyext.py	2008-01-03 13:03:34 +0000
@@ -0,0 +1,29 @@
+# This just tests that the Python* builders actually run on the tested
+# platform. No functionality is tested.
+import TestSCons
+
+test_pyext = TestSCons.TestSCons()
+
+test_pyext.write('SConstruct', """\
+env = Environment()
+t = Tool('pyext')
+t(env)
+env.PythonExtension('hello.c')
+""")
+
+hello = """
+#include <Python.h>
+
+int
+foo(void)
+{
+    Py_Initialize();
+    return (0);
+}
+"""
+
+test_pyext.write('hello.c', hello)
+
+test_pyext.run()
+
+test_pyext.pass_test()

=== added file 'test/Pyext/basic_pyobj.py'
--- test/Pyext/basic_pyobj.py	1970-01-01 00:00:00 +0000
+++ test/Pyext/basic_pyobj.py	2008-01-02 18:46:08 +0000
@@ -0,0 +1,29 @@
+# This just tests that the Python* builders actually run on the tested
+# platform. No functionality is tested.
+import TestSCons
+
+test_pyobj = TestSCons.TestSCons()
+
+test_pyobj.write('SConstruct', """\
+env = Environment()
+t = Tool('pyext')
+t(env)
+env.PythonObject('hello.c')
+""")
+
+hello = """
+#include <Python.h>
+
+int
+foo(void)
+{
+    Py_Initialize();
+    return (0);
+}
+"""
+
+test_pyobj.write('hello.c', hello)
+
+test_pyobj.run()
+
+test_pyobj.pass_test()

=== added file 'test/Pyext/pyext_works.py'
--- test/Pyext/pyext_works.py	1970-01-01 00:00:00 +0000
+++ test/Pyext/pyext_works.py	2008-01-03 13:48:41 +0000
@@ -0,0 +1,47 @@
+# This just tests that the Python* builders actually run on the tested
+# platform. No functionality is tested.
+import TestSCons
+
+test_pyext = TestSCons.TestSCons()
+
+test_pyext.write('SConstruct', """\
+env = Environment()
+t = Tool('pyext')
+t(env)
+env.PythonExtension('hello.c')
+""")
+
+hello = """
+#include <Python.h>
+
+static PyObject *
+spam_system(PyObject *self, PyObject *args)
+{
+    printf("Hello from C python");
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+static PyMethodDef SpamMethods[] = {
+    {"hello",  spam_system, METH_VARARGS, "Execute a shell command."},
+    {NULL, NULL, 0, NULL}        /* Sentinel */
+};
+
+PyMODINIT_FUNC
+inithello(void)
+{
+    (void) Py_InitModule("hello", SpamMethods);
+}
+"""
+
+test_pyext.write('hello.c', hello)
+
+test_pyext.write('test_hello.py', """
+import hello
+hello.hello()
+""")
+
+test_pyext.run() 
+test_pyext.run(program = ['python', 'test_hello.py'], stdout = "Hello from C python")
+
+test_pyext.pass_test()

=== modified file 'src/engine/SCons/Tool/__init__.py'
--- src/engine/SCons/Tool/__init__.py	2007-12-30 09:52:25 +0000
+++ src/engine/SCons/Tool/__init__.py	2008-01-02 15:59:56 +0000
@@ -352,6 +352,56 @@
     return (c_file, cxx_file)
 
 ##########################################################################
+#  Create common python builders
+
+def createPythonObjectBuilder(env):
+    """This is a utility function that creates the PythonObject Builder in an
+    Environment if it is not there already.
+
+    If it is already there, we return the existing one.
+    """
+
+    try:
+        pyobj = env['BUILDERS']['PythonObject']
+    except KeyError:
+        pyobj = SCons.Builder.Builder(action = {},
+                                      emitter = {},
+                                      prefix = '$PYEXTOBJPREFIX',
+                                      suffix = '$PYEXTOBJSUFFIX',
+                                      src_builder = ['CFile'],
+                                      source_scanner = SourceFileScanner,
+                                      single_source = 1)
+        env['BUILDERS']['PythonObject'] = pyobj
+
+    return pyobj
+
+def createPythonExtensionBuilder(env):
+    """This is a utility function that creates the PythonExtension Builder in
+    an Environment if it is not there already.
+
+    If it is already there, we return the existing one.
+    """
+
+    try:
+        pyext = env['BUILDERS']['PythonExtension']
+    except KeyError:
+        import SCons.Action
+        import SCons.Defaults
+        action = SCons.Action.Action("$PYEXTLINKCOM", "$PYEXTLINKCOMSTR")
+        action_list = [ SCons.Defaults.SharedCheck,
+                        action]
+        pyext = SCons.Builder.Builder(action = action_list,
+                                      emitter = "$SHLIBEMITTER",
+                                      prefix = '$PYEXTPREFIX',
+                                      suffix = '$PYEXTSUFFIX',
+                                      target_scanner = ProgramScanner,
+                                      src_suffix = '$PYEXTOBJSUFFIX',
+                                      src_builder = 'PythonObject')
+        env['BUILDERS']['PythonExtension'] = pyext
+
+    return pyext
+
+##########################################################################
 #  Create common Java builders
 
 def CreateJarBuilder(env):

