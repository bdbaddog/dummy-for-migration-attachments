Index: src/engine/SCons/Tool/MSVCCommon/__init__.py
===================================================================
--- src/engine/SCons/Tool/MSVCCommon/__init__.py	(revision 4011)
+++ src/engine/SCons/Tool/MSVCCommon/__init__.py	(working copy)
@@ -35,7 +35,8 @@
 import SCons.Errors
 import SCons.Platform.win32
 import SCons.Util
-
+# RDEVE: these item should be superseded by info stored in vs, right?
+#        keeping in because MSVS testing still rely on them
 from SCons.Tool.MSVCCommon.version import query_versions
 
 from SCons.Tool.MSVCCommon.misc import FindMSVSBatFile
Index: src/engine/SCons/Tool/MSVCCommon/misc.py
===================================================================
--- src/engine/SCons/Tool/MSVCCommon/misc.py	(revision 4011)
+++ src/engine/SCons/Tool/MSVCCommon/misc.py	(working copy)
@@ -56,8 +56,6 @@
         - first look into the registry
         - if not found, then look into the environment variable
           VS*COMMNTOOLS"""
-    if not arch in ["x86"]:
-        raise ValueError("Arch different than x86 not supported yet.")
 
     return find_bat(version, flavor)
 
@@ -106,7 +104,8 @@
     return parse_output(output, vars)
 
 def MergeMSVSBatFile(env, version=None, batfilename=None,
-                     vars=["INCLUDE", "LIB", "LIBPATH", "PATH"]):
+                     vars=["INCLUDE", "LIB", "LIBPATH", "PATH"],
+                     args=None):
     """Find MSVC/MSVS bat file for given version, run it and parse the result
     to update the environment.
 
@@ -147,14 +146,16 @@
             if batfilename is None:
                 msg = "batfile for version %s not found" % version
                 raise SCons.Errors.MSVCError(msg)
+                                
+    vars = ParseBatFile(env, batfilename, vars, args)
 
-    vars = ParseBatFile(env, batfilename, vars)
-
     for k, v in vars.items():
         env.PrependENVPath(k, v, delete_existing=1)
 
 def merge_default_version(env):
     version = get_default_version(env)
+    arch = get_default_arch(env)
+    
     # TODO(SK):  move this import up top without introducing circular
     # problems with others importing merge_default_version().
     import SCons.Tool.msvs
@@ -164,9 +165,10 @@
     # XXX: I think this is broken. This will silently set a bogus tool instead
     # of failing, but there is no other way with the current scons tool
     # framework
+    
     if batfilename is not None:
         vars = ('LIB', 'LIBPATH', 'PATH', 'INCLUDE')
-        vars = ParseBatFile(env, batfilename, vars)
+        vars = ParseBatFile(env, batfilename, vars, arch)
 
         for k, v in vars.items():
             env.PrependENVPath(k, v, delete_existing=1)
Index: src/engine/SCons/Tool/MSVCCommon/msvc_changes.txt
===================================================================
--- src/engine/SCons/Tool/MSVCCommon/msvc_changes.txt	(revision 4011)
+++ src/engine/SCons/Tool/MSVCCommon/msvc_changes.txt	(working copy)
@@ -10,18 +10,18 @@
 ---------------
 
 The following versions have been succesfully tested:
-	- VS 2008 (express), 32 bits
-	- VS 2005 (express), 32 bits
-	- VS 2003 (.Net, pro), 32 bits
+  - VS 2008 (express), 32 bits
+  - VS 2005 (express), 32 bits
+  - VS 2003 (.Net, pro), 32 bits
 
 Detection
 ---------
 
 All tools related to the ms toolchain are detected through the same method:
-	- detect the .bat configuration file (vsvarsall.bat/vsvars32.bat
-	  depending on the version) from the registry
-	- if registry does not return anything useful, use the VS*COMNTOOLS env
-	  variable.
+  - detect the .bat configuration file (vsvarsall.bat/vsvars32.bat
+    depending on the version) from the registry
+  - if registry does not return anything useful, use the VS*COMNTOOLS env
+    variable.
 
 A version is detected only when the .bat file actually exists on the
 filesystem.  Once the .bat file is found, it is executed through a clean
@@ -56,20 +56,24 @@
 Architecture
 ------------
 
-Not supported yet.
+env['MSVS_ARCH'] = 'x86' 
+                   'AMD64'
+                   
+if not set the selection logic defaults to x86. Cross compiling has been disabled filtering
+out values not included in  version.SUPPORTED_ARCH ( no tests made with cross compiling )               
 
 Fundamental changes
 ===================
 
 env["ENV"] has been expanded a bit on windows:
-	- add %SYSTEMROOT%\system32 in the path for windows
-	- add COMSPEC (needed by the .bat file execution)
+  - add %SYSTEMROOT%\system32 in the path for windows
+  - add COMSPEC (needed by the .bat file execution)
 
 Internals
 =========
 
 The code can be found in the MSVCCommon submodule:
-	- findloc: find the product dir from the registry or the shell environment
+  - findloc: find the product dir from the registry or the shell environment
         - versions: query the system for available versions of the VS suite on
           the system
         - misc: high level functions, *candidates* for the public API.
@@ -77,8 +81,8 @@
         - defaults: default values to use for the paths, to use instead of the
           whole env parsing which can be quite slow, but less reliable. Still
           experimental, may be removed
-	- envhelpers: functions to execute a VS .bat file, parse its output,
-	  and get the variables with modified values.
+  - envhelpers: functions to execute a VS .bat file, parse its output,
+    and get the variables with modified values.
 
 At this point, no function should be considered public, the exact API is not
 good yet.
Index: src/engine/SCons/Tool/MSVCCommon/version.py
===================================================================
--- src/engine/SCons/Tool/MSVCCommon/version.py	(revision 4011)
+++ src/engine/SCons/Tool/MSVCCommon/version.py	(working copy)
@@ -27,7 +27,7 @@
 """
 
 import SCons.Util
-
+import SCons.Errors
 from SCons.Tool.MSVCCommon.findloc import find_bat
 from SCons.Tool.MSVCCommon.vs import get_installed_visual_studios
 
@@ -35,6 +35,10 @@
 DEFVERSIONSTR = "9.0"
 DEFVERSION = float(DEFVERSIONSTR)
 
+# RDEVE: currently only these flavour have been tested
+SUPPORTED_ARCH = ['x86','amd64']
+
+
 def query_versions():
     """Query the system to get available versions of VS. A version is
     considered when a batfile is found."""
@@ -74,6 +78,27 @@
 
     return env['MSVS_VERSION']
 
+def get_default_arch(env):
+    """Return the default arch to use for MSVS
+
+    if no version was requested by the user through the MSVS_ARCH environment
+    variable, select x86
+
+    Return
+    ------
+    arch: str
+    """
+    
+    try:    
+      arch=env['MSVS_ARCH']
+    except:
+      arch='x86'
+      
+    if not arch in SUPPORTED_ARCH:
+      arch='x86'
+      
+    return arch     
+        
 def detect_msvs():
     """Return 1 if at least one version of MS toolchain is detected."""
     version = query_versions()
Index: src/engine/SCons/Tool/MSVCCommon/vs.py
===================================================================
--- src/engine/SCons/Tool/MSVCCommon/vs.py	(revision 4011)
+++ src/engine/SCons/Tool/MSVCCommon/vs.py	(working copy)
@@ -144,7 +144,16 @@
             vc_product_dir = self.find_vc_product_dir()
             self._cache['vc_product_dir'] = vc_product_dir
             return vc_product_dir
-
+    
+    def get_supported_arch(self):
+        try:
+            return self._cache['supported_arch']
+        except KeyError:
+            # RDEVE: for the time being use hardcoded lists
+            # supported_arch = self.find_supported_arch()
+            self._cache['supported_arch'] = self.supported_arch
+            return self.supported_arch
+                            
     def reset(self):
         self._cache = {}
 
@@ -217,12 +226,13 @@
                  batch_file_dir_env_relpath=r'..\..\VC',
                  executable_path=r'..\Common7\IDE\devenv.com',
                  default_dirname='Microsoft Visual Studio 9',
+                 supported_arch=['x86','amd64']
     ),
 
     # TODO(sgk):  verify the right values for 9.0 Express
     # Visual C++ 2008 Express Edition
     VisualStudio('9.0Exp',
-                 hkey_root=r'Software\Microsoft\VisualStudio\TODO',
+                 hkey_root=r'Software\Microsoft\VisualStudio\9.0',
                  common_tools_var='VS90COMNTOOLS',
                  batch_file='vcvarsall.bat',
                  vc_product_dir_key=r'Setup\VC\ProductDir',
@@ -230,6 +240,7 @@
                  batch_file_dir_env_relpath=r'..\..\VC',
                  executable_path=r'..\Common7\IDE\VCExpress.exe',
                  default_dirname='Microsoft Visual Studio 9',
+                 supported_arch=['x86']
     ),
 
     # Visual Studio 2005
@@ -242,6 +253,7 @@
                  batch_file_dir_env_relpath=r'..\..\VC',
                  executable_path=r'..\Common7\IDE\devenv.com',
                  default_dirname='Microsoft Visual Studio 8',
+                 supported_arch=['x86','amd64']
     ),
 
     # Visual C++ 2005 Express Edition
@@ -254,6 +266,7 @@
                  batch_file_dir_env_relpath=r'..\..\VC',
                  executable_path=r'..\Common7\IDE\VCExpress.exe',
                  default_dirname='Microsoft Visual Studio 8',
+                 supported_arch=['x86']
     ),
 
     # Visual Studio .NET 2003
@@ -266,6 +279,7 @@
                  batch_file_dir_env_relpath=None,
                  executable_path=r'..\Common7\IDE\devenv.com',
                  default_dirname='Microsoft Visual Studio .NET',
+                 supported_arch=['x86']
     ),
 
     # Visual Studio .NET
@@ -278,6 +292,7 @@
                  batch_file_dir_env_relpath=None,
                  executable_path=r'..\Common7\IDE\devenv.com',
                  default_dirname='Microsoft Visual Studio .NET',
+                 supported_arch=['x86']                                  
     ),
 
     # Visual Studio 6.0
@@ -290,6 +305,7 @@
                  batch_file_dir_env_relpath=None,
                  executable_path=r'Common\MSDev98\Bin\MSDEV.COM',
                  default_dirname='Microsoft Visual Studio',
+                 supported_arch=['x86']                 
     ),
 ]
 
@@ -298,6 +314,7 @@
     SupportedVSMap[vs.version] = vs
 
 
+
 # Finding installed versions of Visual Studio isn't cheap, because it
 # goes not only to the registry but also to the disk to sanity-check
 # that there is, in fact, a Visual Studio directory there and that the
@@ -406,8 +423,34 @@
 
     return env['MSVS_VERSION']
 
+def get_default_arch(env):
+    """Return the default arch to use for MSVS
+
+    if no version was requested by the user through the MSVS_ARCH environment
+    variable, select x86
+
+    Return
+    ------
+    arch: str
+    """
+    
+    try:    
+      arch=env['MSVS_ARCH']
+    except:
+      arch='x86'
+
+    if not InstalledVSMap.has_key(env['MSVS_VERSION']):
+      arch='x86'  
+    elif not arch in InstalledVSMap[env['MSVS_VERSION']].get_supported_arch():
+      msg = "Visual Studio version %s does not support architecture %s" % (env['MSVS_VERSION'], arch)
+      raise SCons.Errors.UserError, msg
+
+    
+    return arch         
+    
 def merge_default_version(env):
     version = get_default_version(env)
+    arch = get_default_arch(env)
     # TODO(SK):  move this import up top without introducing circular
     # problems with others importing merge_default_version().
     #import SCons.Tool.msvs
@@ -433,7 +476,7 @@
         #vscommonvarnames = [ vs.common_tools_var for vs in get_installed_visual_studios() ]
         vscommonvarnames = map(lambda vs: vs.common_tools_var, get_installed_visual_studios())
         nenv = normalize_env(env['ENV'], vscommonvarnames + ['COMSPEC'])
-        output = get_output(batfilename, [], env=nenv)
+        output = get_output(batfilename, arch, env=nenv)
         vars = parse_output(output, vars)
 
         for k, v in vars.items():
