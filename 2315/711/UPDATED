--- APPLIED/QMTest/TestCmd.py	2010-03-19 06:53:50.000000000 -0700
+++ UPDATED/QMTest/TestCmd.py	2010-03-19 13:13:42.000000000 -0700
@@ -655,7 +655,7 @@
                 self.stdout = self.fromchild
                 self.stderr = self.childerr
             def wait(self, *args, **kw):
-                resultcode = popen2.Popen3.wait(*(self,)+args, **kw)
+                resultcode = popen2.Popen3.wait(self, *args, **kw)
                 if os.WIFEXITED(resultcode):
                     return os.WEXITSTATUS(resultcode)
                 elif os.WIFSIGNALED(resultcode):
@@ -1425,7 +1425,7 @@
         the temporary working directory name with the specified
         arguments using the os.path.join() method.
         """
-        return os.path.join(*(self.workdir,) + tuple(args))
+        return os.path.join(self.workdir, *tuple(args))
 
     def readable(self, top, read=1):
         """Make the specified directory tree readable (read == 1)
--- APPLIED/QMTest/TestSCons.py	2010-03-19 06:53:53.000000000 -0700
+++ UPDATED/QMTest/TestSCons.py	2010-03-19 13:15:46.000000000 -0700
@@ -377,7 +377,7 @@
                                                   '--warn=no-visual-c-missing')]
         os.environ['SCONSFLAGS'] = ' '.join(sconsflags)
         try:
-            result = TestCommon.run(*(self,)+args, **kw)
+            result = TestCommon.run(self, *args, **kw)
         finally:
             sconsflags = save_sconsflags
         return result
@@ -966,7 +966,7 @@
         """
         if not kw.has_key('stdin'):
             kw['stdin'] = True
-        return TestCommon.start(*(self,) + args, **kw)
+        return TestCommon.start(self, *args, **kw)
 
     def wait_for(self, fname, timeout=10.0, popen=None):
         """
@@ -1060,7 +1060,7 @@
 
         # TODO(1.5)
         #TestSCons.__init__(self, *args, **kw)
-        TestSCons.__init__(*(self,)+args, **kw)
+        TestSCons.__init__(self, *args, **kw)
 
         # TODO(sgk):    better way to get the script dir than sys.argv[0]
         test_dir = os.path.dirname(sys.argv[0])
@@ -1254,7 +1254,7 @@
         try:
             # TODO(1.5)
             #result = TestSCons.run(self, *args, **kw)
-            result = TestSCons.run(*(self,)+args, **kw)
+            result = TestSCons.run(self, *args, **kw)
         finally:
             self.endTime = time.time()
         return result
--- APPLIED/QMTest/TestSConsMSVS.py	2010-03-19 06:53:54.000000000 -0700
+++ UPDATED/QMTest/TestSConsMSVS.py	2010-03-19 13:16:29.000000000 -0700
@@ -656,7 +656,7 @@
         sconsflags = sconsflags + ['--warn=no-deprecated']
         os.environ['SCONSFLAGS'] = ' '.join(sconsflags)
         try:
-            result = TestSCons.run(*(self,)+args, **kw)
+            result = TestSCons.run(self, *args, **kw)
         finally:
             os.environ['SCONSFLAGS'] = save_sconsflags or ''
         return result
--- APPLIED/QMTest/TestSConsign.py	2010-03-19 06:53:54.000000000 -0700
+++ UPDATED/QMTest/TestSConsign.py	2010-03-19 13:16:09.000000000 -0700
@@ -47,7 +47,7 @@
             os.chdir(script_dir)
         self.script_dir = os.getcwd()
 
-        TestSCons.__init__(*(self,)+args, **kw)
+        TestSCons.__init__(self, *args, **kw)
 
         self.my_kw = {
             'interpreter' : python,     # imported from TestSCons
--- APPLIED/bench/bench.py	2010-03-19 06:54:04.000000000 -0700
+++ UPDATED/bench/bench.py	2010-03-19 13:16:48.000000000 -0700
@@ -119,7 +119,7 @@
     print func.__name__ + d + ':'
 
     for label, args, kw in Data:
-        r = timer(*(func,)+args, **kw)
+        r = timer(func, *args, **kw)
         display(label, r)
 
 # Local Variables:
--- APPLIED/bin/import-test.py	2010-03-17 13:56:27.000000000 -0700
+++ UPDATED/bin/import-test.py	2010-03-19 13:19:38.000000000 -0700
@@ -78,7 +78,7 @@
         if not d:
             l = dir.path + [n]
             sys.stdout.write('\ntest.write(%s, """\\\n' % l)
-            p = os.path.join(*([directory] + l))
+            p = os.path.join(directory, *l)
             sys.stdout.write(open(p, 'r').read())
             sys.stdout.write('""")\n')
     dir.call_for_each_entry(print_a_file)
--- APPLIED/src/engine/SCons/Environment.py	2010-03-19 06:50:43.000000000 -0700
+++ UPDATED/src/engine/SCons/Environment.py	2010-03-19 13:23:05.000000000 -0700
@@ -253,7 +253,7 @@
             target = [target]
         if source is not None and not SCons.Util.is_List(source):
             source = [source]
-        return MethodWrapper.__call__(*(self, target, source) + args, **kw)
+        return MethodWrapper.__call__(self, target, source, *args, **kw)
 
     def __repr__(self):
         return '<BuilderWrapper %s>' % repr(self.name)
@@ -1891,9 +1891,9 @@
         if SCons.Util.is_Sequence(s):
             result=[]
             for e in s:
-                result.append(self.fs.Dir(*(e,) + args, **kw))
+                result.append(self.fs.Dir(e, *args, **kw))
             return result
-        return self.fs.Dir(*(s,) + args, **kw)
+        return self.fs.Dir(s, *args, **kw)
 
     def NoClean(self, *targets):
         """Tags a target so that it will not be cleaned by -c"""
@@ -1920,9 +1920,9 @@
         if SCons.Util.is_Sequence(s):
             result=[]
             for e in s:
-                result.append(self.fs.Entry(*(e,) + args, **kw))
+                result.append(self.fs.Entry(e, *args, **kw))
             return result
-        return self.fs.Entry(*(s,) + args, **kw)
+        return self.fs.Entry(s, *args, **kw)
 
     def Environment(self, **kw):
         return SCons.Environment.Environment(**self.subst_kw(kw))
@@ -1930,7 +1930,7 @@
     def Execute(self, action, *args, **kw):
         """Directly execute an action through an Environment
         """
-        action = self.Action(*(action,) + args, **kw)
+        action = self.Action(action, *args, **kw)
         result = action([], [], self)
         if isinstance(result, SCons.Errors.BuildError):
             errstr = result.errstr
@@ -1948,9 +1948,9 @@
         if SCons.Util.is_Sequence(s):
             result=[]
             for e in s:
-                result.append(self.fs.File(*(e,) + args, **kw))
+                result.append(self.fs.File(e, *args, **kw))
             return result
-        return self.fs.File(*(s,) + args, **kw)
+        return self.fs.File(s, *args, **kw)
 
     def FindFile(self, file, dirs):
         file = self.subst(file)
--- APPLIED/src/engine/SCons/Errors.py	2010-03-19 06:50:54.000000000 -0700
+++ UPDATED/src/engine/SCons/Errors.py	2010-03-19 13:23:31.000000000 -0700
@@ -133,7 +133,7 @@
         self.node = node
         self.status = status
         self.exitstatus = status
-        Exception.__init__(*(self,) + args)
+        Exception.__init__(self, *args)
 
 def convert_to_BuildError(status, exc_info=None):
     """
--- APPLIED/src/engine/SCons/Options/__init__.py	2010-03-19 06:51:37.000000000 -0700
+++ UPDATED/src/engine/SCons/Options/__init__.py	2010-03-19 13:25:33.000000000 -0700
@@ -48,19 +48,16 @@
             msg = "The Options class is deprecated; use the Variables class instead."
             SCons.Warnings.warn(SCons.Warnings.DeprecatedOptionsWarning, msg)
             warned = True
-        SCons.Variables.Variables.__init__(*(self,) + args,
-              **kw)
+        SCons.Variables.Variables.__init__(self, *args, **kw)
 
     def AddOptions(self, *args, **kw):
-        return SCons.Variables.Variables.AddVariables(*(self,) + args,
-                     **kw)
+        return SCons.Variables.Variables.AddVariables(self, *args, **kw)
 
     def UnknownOptions(self, *args, **kw):
-        return SCons.Variables.Variables.UnknownVariables(*(self,) + args,
-                     **kw)
+        return SCons.Variables.Variables.UnknownVariables(self, *args, **kw)
 
     def FormatOptionHelpText(self, *args, **kw):
-        return SCons.Variables.Variables.FormatVariableHelpText(*(self,) + args,
+        return SCons.Variables.Variables.FormatVariableHelpText(self, *args,
                      **kw)
 
 # Local Variables:
--- APPLIED/src/engine/SCons/SConf.py	2010-03-19 06:51:01.000000000 -0700
+++ UPDATED/src/engine/SCons/SConf.py	2010-03-19 13:28:34.000000000 -0700
@@ -642,7 +642,7 @@
                 raise (SCons.Errors.UserError,
                        "Test called after sconf.Finish()")
             context = CheckContext(self.sconf)
-            ret = self.test(*(context,) +  args, **kw)
+            ret = self.test(context, *args, **kw)
             if self.sconf.config_h is not None:
                 self.sconf.config_h_text = self.sconf.config_h_text + context.config_h
             context.Result("error: no result")
--- APPLIED/src/engine/SCons/Scanner/C.py	2010-03-19 06:51:39.000000000 -0700
+++ UPDATED/src/engine/SCons/Scanner/C.py	2010-03-19 13:27:26.000000000 -0700
@@ -44,7 +44,7 @@
     missing.
     """
     def __init__(self, *args, **kw):
-        SCons.cpp.PreProcessor.__init__(*(self,)+args, **kw)
+        SCons.cpp.PreProcessor.__init__(self, *args, **kw)
         self.missing = []
     def initialize_result(self, fname):
         self.result = SCons.Util.UniqueList([fname])
--- APPLIED/src/engine/SCons/Scanner/Fortran.py	2010-03-19 06:51:41.000000000 -0700
+++ UPDATED/src/engine/SCons/Scanner/Fortran.py	2010-03-19 13:27:48.000000000 -0700
@@ -74,7 +74,7 @@
         kw['skeys'] = suffixes
         kw['name'] = name
 
-        SCons.Scanner.Current.__init__(*(self,) + args, **kw)
+        SCons.Scanner.Current.__init__(self, *args, **kw)
 
     def scan(self, node, env, path=()):
 
--- APPLIED/src/engine/SCons/Scanner/LaTeX.py	2010-03-19 06:51:44.000000000 -0700
+++ UPDATED/src/engine/SCons/Scanner/LaTeX.py	2010-03-19 13:28:09.000000000 -0700
@@ -230,7 +230,7 @@
         kw['scan_check'] = LaTeXScanCheck(suffixes)
         kw['name'] = name
 
-        SCons.Scanner.Base.__init__(*(self,) + args, **kw)
+        SCons.Scanner.Base.__init__(self, *args, **kw)
 
     def _latex_names(self, include):
         filename = include[1]
--- APPLIED/src/engine/SCons/Scanner/__init__.py	2010-03-19 06:51:47.000000000 -0700
+++ UPDATED/src/engine/SCons/Scanner/__init__.py	2010-03-19 13:27:08.000000000 -0700
@@ -55,9 +55,9 @@
     patterned on SCons code.
     """
     if SCons.Util.is_Dict(function):
-        return Selector(*(function,) + args, **kw)
+        return Selector(function, *args, **kw)
     else:
-        return Base(*(function,) + args, **kw)
+        return Base(function, *args, **kw)
 
 
 
@@ -279,7 +279,7 @@
     for custom modules that may be out there.)
     """
     def __init__(self, dict, *args, **kw):
-        Base.__init__(*(self, None,)+args, **kw)
+        Base.__init__(self, None, *args, **kw)
         self.dict = dict
         self.skeys = dict.keys()
 
@@ -308,7 +308,7 @@
         def current_check(node, env):
             return not node.has_builder() or node.is_up_to_date()
         kw['scan_check'] = current_check
-        Base.__init__(*(self,) + args, **kw)
+        Base.__init__(self, *args, **kw)
 
 class Classic(Current):
     """
@@ -338,7 +338,7 @@
         kw['skeys'] = suffixes
         kw['name'] = name
 
-        Current.__init__(*(self,) + args, **kw)
+        Current.__init__(self, *args, **kw)
 
     def find_include(self, include, source_dir, path):
         n = SCons.Node.FS.find_file(include, (source_dir,) + tuple(path))
--- APPLIED/src/engine/SCons/Script/SConscript.py	2010-03-19 06:51:52.000000000 -0700
+++ UPDATED/src/engine/SCons/Script/SConscript.py	2010-03-19 13:28:49.000000000 -0700
@@ -458,7 +458,7 @@
         if not SCons.Script.sconscript_reading:
             raise SCons.Errors.UserError, "Calling Configure from Builders is not supported."
         kw['_depth'] = kw.get('_depth', 0) + 1
-        return SCons.Environment.Base.Configure(*(self,)+args, **kw)
+        return SCons.Environment.Base.Configure(self, *args, **kw)
 
     def Default(self, *targets):
         SCons.Script._Set_Default_Targets(self, targets)
--- APPLIED/src/engine/SCons/Tool/MSCommon/sdk.py	2010-03-19 06:52:13.000000000 -0700
+++ UPDATED/src/engine/SCons/Tool/MSCommon/sdk.py	2010-03-19 13:30:38.000000000 -0700
@@ -124,7 +124,7 @@
     """
     HKEY_FMT = r'Software\Microsoft\Microsoft SDKs\Windows\v%s\InstallationFolder'
     def __init__(self, *args, **kw):
-        SDKDefinition.__init__(*(self,)+args, **kw)
+        SDKDefinition.__init__(self, *args, **kw)
         self.hkey_data = self.version
 
 class PlatformSDK(SDKDefinition):
@@ -133,7 +133,7 @@
     """
     HKEY_FMT = r'Software\Microsoft\MicrosoftSDK\InstalledSDKS\%s\Install Dir'
     def __init__(self, *args, **kw):
-        SDKDefinition.__init__(*(self,)+args, **kw)
+        SDKDefinition.__init__(self, *args, **kw)
         self.hkey_data = self.uuid
 
 #
--- APPLIED/src/engine/SCons/Tool/__init__.py	2010-03-19 06:51:57.000000000 -0700
+++ UPDATED/src/engine/SCons/Tool/__init__.py	2010-03-19 13:29:12.000000000 -0700
@@ -178,7 +178,7 @@
             self.options(opts)
             opts.Update(env)
 
-        self.generate(*( env, ) + args, **kw)
+        self.generate(env, *args, **kw)
 
     def __str__(self):
         return self.name
--- APPLIED/src/engine/SCons/Tool/javac.py	2010-03-19 06:52:01.000000000 -0700
+++ UPDATED/src/engine/SCons/Tool/javac.py	2010-03-19 13:30:00.000000000 -0700
@@ -193,7 +193,7 @@
                 b = env.JavaClassFile
             else:
                 b = env.JavaClassDir
-        result.extend(b(*(t, s) + args, **kw))
+        result.extend(b(t, s, *args, **kw))
 
     return result
 
--- APPLIED/src/engine/SCons/Util.py	2010-03-19 06:51:13.000000000 -0700
+++ UPDATED/src/engine/SCons/Util.py	2010-03-19 13:31:24.000000000 -0700
@@ -1400,8 +1400,7 @@
         UserList.reverse(self)
     def sort(self, *args, **kwds):
         self.__make_unique()
-        #return UserList.sort(self, *args, **kwds)
-        return UserList.sort(*(self,)+args, **kwds)
+        return UserList.sort(self, *args, **kwds)
     def extend(self, other):
         UserList.extend(self, other)
         self.unique = False
@@ -1603,8 +1602,7 @@
     """ Null objects always and reliably "do nothing." """
     def __new__(cls, *args, **kwargs):
         if not '_inst' in vars(cls):
-            #cls._inst = type.__new__(cls, *args, **kwargs)
-            cls._inst = type.__new__(*(cls,) + args, **kwargs)
+            cls._inst = type.__new__(cls, *args, **kwargs)
         return cls._inst
     def __init__(self, *args, **kwargs):
         pass
--- APPLIED/src/engine/SCons/cpp.py	2010-03-19 06:51:16.000000000 -0700
+++ UPDATED/src/engine/SCons/cpp.py	2010-03-19 13:20:04.000000000 -0700
@@ -583,7 +583,7 @@
     to tailor its behavior.
     """
     def __init__(self, *args, **kw):
-        PreProcessor.__init__(*(self,)+args, **kw)
+        PreProcessor.__init__(self, *args, **kw)
         d = self.default_table
         for func in ['if', 'elif', 'else', 'endif', 'ifdef', 'ifndef']:
             d[func] = d[func] = self.do_nothing
--- APPLIED/src/engine/SCons/cppTests.py	2010-03-19 06:51:17.000000000 -0700
+++ UPDATED/src/engine/SCons/cppTests.py	2010-03-19 13:20:30.000000000 -0700
@@ -674,7 +674,7 @@
         """)
         class MyPreProcessor(cpp.DumbPreProcessor):
             def __init__(self, *args, **kw):
-                cpp.DumbPreProcessor.__init__(*(self,) + args, **kw)
+                cpp.DumbPreProcessor.__init__(self, *args, **kw)
                 self.files = []
             def __call__(self, file):
                 self.files.append(file)
--- APPLIED/src/test_files.py	2010-03-19 06:50:19.000000000 -0700
+++ UPDATED/src/test_files.py	2010-03-19 13:32:06.000000000 -0700
@@ -46,7 +46,7 @@
     cwd = os.getcwd()
 
 def build_path(*args):
-    return os.path.join(*(cwd, 'build',) + args)
+    return os.path.join(cwd, 'build', *args)
 
 build_scons_tar_gz  = build_path('unpack-tar-gz', 'scons-'+test.scons_version)
 build_scons_zip     = build_path('unpack-zip', 'scons-'+test.scons_version)
--- APPLIED/src/test_setup.py	2010-03-19 06:50:20.000000000 -0700
+++ UPDATED/src/test_setup.py	2010-03-19 13:32:24.000000000 -0700
@@ -116,7 +116,7 @@
         kw['chdir'] = scons_version
         kw['program'] = python
         kw['stderr'] = None
-        return TestSCons.TestSCons.run(*(self,)+args, **kw)
+        return TestSCons.TestSCons.run(self, *args, **kw)
 
     def remove(self, dir):
         try: shutil.rmtree(dir)
--- APPLIED/src/test_strings.py	2010-03-19 06:50:21.000000000 -0700
+++ UPDATED/src/test_strings.py	2010-03-19 13:32:41.000000000 -0700
@@ -46,7 +46,7 @@
 scons_version = TestSCons.SConsVersion
 
 def build_path(*args):
-    return os.path.join(*('build',)+args)
+    return os.path.join('build', *args)
 
 build_scons     = build_path('scons')
 build_local     = build_path('scons-local', 'scons-local-'+scons_version)
--- APPLIED/test/Perforce/Perforce.py	2010-03-19 06:53:14.000000000 -0700
+++ UPDATED/test/Perforce/Perforce.py	2010-03-19 13:32:56.000000000 -0700
@@ -37,7 +37,7 @@
 
 class TestPerforce(TestSCons.TestSCons):
     def __init__(self, *args, **kw):
-        TestSCons.TestSCons.__init__(*(self,)+args, **kw)
+        TestSCons.TestSCons.__init__(self, *args, **kw)
 
         self.p4d = None
 
