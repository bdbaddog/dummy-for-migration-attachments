Index: src/engine/SCons/Node/FS.py
===================================================================
--- src/engine/SCons/Node/FS.py	(revision 4712)
+++ src/engine/SCons/Node/FS.py	(working copy)
@@ -1326,7 +1326,7 @@
                 if start_dir.is_under(bd):
                     # If already in the build-dir location, don't reflect
                     return [orig], fmt % str(orig)
-                p = os.path.join(*[bd.path] + tail)
+                p = os.path.join(bd.path, *tail)
                 targets.append(self.Entry(p))
             tail = [dir.name] + tail
             dir = dir.up()
@@ -1621,7 +1621,7 @@
         """A null "builder" for directories."""
         global MkdirBuilder
         if self.builder is not MkdirBuilder:
-            SCons.Node.Node.build(*[self,], **kw)
+            SCons.Node.Node.build(self, **kw)
 
     #
     #
Index: src/engine/SCons/Scanner/Prog.py
===================================================================
--- src/engine/SCons/Scanner/Prog.py	(revision 4712)
+++ src/engine/SCons/Scanner/Prog.py	(working copy)
@@ -35,7 +35,7 @@
     """Return a prototype Scanner instance for scanning executable
     files for static-lib dependencies"""
     kw['path_function'] = SCons.Scanner.FindPathDirs('LIBPATH')
-    ps = SCons.Scanner.Base(*[scan, "ProgramScanner"], **kw)
+    ps = SCons.Scanner.Base(scan, "ProgramScanner", **kw)
     return ps
 
 def scan(node, env, libpath = ()):
Index: src/engine/SCons/Script/SConscript.py
===================================================================
--- src/engine/SCons/Script/SConscript.py	(revision 4712)
+++ src/engine/SCons/Script/SConscript.py	(working copy)
@@ -549,7 +549,7 @@
 
         files, exports = self._get_SConscript_filenames(ls, subst_kw)
         subst_kw['exports'] = exports
-        return _SConscript(*[self.fs,] + files, **subst_kw)
+        return _SConscript(self.fs, *files, **subst_kw)
 
     def SConscriptChdir(self, flag):
         global sconscript_chdir
Index: src/engine/SCons/Tool/packaging/rpm.py
===================================================================
--- src/engine/SCons/Tool/packaging/rpm.py	(revision 4712)
+++ src/engine/SCons/Tool/packaging/rpm.py	(working copy)
@@ -91,7 +91,7 @@
     target, source = collectintargz(target, source, env)
 
     # now call the rpm builder to actually build the packet.
-    return bld(*[env, target, source], **kw)
+    return bld(env, target, source, **kw)
 
 def collectintargz(target, source, env):
     """ Puts all source files into a tar.gz file. """
Index: src/engine/SCons/Tool/packaging/__init__.py
===================================================================
--- src/engine/SCons/Tool/packaging/__init__.py	(revision 4712)
+++ src/engine/SCons/Tool/packaging/__init__.py	(working copy)
@@ -153,7 +153,7 @@
     try:
         for packager in packagers:
             t=[target.pop(0)]
-            t=packager.package(*[env,t,source], **kw)
+            t=packager.package(env,t,source, **kw)
             targets.extend(t)
 
         assert( len(target) == 0 )
Index: src/engine/SCons/Tool/packaging/ipk.py
===================================================================
--- src/engine/SCons/Tool/packaging/ipk.py	(revision 4712)
+++ src/engine/SCons/Tool/packaging/ipk.py	(working copy)
@@ -76,7 +76,7 @@
         target=[ "%s_%s_%s.ipk"%(NAME, VERSION, buildarchitecture) ]
 
     # now apply the Ipkg builder
-    return bld(*[env, target, specfile], **kw)
+    return bld(env, target, specfile, **kw)
 
 def gen_ipk_dir(proot, source, env, kw):
     # make sure the packageroot is a Dir object.
@@ -98,7 +98,7 @@
     spec_target.append(control.File('preinst'))
 
     # apply the builder to the specfile targets
-    s_bld(*[env, spec_target, source], **kw)
+    s_bld(env, spec_target, source, **kw)
 
     # the packageroot directory does now contain the specfiles.
     return proot
Index: QMTest/TestCommon.py
===================================================================
--- QMTest/TestCommon.py	(revision 4712)
+++ QMTest/TestCommon.py	(working copy)
@@ -216,7 +216,7 @@
         calling the base class initialization, and then changing directory
         to the workdir.
         """
-        TestCmd.__init__(*[self], **kw)
+        TestCmd.__init__(self, **kw)
         os.chdir(self.workdir)
 
     def must_be_writable(self, *files):
@@ -536,7 +536,7 @@
             del kw['match']
         except KeyError:
             match = self.match
-        TestCmd.run(*[self], **kw)
+        TestCmd.run(self, **kw)
         self._complete(self.stdout(), stdout,
                        self.stderr(), stderr, status, match)
 
Index: QMTest/TestSCons_time.py
===================================================================
--- QMTest/TestSCons_time.py	(revision 4712)
+++ QMTest/TestSCons_time.py	(working copy)
@@ -184,7 +184,7 @@
         if not kw.has_key('workdir'):
             kw['workdir'] = ''
 
-        TestCommon.__init__(*[self], **kw)
+        TestCommon.__init__(self, **kw)
 
         # Now that the testing object has been set up, check if we should
         # skip the test due to the Python version.  We need to be able to
Index: QMTest/TestRuntest.py
===================================================================
--- QMTest/TestRuntest.py	(revision 4712)
+++ QMTest/TestRuntest.py	(working copy)
@@ -125,7 +125,7 @@
             del kw['noqmtest']
 
         orig_cwd = os.getcwd()
-        TestCommon.__init__(*[self], **kw)
+        TestCommon.__init__(self, **kw)
   
         if not noqmtest:
             qmtest = self.where_is('qmtest')
Index: QMTest/TestSCons.py
===================================================================
--- QMTest/TestSCons.py	(revision 4712)
+++ QMTest/TestSCons.py	(working copy)
@@ -267,7 +267,7 @@
             sconsflags = sconsflags + ['--warn=no-python-version']
             os.environ['SCONSFLAGS'] = ' '.join(sconsflags)
 
-        TestCommon.__init__(*[self], **kw)
+        TestCommon.__init__(self, **kw)
 
         import SCons.Node.FS
         if SCons.Node.FS.default_fs is None:
