Index: test/SWIG/SWIGOUTDIR.py
===================================================================
--- test/SWIG/SWIGOUTDIR.py	(revision 3101)
+++ test/SWIG/SWIGOUTDIR.py	(working copy)
@@ -26,57 +26,86 @@
 
 """
 Verify that use of the $SWIGOUTDIR variable causes SCons to recognize
-that Java files are created in the specified output directory.
+that wrapper sources are created in the specified output directory.
 """
 
 import sys
+import os.path
 
 import TestSCons
 
 test = TestSCons.TestSCons()
 
-test = TestSCons.TestSCons()
-
 swig = test.where_is('swig')
 
 if not swig:
     test.skip_test('Can not find installed "swig", skipping test.\n')
 
-where_java_include=test.java_where_includes()
+def _check_build(generated):
+    # SCons should realize that it needs to create the output directory to hold the
+    # generated files.
+    test.run(arguments = '.')
 
-if not where_java_include:
-    test.skip_test('Can not find installed Java include files, skipping test.\n')
+    # SCons should remove the built .java files.
+    test.run(arguments = '-c %s' % " ".join(generated))
 
-test.write(['SConstruct'], """\
-env = Environment(tools = ['default', 'swig'],
-                CPPPATH=%(where_java_include)s,                 
+    for f in generated:
+        test.must_not_exist(f)
+
+    # SCons should realize it needs to rebuild the removed files.
+    test.not_up_to_date(arguments = '.')
+
+def _write_sconstruct(lang, inc_path):
+    """ Write an SConstruct for the particular target language.
+    
+    The SConstruct uses an SConscript in a sub-directory. This is in order to
+    verify that the tool gets paths right when invoked from a nested script.
+    """
+    if isinstance(inc_path, basestring):
+        inc_path = [inc_path]
+    subdir = '%s_sub' % lang
+    os.mkdir(subdir)
+    test.write([os.path.join(subdir, 'SConscript')], """\
+env = Environment(tools=['default', 'swig'], CPPPATH=%(inc_path)s
                 )
 
-Java_foo_interface = env.SharedLibrary(
-    'Java_foo_interface', 
-    'Java_foo_interface.i', 
-    SWIGOUTDIR = 'java/build',
-    SWIGFLAGS = '-c++ -java -Wall',
+env.LoadableModule(
+    'foo_interface', 
+    'foo_interface.i', 
+    SWIGOUTDIR = '%(lang)s/build',
+    SWIGFLAGS = '-c++ -%(lang)s -Wall',
     SWIGCXXFILESUFFIX = "_wrap.cpp")
 """ % locals())
 
-test.write('Java_foo_interface.i', """\
+    test.write(os.path.join(subdir, 'foo_interface.i'), """\
 %module foopack
 """)
 
-# SCons should realize that it needs to create the java/build
-# subdirectory to hold the generate .java files.
-test.run(arguments = '.')
+    test.write("SConstruct", """\
+SConscript('%(subdir)s/SConscript')
+""" % locals())
 
-# SCons should remove the built .java files.
-test.run(arguments = '-c java/build/foopack.java java/build/foopackJNI.java')
+def _test_java():
+    where_java_include=test.java_where_includes()
+    if not where_java_include:
+        print 'Can not find installed Java include files, not testing Java aspect.'
+        return
 
-test.must_not_exist('java/build/foopackJNI.java')
-test.must_not_exist('java/build/foopack.java') 
+    _write_sconstruct("java", where_java_include)
+    _check_build(['java/build/foopackJNI.java', 'java/build/foopack.java'])
 
-# SCons should realize it needs to rebuild the removed .java files.
-test.not_up_to_date(arguments = '.')
+def _test_python():
+    py_inc = test.get_python_inc()
+    if not py_inc:
+        print 'Can not find installed Python include files, not testing Python aspect.'
+        return
 
+    _write_sconstruct("python", py_inc)
 
+    _check_build(['python/build/foopack.py'])
 
+_test_java()
+_test_python()
+
+
 test.pass_test()
Index: src/engine/SCons/Tool/swig.py
===================================================================
--- src/engine/SCons/Tool/swig.py	(revision 3101)
+++ src/engine/SCons/Tool/swig.py	(working copy)
@@ -54,29 +54,57 @@
 _reModule = re.compile(r'%module(?:\s*\(.*\))?\s+(.+)')
 
 def _swigEmitter(target, source, env):
-    swigflags = env.subst("$SWIGFLAGS", target=target, source=source)
+    swigflags = env.subst('$SWIGFLAGS', target=target, source=source)
     flags = SCons.Util.CLVar(swigflags)
+
+    # Determine the language for which to generate wrappers. SWIG will only
+    # target one language at a time, and if several are specified it will pick
+    # the last one.
+
+    # The list of currently (as of V1.3.33) known SWIG language switches.
+    # This needs to be up-to-date in order for us to recognize language
+    # switches from other flags, and thus determine correctly
+    langs = ('-allegrocl', '-chicken', '-clisp', '-cffi', '-csharp', '-guile',
+            '-java', '-lua', '-modula3', '-mzscheme', '-ocaml', '-perl',
+            '-php4', '-php5', '-pike', '-python', '-r', '-ruby', '-sexp',
+            '-tcl', '-uffi', '-xml',)
+    gen_lang = None
+    for f in reversed(flags):
+        if f in langs:
+            gen_lang = f[1:]
+            break
+    # Check whether extra targets will be generated at all
+    if gen_lang is None or gen_lang in ('tcl',) or (gen_lang == 'python' and
+            '-noproxy' in flags):
+        return (target, source)
+
+    outdir = env.get('SWIGOUTDIR')
+    if outdir:
+        if isinstance(outdir, basestring):
+            # Treat raw pathname as relative to root
+            outdir = env.fs.Dir(outdir, "#")
+    else:
+        outdir = target[0].dir
+
+    t_from_s = lambda t, p, s, x: t.dir
     for src in source:
+        # Determine extra targets that are generated from this specification
         src = str(src.rfile())
-        mnames = None
-        if "-python" in flags and "-noproxy" not in flags:
-            if mnames is None:
-                mnames = _reModule.findall(open(src).read())
-            target.extend(map(lambda m, d=target[0].dir:
-                                     d.File(m + ".py"), mnames))
-        if "-java" in flags:
-            if mnames is None:
-                mnames = _reModule.findall(open(src).read())
-            java_files = map(lambda m: [m + ".java", m + "JNI.java"], mnames)
-            java_files = SCons.Util.flatten(java_files)
-            outdir = env.subst('$SWIGOUTDIR', target=target, source=source)
-            if outdir:
-                 java_files = map(lambda j, o=outdir: os.path.join(o, j), java_files)
-            java_files = map(env.fs.File, java_files)
-            for jf in java_files:
-                t_from_s = lambda t, p, s, x: t.dir
-                SCons.Util.AddMethod(jf, t_from_s, 'target_from_source')
-            target.extend(java_files)
+        mnames = _reModule.findall(open(src).read())
+        for m in mnames:
+            generated = None    # Reset
+            if gen_lang == 'python':
+                generated = [m + '.py']
+            elif gen_lang == 'java':
+                generated = [m + '.java', m + 'JNI.java']
+
+            for gen in generated:
+                f = outdir.Entry(gen)
+                if gen_lang == 'java':
+                    # Not sure what this is good for
+                    SCons.Util.AddMethod(f, t_from_s, 'target_from_source')
+                target.append(f)
+
     return (target, source)
 
 def generate(env):
