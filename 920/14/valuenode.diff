? valuenode.diff
? etc/TestCmd.pyc
? etc/TestCommon.pyc
? etc/TestSCons.pyc
? etc/unittest.pyc
Index: src/engine/SCons/Environment.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/Environment.py,v
retrieving revision 1.128
diff --unified -r1.128 Environment.py
--- src/engine/SCons/Environment.py	5 Sep 2004 20:12:29 -0000	1.128
+++ src/engine/SCons/Environment.py	15 Sep 2004 07:51:04 -0000
@@ -1241,10 +1241,10 @@
         else:
             raise SCons.Errors.UserError, "Unknown target signature type '%s'"%type
 
-    def Value(self, value):
+    def Value(self, value, built_value=None):
         """
         """
-        return SCons.Node.Python.Value(value)
+        return SCons.Node.Python.Value(value,built_value)
 
 # The entry point that will be used by the external world
 # to refer to a construction environment.  This allows the wrapper
Index: src/engine/SCons/Node/Python.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/Node/Python.py,v
retrieving revision 1.5
diff --unified -r1.5 Python.py
--- src/engine/SCons/Node/Python.py	2 Jun 2004 05:36:20 -0000	1.5
+++ src/engine/SCons/Node/Python.py	15 Sep 2004 07:51:05 -0000
@@ -35,7 +35,7 @@
     """A class for Python variables, typically passed on the command line 
     or generated by a script, but not from a file or some other source.
     """
-    def __init__(self, value):
+    def __init__(self, value, built_value=None):
         SCons.Node.Node.__init__(self)
         self.value = value
 
@@ -76,3 +76,65 @@
             binfo.csig = self.get_contents()
             self.store_info(binfo)
             return binfo.csig
+
+class AlternateValue(SCons.Node.Node):
+    """A class for Python variables. This may be generated by a python
+    function or a builder. This is somewhat compatible with Value
+    above; node.value works as an ID, meaning that get_contents works
+    exactly as in Value
+    """
+
+    current = SCons.Node.Node.children_are_up_to_date
+
+    def __init__(self, value, built_value = None):
+        SCons.Node.Node.__init__(self)
+        self.value = value
+        if built_value is not None: self.built_value = built_value
+
+    def __str__(self):
+        return repr(self.value)
+
+    def build(self, **kw):
+        if not self.__dict__.has_key ('built_value'):
+            apply (SCons.Node.Node.build, (self,), kw)
+
+    def set_value (self, built_value):
+        """ Set the value of the node """
+        assert not self.__dict__.has_key ('built_value')
+        self.built_value = built_value
+
+    def get_value (self):
+        """ Return the value. If necessary, the value is built."""
+        
+        self.build ()
+        assert (self.__dict__.has_key ('built_value'))
+        return self.built_value
+
+    def get_contents(self):
+        """ By the assumption that the node.built_value is a
+        deterministic product of the sources, the contents of a Value
+        are the concatenation of all the contents of its sources. As
+        the value need not be built when get_contents is called, we
+        cannot use the actual node.value."""
+
+        contents = str(self.value)
+        for kid in self.children(None):
+            contents = contents + kid.get_contents()
+        return contents
+
+    def calc_csig(self, calc=None):
+        """Because we're a Python value node and don't have a real
+        timestamp, we get to ignore the calculator and just use the
+        value contents."""
+        try:
+            binfo = self.binfo
+        except:
+            binfo = self.binfo = self.new_binfo()
+        try:
+            return binfo.csig
+        except AttributeError:
+            binfo.csig = self.get_contents()
+            self.store_info(binfo)
+            return binfo.csig
+
+Value = AlternateValue
Index: test/Value.py
===================================================================
RCS file: /cvsroot/scons/scons/test/Value.py,v
retrieving revision 1.5
diff --unified -r1.5 Value.py
--- test/Value.py	5 Aug 2004 20:03:10 -0000	1.5
+++ test/Value.py	15 Sep 2004 07:51:05 -0000
@@ -58,22 +58,44 @@
 env.B('f1.out', Value(P))
 env.B('f2.out', env.Value(L))
 env.B('f3.out', Value(C))
+
+
+def create_value (target, source, env):
+    target[0].set_value (source[0].get_contents ())
+
+def create_value_file (target, source, env):
+    open(str(target[0]), 'wb').write(source[0].get_value ())
+
+env['BUILDERS']['B2'] = Builder (action = create_value)
+env['BUILDERS']['B3'] = Builder (action = create_value_file)
+
+V = Value ('my value')
+env.B2(V, 'f3.out')
+env.B3('f4.out', V)
+
 """ % source_signature)
 
     test.run(arguments='-c')
     test.run()
 
+    out7 = """create_value(["'my value'"], ["f3.out"])"""
+    out8 = """create_value_file(["f4.out"], ["'my value'"])"""
+
     out1 = """create(["f1.out"], ["'/usr/local'"])"""
     out2 = """create(["f2.out"], ["10"])"""
     out3 = """create\\(\\["f3.out"\\], \\["<.*.Custom instance at """
     #" <- unconfuses emacs syntax highlighting
+
     test.fail_test(string.find(test.stdout(), out1) == -1)
     test.fail_test(string.find(test.stdout(), out2) == -1)
+    test.fail_test(string.find(test.stdout(), out7) == -1)
+    test.fail_test(string.find(test.stdout(), out8) == -1)
     test.fail_test(re.search(out3, test.stdout()) == None)
 
     test.must_match('f1.out', "/usr/local")
     test.must_match('f2.out', "10")
     test.must_match('f3.out', "C=/usr/local")
+    test.must_match('f4.out', "C=/usr/local")
 
     test.up_to_date(arguments='.')
 
@@ -84,11 +106,14 @@
     #" <- unconfuses emacs syntax highlighting
     test.fail_test(string.find(test.stdout(), out4) == -1)
     test.fail_test(string.find(test.stdout(), out5) == -1)
+    test.fail_test(string.find(test.stdout(), out7) == -1)
+    test.fail_test(string.find(test.stdout(), out8) == -1)
     test.fail_test(re.search(out6, test.stdout()) == None)
 
     test.must_match('f1.out', "/usr")
     test.must_match('f2.out', "4")
     test.must_match('f3.out', "C=/usr")
+    test.must_match('f4.out', "C=/usr")
 
     test.up_to_date('prefix=/usr', '.')
 
@@ -99,6 +124,8 @@
 
     test.fail_test(string.find(test.stdout(), out4) == -1)
     test.fail_test(string.find(test.stdout(), out5) != -1)
+    test.fail_test(string.find(test.stdout(), out7) == -1)
+    test.fail_test(string.find(test.stdout(), out8) == -1)
     test.fail_test(re.search(out6, test.stdout()) == None)
 
     test.up_to_date('prefix=/var', '.')
@@ -106,5 +133,6 @@
     test.must_match('f1.out', "/var")
     test.must_match('f2.out', "4")
     test.must_match('f3.out', "C=/var")
+    test.must_match('f4.out', "C=/var")
 
 test.pass_test()
