Index: test/SWIG/module-quoted.py
===================================================================
--- test/SWIG/module-quoted.py	(revision 0)
+++ test/SWIG/module-quoted.py	(revision 0)
@@ -0,0 +1,92 @@
+#!/usr/bin/env python
+#
+# __COPYRIGHT__
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+
+"""
+Verify that we correctly parse quoted module names; e.g. %module "test"
+(SWIG permits double-quoted names but not single-quoted ones.)
+"""
+
+import os.path
+import TestSCons
+
+test = TestSCons.TestSCons()
+
+swig = test.where_is('swig')
+
+if not swig:
+    test.skip_test('Can not find installed "swig", skipping test.\n')
+
+python_include_dir = test.get_python_inc()
+
+python_frameworks_flags = test.get_python_frameworks_flags()
+
+Python_h = os.path.join(python_include_dir, 'Python.h')
+if not os.path.exists(Python_h):
+    test.skip_test('Can not find %s, skipping test.\n' % Python_h)
+
+test.write(['SConstruct'], """\
+env = Environment(SWIGFLAGS = '-python -c++',
+                  CPPPATH=r"%(python_include_dir)s",
+                  SWIG=r'%(swig)s',
+		  FRAMEWORKS='%(python_frameworks_flags)s',
+		  )
+
+import sys
+if sys.version[0] == '1':
+    # SWIG requires the -classic flag on pre-2.0 Python versions.
+    env.Append(SWIGFLAGS = ' -classic')
+
+env.LoadableModule('test1.so', ['test1.i', 'test1.cc'])
+""" % locals())
+
+test.write(['test1.cc'], """\
+int test1func()
+{
+  return 0;
+}
+""")
+
+test.write(['test1.h'], """\
+int test1func();
+""")
+
+test.write(['test1.i'], """\
+%module "test1"
+
+%{
+#include "test1.h"
+%}
+
+%include "test1.h"
+""")
+
+test.run(arguments = '.')
+
+# If we erroneously think the generated Python module is called "test1".py
+# rather than test1.py, the test will not be up to date
+test.up_to_date(arguments = '.')
+
+test.pass_test()
Index: src/engine/SCons/Tool/swig.py
===================================================================
--- src/engine/SCons/Tool/swig.py	(revision 3870)
+++ src/engine/SCons/Tool/swig.py	(working copy)
@@ -51,8 +51,18 @@
         return '$SWIGCFILESUFFIX'
 
 # Match '%module test', as well as '%module(directors="1") test'
-_reModule = re.compile(r'%module(?:\s*\(.*\))?\s+(.+)')
+# Also allow for test to be quoted (SWIG permits double quotes, but not single)
+_reModule = re.compile(r'%module(\s*\(.*\))?\s+("?)(.+)\2')
 
+def _find_modules(src):
+    """Find all modules referenced by %module lines in `src`, a SWIG .i file.
+       Returns a list of all modules."""
+    mnames = []
+    matches = _reModule.findall(open(src).read())
+    for m in matches:
+        mnames.append(m[2])
+    return mnames
+
 def _swigEmitter(target, source, env):
     swigflags = env.subst("$SWIGFLAGS", target=target, source=source)
     flags = SCons.Util.CLVar(swigflags)
@@ -61,12 +71,12 @@
         mnames = None
         if "-python" in flags and "-noproxy" not in flags:
             if mnames is None:
-                mnames = _reModule.findall(open(src).read())
+                mnames = _find_modules(src)
             target.extend(map(lambda m, d=target[0].dir:
                                      d.File(m + ".py"), mnames))
         if "-java" in flags:
             if mnames is None:
-                mnames = _reModule.findall(open(src).read())
+                mnames = _find_modules(src)
             java_files = map(lambda m: [m + ".java", m + "JNI.java"], mnames)
             java_files = SCons.Util.flatten(java_files)
             outdir = env.subst('$SWIGOUTDIR', target=target, source=source)
