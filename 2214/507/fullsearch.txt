Index: src/engine/SCons/Scanner/LaTeX.py
===================================================================
--- src/engine/SCons/Scanner/LaTeX.py   (revision 3532)
+++ src/engine/SCons/Scanner/LaTeX.py   (working copy)
@@ -35,6 +35,10 @@
 
 import SCons.Scanner
 
+# list of graphics file extensions for TeX and LaTeX
+TexGraphics   = ['.eps', '.ps']
+LatexGraphics = ['.pdf', '.png', '.jpg', '.gif', '.tif']
+
 def LaTeXScanner():
     """Return a prototype Scanner instance for scanning LaTeX source files
     when built with latex.
@@ -42,7 +46,7 @@
     ds = LaTeX(name = "LaTeXScanner",
                suffixes =  '$LATEXSUFFIXES',
                # in the search order, see below in LaTeX class docstring
-               graphics_extensions = ['.eps', '.ps'],
+               graphics_extensions = TexGraphics,
                recursive = 0)
     return ds
  
@@ -53,7 +57,7 @@
     ds = LaTeX(name = "PDFLaTeXScanner",
                suffixes =  '$LATEXSUFFIXES',
                # in the search order, see below in LaTeX class docstring
-               graphics_extensions = ['.pdf', '.png', '.jpg', '.gif', '.tif'],
+               graphics_extensions = LatexGraphics,
                recursive = 0)
     return ds
 
Index: src/engine/SCons/Tool/pdf.py
===================================================================
--- src/engine/SCons/Tool/pdf.py        (revision 3532)
+++ src/engine/SCons/Tool/pdf.py        (working copy)
@@ -1,6 +1,7 @@
 """SCons.Tool.pdf
 
 Common PDF Builder definition for various other Tool modules that use it.
+Add an explicit action to run eostopdf to convert .eps files to .pdf
 
 """
 
@@ -34,6 +35,8 @@
  
 PDFBuilder = None
 
+EpsPdfAction = SCons.Action.Action('$EPSTOPDFCOM', '$EPSTOPDFCOMSTR')
+
 def generate(env):
     try:
         env['BUILDERS']['PDF']
@@ -51,6 +54,17 @@
     env['PDFPREFIX'] = ''
     env['PDFSUFFIX'] = '.pdf'
 
+# put the epstopdf builder in this routine so we can add it after 
+# the pdftex builder so that one is the default for no source suffix
+def generate2(env):
+    bld = env['BUILDERS']['PDF']
+    bld.add_action('.ps',  EpsPdfAction)
+    bld.add_action('.eps', EpsPdfAction)
+
+    env['EPSTOPDF']      = 'epstopdf'
+    env['EPSTOPDFFLAGS'] = SCons.Util.CLVar('')
+    env['EPSTOPDFCOM']   = '$EPSTOPDF $EPSTOPDFFLAGS ${SOURCE}'
+
 def exists(env):
     # This only puts a skeleton Builder in place, so if someone
     # references this Tool directly, it's always "available."
Index: src/engine/SCons/Tool/pdftex.py
===================================================================
--- src/engine/SCons/Tool/pdftex.py     (revision 3532)
+++ src/engine/SCons/Tool/pdftex.py     (working copy)
@@ -79,8 +79,12 @@
 
     bld = env['BUILDERS']['PDF']
     bld.add_action('.tex', PDFTeXLaTeXAction)
-    bld.add_emitter('.tex', SCons.Tool.tex.tex_emitter)
+    bld.add_emitter('.tex', SCons.Tool.tex.tex_eps_emitter)
 
+    # Add the epstopdf builder after the pdftex builder 
+    # so pdftex is the default for no source suffix
+    pdf.generate2(env)
+
     env['PDFTEX']      = 'pdftex'
     env['PDFTEXFLAGS'] = SCons.Util.CLVar('-interaction=nonstopmode')
     env['PDFTEXCOM']   = 'cd ${TARGET.dir} && $PDFTEX $PDFTEXFLAGS ${SOURCE.file}'
Index: src/engine/SCons/Tool/pdflatex.py
===================================================================
--- src/engine/SCons/Tool/pdflatex.py   (revision 3532)
+++ src/engine/SCons/Tool/pdflatex.py   (working copy)
@@ -63,8 +63,10 @@
     bld = env['BUILDERS']['PDF']
     bld.add_action('.ltx', PDFLaTeXAuxAction)
     bld.add_action('.latex', PDFLaTeXAuxAction)
-    bld.add_emitter('.ltx', SCons.Tool.tex.tex_emitter)
-    bld.add_emitter('.latex', SCons.Tool.tex.tex_emitter)
+    bld.add_action('.tex', PDFLaTeXAuxAction)
+    bld.add_emitter('.ltx', SCons.Tool.tex.tex_pdf_emitter)
+    bld.add_emitter('.latex', SCons.Tool.tex.tex_pdf_emitter)
+    bld.add_emitter('.tex', SCons.Tool.tex.tex_pdf_emitter)
 
     env['PDFLATEX']      = 'pdflatex'
     env['PDFLATEXFLAGS'] = SCons.Util.CLVar('-interaction=nonstopmode')
Index: src/engine/SCons/Tool/tex.py
===================================================================
--- src/engine/SCons/Tool/tex.py        (revision 3532)
+++ src/engine/SCons/Tool/tex.py        (working copy)
@@ -42,6 +42,7 @@
 import SCons.Node
 import SCons.Node.FS
 import SCons.Util
+import SCons.Scanner.LaTeX
 
 Verbose = False
 
@@ -78,19 +79,29 @@
 
 # used by the emitter
 auxfile_re = re.compile(r".", re.MULTILINE)
-tableofcontents_re = re.compile(r"^[^%]*\\tableofcontents", re.MULTILINE)
-makeindex_re = re.compile(r"^[^%]*\\makeindex", re.MULTILINE)
-bibliography_re = re.compile(r"^[^%]*\\bibliography", re.MULTILINE)
-listoffigures_re = re.compile(r"^[^%]*\\listoffigures", re.MULTILINE)
-listoftables_re = re.compile(r"^[^%]*\\listoftables", re.MULTILINE)
-hyperref_re = re.compile(r"^[^%]*\\usepackage.*\{hyperref\}", re.MULTILINE)
-makenomenclature_re = re.compile(r"^[^%]*\\makenomenclature", re.MULTILINE)
-makeglossary_re = re.compile(r"^[^%]*\\makeglossary", re.MULTILINE)
-beamer_re = re.compile(r"^[^%]*\\documentclass\{beamer\}", re.MULTILINE)
+tableofcontents_re = re.compile(r"^[^%\n]*\\tableofcontents", re.MULTILINE)
+makeindex_re = re.compile(r"^[^%\n]*\\makeindex", re.MULTILINE)
+bibliography_re = re.compile(r"^[^%\n]*\\bibliography", re.MULTILINE)
+listoffigures_re = re.compile(r"^[^%\n]*\\listoffigures", re.MULTILINE)
+listoftables_re = re.compile(r"^[^%\n]*\\listoftables", re.MULTILINE)
+hyperref_re = re.compile(r"^[^%\n]*\\usepackage.*\{hyperref\}", re.MULTILINE)
+makenomenclature_re = re.compile(r"^[^%\n]*\\makenomenclature", re.MULTILINE)
+makeglossary_re = re.compile(r"^[^%\n]*\\makeglossary", re.MULTILINE)
+beamer_re = re.compile(r"^[^%\n]*\\documentclass\{beamer\}", re.MULTILINE)
 
+# search to find all files included by Latex
+include_re = re.compile(r'^[^%\n]*\\(?:include|input){([^}]*)}', re.MULTILINE)
+
+# search to find all graphics files included by Latex
+includegraphics_re = re.compile(r'^[^%\n]*\\(?:includegraphics(?:\[[^\]]+\])?){([^}]*)}', re.MULTIL
INE)
+
 # search to find all files opened by Latex (recorded in .log file)
 openout_re = re.compile(r"\\openout.*`(.*)'")
 
+# list of graphics file extensions for TeX and LaTeX
+TexGraphics   = SCons.Scanner.LaTeX.TexGraphics
+LatexGraphics = SCons.Scanner.LaTeX.LatexGraphics
+
 # An Action sufficient to build any generic tex file.
 TeXAction = None
 
@@ -145,12 +156,36 @@
     env['ENV'][var] = env['ENV'][var] + os.pathsep
     return save
 
+def FindFile(name,suffixes,paths,env):
+    #print "FindFile: name %s, suffixes "% name,suffixes," paths ",paths
+    #print " look for '%s'" % name
+    
+    # first look in local directory
+    paths.insert(0,'.')
+    for path in paths:
+        testName = os.path.join(path,name)
+        #print " look for '%s'" % testName
+        if os.path.exists(testName):
+            return env.fs.File(testName)
+        else:
+            name_ext = SCons.Util.splitext(testName)[1]
+            if name_ext:
+                continue
+            # if no suffix try adding those passed in
+            for suffix in suffixes:
+                testNameExt = testName + suffix
+                #print " look for '%s'" % testNameExt
+                # first look in local directory
+                if os.path.exists(testNameExt):
+                    return env.fs.File(testNameExt)
+    return None
+
 def InternalLaTeXAuxAction(XXXLaTeXAction, target = None, source= None, env=None):
     """A builder for LaTeX files that checks the output in the aux file
     and decides how many times to use LaTeXAction, and BibTeXAction."""
 
     global must_rerun_latex
-
+    
     # This routine is called with two actions. In this file for DVI builds
     # with LaTeXAction and from the pdflatex.py with PDFLaTeXAction
     # set this up now for the case where the user requests a different extension
@@ -171,7 +206,7 @@
     for var in SCons.Scanner.LaTeX.LaTeX.env_variables:
         saved_env[var] = modify_env_var(env, var, abspath)
 
-    # Create a base file names with the target directory since the auxiliary files
+    # Create base file names with the target directory since the auxiliary files
     # will be made there.   That's because the *COM variables have the cd
     # command in the prolog. We check
     # for the existence of files before opening them--even ones like the
@@ -221,7 +256,7 @@
         if Verbose:
             print "file %s changed, rerunning Latex, new hash = " % (targetbase+suffix), new_md5
         return True     # changed
-
+    
     # generate the file name that latex will generate
     resultfilename = targetbase + callerSuffix
 
@@ -235,7 +270,7 @@
         count = count + 1
 
         must_rerun_latex = False
-        # Decide if various things need to be run, or run again.
+        # Decide if various things need to be run, or run again.  
 
         # Read the log file to find all .aux files
         logfilename = targetbase + '.log'
@@ -386,12 +421,31 @@
         result = ''
     return result
 
-def tex_emitter(target, source, env):
-    """An emitter for TeX and LaTeX sources.
+def tex_eps_emitter(target, source, env):
+    """An emitter for TeX and LaTeX sources when
+    executing tex or latex. It will accept .ps and .eps
+    graphics files
+    """
+    (target, source) = tex_emitter_core(target, source, env, TexGraphics)
+
+    return (target, source)
+
+def tex_pdf_emitter(target, source, env):
+    """An emitter for TeX and LaTeX sources when
+    executing pdftex or pdflatex. It will accept graphics
+    files of types .pdf, .jpg, .png, .gif, and .tif
+    """
+    (target, source) = tex_emitter_core(target, source, env, LatexGraphics)
+
+    return (target, source)
+
+def tex_emitter_core(target, source, env, graphics_extensions):
+    """An emitter for TeX and LaTeX sources. 
     For LaTeX sources we try and find the common created files that
     are needed on subsequent runs of latex to finish tables of contents,
     bibliographies, indices, lists of figures, and hyperlink references.
     """ 
+#    print "enter emitter: sources ",source, " graphics ",graphics_extensions, " file ",str(source[
0])
     targetbase = SCons.Util.splitext(str(target[0]))[0]
     basename = SCons.Util.splitext(str(source[0]))[0]
     basefile = os.path.split(str(basename))[1]
@@ -399,6 +453,7 @@
     basedir = os.path.split(str(source[0]))[0]
     abspath = os.path.abspath(basedir)
     target[0].attributes.path = abspath
+#    print target[0], "  path ",target[0].attributes.path
 
     #
     # file names we will make use of in searching the sources and log file
@@ -413,33 +468,107 @@
     env.Clean(target[0],logfilename)
 
     content = source[0].get_contents()
+
     idx_exists = os.path.exists(targetbase + '.idx')
     nlo_exists = os.path.exists(targetbase + '.nlo')
     glo_exists = os.path.exists(targetbase + '.glo')
 
-    file_tests = [(auxfile_re.search(content),['.aux']),
-                  (makeindex_re.search(content) or idx_exists,['.idx', '.ind', '.ilg']),
-                  (bibliography_re.search(content),['.bbl', '.blg']),
-                  (tableofcontents_re.search(content),['.toc']),
-                  (listoffigures_re.search(content),['.lof']),
-                  (listoftables_re.search(content),['.lot']),
-                  (hyperref_re.search(content),['.out']),
-                  (makenomenclature_re.search(content) or nlo_exists,['.nlo', '.nls', '.nlg']),
-                  (makeglossary_re.search(content) or glo_exists,['.glo', '.gls', '.glg']),
-                  (beamer_re.search(content),['.nav', '.snm', '.out', '.toc']) ]
-    # Note we add the various makeindex files if the file produced by latex exists (.idx, .glo, .nl
o)
-    # This covers the case where the \makeindex, \makenomenclature, or \makeglossary
-    # is not in the main file but we want to clean the files and those made by makeindex
+    # set up list with the regular expressions
+    # we use to find features used
+    file_tests_search = [auxfile_re, 
+                         makeindex_re,
+                         bibliography_re,
+                         tableofcontents_re,
+                         listoffigures_re, 
+                         listoftables_re,
+                         hyperref_re,
+                         makenomenclature_re,
+                         makeglossary_re,
+                         beamer_re ]
+    # set up list with the file suffixes that need emitting
+    # when a feature is found
+    file_tests_suff = [['.aux'],
+                  ['.idx', '.ind', '.ilg'],
+                  ['.bbl', '.blg'],
+                  ['.toc'],
+                  ['.lof'],
+                  ['.lot'],
+                  ['.out'],
+                  ['.nlo', '.nls', '.nlg'],
+                  ['.glo', '.gls', '.glg'],
+                  ['.nav', '.snm', '.out', '.toc'] ]
+    # build the list of tuples
+    file_tests = []
+    for i in range(len(file_tests_search)):
+        file_tests.append( (file_tests_search[i].search(content), file_tests_suff[i]) )
+        #print "file_test[%d][0] = " % i,file_tests[i][0]
 
     # TO-DO: need to add a way for the user to extend this list for whatever
     # auxiliary files they create in other (or their own) packages
  
+    inc_files = [str(source[0]), ]
+    inc_files.extend( include_re.findall(content) )
+    #print "sub files(%s): "%source[0],inc_files
+    # inc_files is list of file names as given. need to find them
+    # using TEXINPUTS paths.
+    
+    # get path list from both env['TEXINPUTS'] and env['ENV']['TEXINPUTS']
+    saved_TEXINPUTS = {}
+    saved_TEXINPUTS['TEXINPUTS'] = modify_env_var(env, 'TEXINPUTS', '.')
+    paths = env['ENV']['TEXINPUTS']
+    if SCons.Util.is_List(paths):
+        pass
+    else:
+        # Split at os.pathsep to convert into absolute path
+        #TODO(1.5) env.PrependENVPath(var, [os.path.abspath(p) for p in str(env[var]).split(os.path
sep)])
+        paths = paths.split(os.pathsep)
+
+    # now that we have the path list restore the env
+    if saved_TEXINPUTS['TEXINPUTS'] is _null:
+        try:
+            del env['ENV']['TEXINPUTS']
+        except KeyError:
+            pass # was never set
+    else:
+        env['ENV']['TEXINPUTS'] = saved_TEXINPUTS['TEXINPUTS']
+    #print "paths ",paths, "  env ",env['ENV']['TEXINPUTS']
+
+    # search all files read (including the original source file)
+    # for files that are \input or \include
+    for src in inc_files:
+        # we already did this for the base file 
+        if src != inc_files[0]:
+            content = ""
+            srcNode = FindFile(src,['.tex','.ltx','.latex'],paths,env)
+            #print "srcNode ",srcNode
+            if srcNode:
+                content = srcNode.get_contents()
+            for i in range(10):
+                if file_tests[i][0] == None:
+                    file_tests[i] = ( file_tests_search[i].search(content), file_tests_suff[i])
+                    #print "file_test[%d][0] = " % i,file_tests[i][0]
+        
+        # For each file see if any graphics files are included
+        # and set up target to create ,pdf graphic
+        # is this is in pdflatex toolchain
+        src_inc_files = includegraphics_re.findall(content) 
+        #print "   sub files(%s): "%basename,src_inc_files
+        for graphFile in src_inc_files:
+            #print "graphFile ",graphFile
+            graphicNode = FindFile(graphFile,graphics_extensions,paths,env)
+            if graphicNode == None:
+                # see if we can build this graphics file by epstopdf
+                graphicSrc = FindFile(graphFile,TexGraphics,paths,env)
+                if graphicSrc != None:
+                    graphicNode = env.PDF(graphicSrc)
+                    env.Depends(target[0],graphicNode)
+
     for (theSearch,suffix_list) in file_tests:
         if theSearch:
             for suffix in suffix_list:
                 env.SideEffect(targetbase + suffix,target[0])
                 env.Clean(target[0],targetbase + suffix)
-
+                
     # read log file to get all other files that latex creates and will read on the next pass
     if os.path.exists(logfilename):
         content = open(logfilename, "rb").read()
@@ -480,12 +609,12 @@
     global MakeNclAction
     if MakeNclAction is None:
         MakeNclAction = SCons.Action.Action("$MAKENCLCOM", "$MAKENCLCOMSTR")
-
+    
     # Define an action to run MakeIndex on a file for glossaries.
     global MakeGlossaryAction
     if MakeGlossaryAction is None:
         MakeGlossaryAction = SCons.Action.Action("$MAKEGLOSSARYCOM", "$MAKEGLOSSARYCOMSTR")
-
+    
     global TeXLaTeXAction
     if TeXLaTeXAction is None:
         TeXLaTeXAction = SCons.Action.Action(TeXLaTeXFunction,
@@ -496,7 +625,7 @@
 
     bld = env['BUILDERS']['DVI']
     bld.add_action('.tex', TeXLaTeXAction)
-    bld.add_emitter('.tex', tex_emitter)
+    bld.add_emitter('.tex', tex_eps_emitter)
 
     env['TEX']      = 'tex'
     env['TEXFLAGS'] = SCons.Util.CLVar('-interaction=nonstopmode')
Index: src/engine/SCons/Tool/latex.py
===================================================================
--- src/engine/SCons/Tool/latex.py      (revision 3532)
+++ src/engine/SCons/Tool/latex.py      (working copy)
@@ -64,8 +64,10 @@
     bld = env['BUILDERS']['DVI']
     bld.add_action('.ltx', LaTeXAuxAction)
     bld.add_action('.latex', LaTeXAuxAction)
-    bld.add_emitter('.ltx', SCons.Tool.tex.tex_emitter)
-    bld.add_emitter('.latex', SCons.Tool.tex.tex_emitter)
+    bld.add_action('.tex', LaTeXAuxAction)
+    bld.add_emitter('.ltx', SCons.Tool.tex.tex_eps_emitter)
+    bld.add_emitter('.latex', SCons.Tool.tex.tex_eps_emitter)
+    bld.add_emitter('.tex', SCons.Tool.tex.tex_eps_emitter)
 
     env['LATEX']        = 'latex'
     env['LATEXFLAGS']   = SCons.Util.CLVar('-interaction=nonstopmode')
