RefactoringTool: Files that were modified:
RefactoringTool: bootstrap.py
RefactoringTool: runtest.py
RefactoringTool: QMTest/SConscript
RefactoringTool: SConstruct
RefactoringTool: doc/SConscript
RefactoringTool: src/setup.py
RefactoringTool: src/test_aegistests.py
RefactoringTool: src/test_files.py
RefactoringTool: src/test_interrupts.py
RefactoringTool: src/test_pychecker.py
RefactoringTool: src/test_setup.py
RefactoringTool: src/test_strings.py
RefactoringTool: src/engine/SCons/Action.py
RefactoringTool: src/engine/SCons/ActionTests.py
RefactoringTool: src/engine/SCons/CacheDir.py
RefactoringTool: src/engine/SCons/Conftest.py
RefactoringTool: src/engine/SCons/Debug.py
RefactoringTool: src/engine/SCons/Defaults.py
RefactoringTool: src/engine/SCons/DefaultsTests.py
RefactoringTool: src/engine/SCons/Environment.py
RefactoringTool: src/engine/SCons/EnvironmentTests.py
RefactoringTool: src/engine/SCons/Executor.py
RefactoringTool: src/engine/SCons/ExecutorTests.py
RefactoringTool: src/engine/SCons/PathList.py
RefactoringTool: src/engine/SCons/SConf.py
RefactoringTool: src/engine/SCons/SConfTests.py
RefactoringTool: src/engine/SCons/Subst.py
RefactoringTool: src/engine/SCons/SubstTests.py
RefactoringTool: src/engine/SCons/Taskmaster.py
RefactoringTool: src/engine/SCons/Util.py
RefactoringTool: src/engine/SCons/UtilTests.py
RefactoringTool: src/engine/SCons/Warnings.py
RefactoringTool: src/engine/SCons/cpp.py
RefactoringTool: src/engine/SCons/cppTests.py
RefactoringTool: src/engine/SCons/Node/Alias.py
RefactoringTool: src/engine/SCons/Node/FS.py
RefactoringTool: src/engine/SCons/Node/FSTests.py
RefactoringTool: src/engine/SCons/Node/NodeTests.py
RefactoringTool: src/engine/SCons/Node/__init__.py
RefactoringTool: src/engine/SCons/Platform/__init__.py
RefactoringTool: src/engine/SCons/Platform/aix.py
RefactoringTool: src/engine/SCons/Platform/posix.py
RefactoringTool: src/engine/SCons/Platform/win32.py
RefactoringTool: src/engine/SCons/Scanner/D.py
RefactoringTool: src/engine/SCons/Scanner/DirTests.py
RefactoringTool: src/engine/SCons/Scanner/Fortran.py
RefactoringTool: src/engine/SCons/Scanner/LaTeX.py
RefactoringTool: src/engine/SCons/Scanner/LaTeXTests.py
RefactoringTool: src/engine/SCons/Scanner/Prog.py
RefactoringTool: src/engine/SCons/Scanner/ProgTests.py
RefactoringTool: src/engine/SCons/Scanner/__init__.py
RefactoringTool: src/engine/SCons/Script/Interactive.py
RefactoringTool: src/engine/SCons/Script/Main.py
RefactoringTool: src/engine/SCons/Script/SConsOptions.py
RefactoringTool: src/engine/SCons/Script/SConscript.py
RefactoringTool: src/engine/SCons/Script/__init__.py
RefactoringTool: src/engine/SCons/Tool/FortranCommon.py
RefactoringTool: src/engine/SCons/Tool/JavaCommon.py
RefactoringTool: src/engine/SCons/Tool/PharLapCommon.py
RefactoringTool: src/engine/SCons/Tool/bcc32.py
RefactoringTool: src/engine/SCons/Tool/dmd.py
RefactoringTool: src/engine/SCons/Tool/fortran.py
RefactoringTool: src/engine/SCons/Tool/hpc++.py
RefactoringTool: src/engine/SCons/Tool/ifort.py
RefactoringTool: src/engine/SCons/Tool/intelc.py
RefactoringTool: src/engine/SCons/Tool/ipkg.py
RefactoringTool: src/engine/SCons/Tool/javac.py
RefactoringTool: src/engine/SCons/Tool/javah.py
RefactoringTool: src/engine/SCons/Tool/lex.py
RefactoringTool: src/engine/SCons/Tool/midl.py
RefactoringTool: src/engine/SCons/Tool/mingw.py
RefactoringTool: src/engine/SCons/Tool/msvc.py
RefactoringTool: src/engine/SCons/Tool/msvs.py
RefactoringTool: src/engine/SCons/Tool/msvsTests.py
RefactoringTool: src/engine/SCons/Tool/mwcc.py
RefactoringTool: src/engine/SCons/Tool/rmic.py
RefactoringTool: src/engine/SCons/Tool/swig.py
RefactoringTool: src/engine/SCons/Tool/tex.py
RefactoringTool: src/engine/SCons/Tool/wix.py
RefactoringTool: src/engine/SCons/Tool/yacc.py
RefactoringTool: src/engine/SCons/Tool/MSCommon/netframework.py
RefactoringTool: src/engine/SCons/Tool/packaging/__init__.py
RefactoringTool: src/engine/SCons/Tool/packaging/rpm.py
RefactoringTool: src/engine/SCons/Variables/BoolVariable.py
RefactoringTool: src/engine/SCons/Variables/EnumVariable.py
RefactoringTool: src/engine/SCons/Variables/ListVariable.py
RefactoringTool: src/engine/SCons/Variables/PackageVariable.py
RefactoringTool: src/engine/SCons/Variables/__init__.py
RefactoringTool: src/script/scons-time.py
RefactoringTool: src/script/sconsign.py
RefactoringTool: test/Case.py
RefactoringTool: test/Flatten.py
RefactoringTool: test/LoadableModule.py
RefactoringTool: test/NodeOps.py
RefactoringTool: test/WhereIs.py
RefactoringTool: test/gnutools.py
RefactoringTool: test/option--C.py
RefactoringTool: test/option-j.py
RefactoringTool: test/python-version.py
RefactoringTool: test/special-filenames.py
RefactoringTool: test/subdivide.py
RefactoringTool: test/textfile.py
RefactoringTool: test/AR/AR.py
RefactoringTool: test/AR/ARFLAGS.py
RefactoringTool: test/AS/ASPPCOMSTR.py
RefactoringTool: test/AS/as-live.py
RefactoringTool: test/AS/ml.py
RefactoringTool: test/AS/nasm.py
RefactoringTool: test/AddOption/help.py
RefactoringTool: test/Builder/multi/same-overrides.py
RefactoringTool: test/CC/CC.py
RefactoringTool: test/CC/SHCC.py
RefactoringTool: test/CC/SHCCFLAGS.py
RefactoringTool: test/CC/SHCFLAGS.py
RefactoringTool: test/CPPPATH/absolute-path.py
RefactoringTool: test/CXX/CXX.py
RefactoringTool: test/CXX/CXXFLAGS.py
RefactoringTool: test/CXX/SHCXX.py
RefactoringTool: test/CXX/SHCXXFLAGS.py
RefactoringTool: test/Configure/config-h.py
RefactoringTool: test/DVIPDF/DVIPDF.py
RefactoringTool: test/DVIPDF/DVIPDFFLAGS.py
RefactoringTool: test/DVIPS/DVIPS.py
RefactoringTool: test/DVIPS/DVIPSFLAGS.py
RefactoringTool: test/Deprecated/BuildDir.py
RefactoringTool: test/Deprecated/debug-stree.py
RefactoringTool: test/Deprecated/Options/BoolOption.py
RefactoringTool: test/Deprecated/Options/EnumOption.py
RefactoringTool: test/Deprecated/Options/ListOption.py
RefactoringTool: test/Deprecated/Options/Options.py
RefactoringTool: test/Deprecated/Options/PackageOption.py
RefactoringTool: test/Deprecated/Options/PathOption.py
RefactoringTool: test/Errors/execute-a-directory.py
RefactoringTool: test/Errors/non-executable-file.py
RefactoringTool: test/Errors/nonexistent-executable.py
RefactoringTool: test/Fortran/F77.py
RefactoringTool: test/Fortran/F77FLAGS.py
RefactoringTool: test/Fortran/F90.py
RefactoringTool: test/Fortran/F90FLAGS.py
RefactoringTool: test/Fortran/F95.py
RefactoringTool: test/Fortran/F95FLAGS.py
RefactoringTool: test/Fortran/FORTRAN.py
RefactoringTool: test/Fortran/FORTRANFLAGS.py
RefactoringTool: test/Fortran/SHF77.py
RefactoringTool: test/Fortran/SHF77FLAGS.py
RefactoringTool: test/Fortran/SHF90.py
RefactoringTool: test/Fortran/SHF90FLAGS.py
RefactoringTool: test/Fortran/SHF95.py
RefactoringTool: test/Fortran/SHF95FLAGS.py
RefactoringTool: test/Fortran/SHFORTRAN.py
RefactoringTool: test/Fortran/SHFORTRANFLAGS.py
RefactoringTool: test/GetOption/help.py
RefactoringTool: test/Ghostscript/GS.py
RefactoringTool: test/Ghostscript/GSFLAGS.py
RefactoringTool: test/Install/Install.py
RefactoringTool: test/Interactive/implicit-VariantDir.py
RefactoringTool: test/Interactive/shell.py
RefactoringTool: test/Java/JAR.py
RefactoringTool: test/Java/JARCHDIR.py
RefactoringTool: test/Java/JARFLAGS.py
RefactoringTool: test/Java/JAVABOOTCLASSPATH.py
RefactoringTool: test/Java/JAVACFLAGS.py
RefactoringTool: test/Java/JAVAH.py
RefactoringTool: test/Java/RMIC.py
RefactoringTool: test/LEX/live.py
RefactoringTool: test/LINK/LINK.py
RefactoringTool: test/LINK/LINKCOMSTR.py
RefactoringTool: test/LINK/LINKFLAGS.py
RefactoringTool: test/LINK/SHLINK.py
RefactoringTool: test/LINK/SHLINKFLAGS.py
RefactoringTool: test/Libs/SharedLibrary.py
RefactoringTool: test/M4/M4.py
RefactoringTool: test/MSVS/vs-8.0-x64-files.py
RefactoringTool: test/Perforce/Perforce.py
RefactoringTool: test/Progress/TARGET.py
RefactoringTool: test/Progress/file.py
RefactoringTool: test/Progress/spinner.py
RefactoringTool: test/QT/QTFLAGS.py
RefactoringTool: test/QT/copied-env.py
RefactoringTool: test/QT/installed.py
RefactoringTool: test/QT/source-from-ui.py
RefactoringTool: test/QT/up-to-date.py
RefactoringTool: test/QT/warnings.py
RefactoringTool: test/RANLIB/RANLIB.py
RefactoringTool: test/RANLIB/RANLIBFLAGS.py
RefactoringTool: test/Repository/LIBPATH.py
RefactoringTool: test/Repository/SharedLibrary.py
RefactoringTool: test/SCCS/diskcheck.py
RefactoringTool: test/SCCS/explicit.py
RefactoringTool: test/SCCS/implicit.py
RefactoringTool: test/SCCS/transparent.py
RefactoringTool: test/SWIG/live.py
RefactoringTool: test/TAR/TAR.py
RefactoringTool: test/TAR/TARFLAGS.py
RefactoringTool: test/TEX/LATEX.py
RefactoringTool: test/TEX/LATEXFLAGS.py
RefactoringTool: test/TEX/PDFLATEX.py
RefactoringTool: test/TEX/PDFLATEXFLAGS.py
RefactoringTool: test/TEX/PDFTEX.py
RefactoringTool: test/TEX/PDFTEXFLAGS.py
RefactoringTool: test/TEX/TEX.py
RefactoringTool: test/TEX/TEXFLAGS.py
RefactoringTool: test/Variables/BoolVariable.py
RefactoringTool: test/Variables/EnumVariable.py
RefactoringTool: test/Variables/ListVariable.py
RefactoringTool: test/Variables/PackageVariable.py
RefactoringTool: test/Variables/PathVariable.py
RefactoringTool: test/Variables/Variables.py
RefactoringTool: test/VariantDir/VariantDir.py
RefactoringTool: test/Win32/mingw.py
RefactoringTool: test/Win32/win32pathmadness.py
RefactoringTool: test/YACC/live.py
RefactoringTool: test/ZIP/ZIP.py
RefactoringTool: test/explain/basic.py
RefactoringTool: test/option/debug-count.py
RefactoringTool: test/option/debug-memory.py
RefactoringTool: test/option/debug-time.py
RefactoringTool: test/option/help-options.py
RefactoringTool: test/option/md5-chunksize.py
RefactoringTool: test/option/profile.py
RefactoringTool: test/option/stack-size.py
RefactoringTool: test/option/tree-all.py
RefactoringTool: test/packaging/convenience-functions.py
RefactoringTool: test/runtest/fallback.py
RefactoringTool: test/runtest/noqmtest.py
RefactoringTool: test/runtest/python.py
RefactoringTool: test/runtest/qmtest.py
RefactoringTool: test/runtest/xml/output.py
RefactoringTool: QMTest/TestCmd.py
RefactoringTool: QMTest/TestCommon.py
RefactoringTool: QMTest/TestRuntest.py
RefactoringTool: QMTest/TestSCons.py
RefactoringTool: QMTest/TestSConsMSVS.py
RefactoringTool: QMTest/TestSCons_time.py
RefactoringTool: QMTest/TestSConsign.py
RefactoringTool: QMTest/scons_tdb.py
RefactoringTool: QMTest/unittest.py
RefactoringTool: bin/linecount.py
RefactoringTool: bin/scons-doc.py
RefactoringTool: bin/scons-proc.py
RefactoringTool: bin/scons-test.py
RefactoringTool: bin/sconsexamples.py
RefactoringTool: bench/env.__setitem__.py
RefactoringTool: bench/timeit.py
--- bootstrap.py (original)
+++ bootstrap.py (refactored)
@@ -23,7 +23,7 @@
 
 import os
 import os.path
-import string
+#import string
 import sys
 
 __doc__ = """bootstrap.py
@@ -171,7 +171,7 @@
         if os.path.exists(f):
             return os.path.normpath(f)
     sys.stderr.write("could not find `%s' in search path:\n" % file)
-    sys.stderr.write("\t" + string.join(search, "\n\t") + "\n")
+    sys.stderr.write("\t" + "\n\t".join(search) + "\n")
     sys.exit(2)
 
 scons_py = os.path.join('src', 'script', 'scons.py')
@@ -200,7 +200,7 @@
             os.path.join(bootstrap_dir, scons_py)
        ] + pass_through_args
 
-sys.stdout.write(string.join(args, " ") + '\n')
+sys.stdout.write(" ".join(args) + '\n')
 sys.stdout.flush()
 
 os.environ['SCONS_LIB_DIR'] = os.path.join(bootstrap_dir, src_engine)
--- runtest.py (original)
+++ runtest.py (refactored)
@@ -91,7 +91,7 @@
 import os.path
 import re
 import stat
-import string
+#import string
 import sys
 import time
 
@@ -216,9 +216,9 @@
     elif o in ['-q', '--quiet']:
         printcommand = 0
     elif o in ['--sp']:
-        sp = string.split(a, os.pathsep)
+        sp = a.split(os.pathsep)
     elif o in ['--spe']:
-        spe = string.split(a, os.pathsep)
+        spe = a.split(os.pathsep)
     elif o in ['-t', '--time']:
         print_times = 1
     elif o in ['--verbose']:
@@ -245,8 +245,8 @@
 if sys.platform in ('win32', 'cygwin'):
 
     def whereis(file):
-        pathext = [''] + string.split(os.environ['PATHEXT'], os.pathsep)
-        for dir in string.split(os.environ['PATH'], os.pathsep):
+        pathext = [''] + os.environ['PATHEXT'].split(os.pathsep)
+        for dir in os.environ['PATH'].split(os.pathsep):
             f = os.path.join(dir, file)
             for ext in pathext:
                 fext = f + ext
@@ -257,7 +257,7 @@
 else:
 
     def whereis(file):
-        for dir in string.split(os.environ['PATH'], os.pathsep):
+        for dir in os.environ['PATH'].split(os.pathsep):
             f = os.path.join(dir, file)
             if os.path.isfile(f):
                 try:
@@ -295,10 +295,10 @@
     if change:
         if sp is None:
             paths = os.popen("aesub '$sp' 2>/dev/null", "r").read()[:-1]
-            sp = string.split(paths, os.pathsep)
+            sp = paths.split(os.pathsep)
         if spe is None:
             spe = os.popen("aesub '$spe' 2>/dev/null", "r").read()[:-1]
-            spe = string.split(spe, os.pathsep)
+            spe = spe.split(os.pathsep)
     else:
         aegis = None
 
@@ -316,7 +316,7 @@
 def escape(s):
     if _ws.search(s):
         s = '"' + s + '"'
-    s = string.replace(s, '\\', '\\\\')
+    s = s.replace('\\', '\\\\')
     return s
 
 # Set up lowest-common-denominator spawning of a process on both Windows
@@ -569,9 +569,9 @@
         q = os.path.join(dir, 'QMTest')
     pythonpaths.append(q)
 
-os.environ['SCONS_SOURCE_PATH_EXECUTABLE'] = string.join(spe, os.pathsep)
-
-os.environ['PYTHONPATH'] = string.join(pythonpaths, os.pathsep)
+os.environ['SCONS_SOURCE_PATH_EXECUTABLE'] = os.pathsep.join(spe)
+
+os.environ['PYTHONPATH'] = os.pathsep.join(pythonpaths)
 
 if old_pythonpath:
     os.environ['PYTHONPATH'] = os.environ['PYTHONPATH'] + \
@@ -592,8 +592,8 @@
         pass
     else:
         for exclude in excludes:
-            exclude = string.split(exclude, '#' , 1)[0]
-            exclude = string.strip(exclude)
+            exclude = exclude.split('#' , 1)[0]
+            exclude = exclude.strip()
             if not exclude: continue
             tests = filter(lambda n, ex = exclude: n != ex, tests)
     for n in tests:
@@ -647,12 +647,12 @@
     if format == '--aegis' and aegis:
         cmd = "aegis -list -unf pf 2>/dev/null"
         for line in os.popen(cmd, "r").readlines():
-            a = string.split(line)
+            a = line.split()
             if a[0] == "test" and not tdict.has_key(a[-1]):
                 tdict[a[-1]] = Test(a[-1], spe)
         cmd = "aegis -list -unf cf 2>/dev/null"
         for line in os.popen(cmd, "r").readlines():
-            a = string.split(line)
+            a = line.split()
             if a[0] == "test":
                 if a[1] == "remove":
                     del tdict[a[-1]]
@@ -701,11 +701,11 @@
         qmtest_args.append(rs)
 
     if format == '--aegis':
-        tests = map(lambda x: string.replace(x, cwd+os.sep, ''), tests)
+        tests = map(lambda x: x.replace(cwd+os.sep, ''), tests)
     else:
         os.environ['SCONS'] = os.path.join(cwd, 'src', 'script', 'scons.py')
 
-    cmd = string.join(qmtest_args + tests, ' ')
+    cmd = ' '.join(qmtest_args + tests)
     if printcommand:
         sys.stdout.write(cmd + '\n')
         sys.stdout.flush()
@@ -766,7 +766,7 @@
         command_args.append(debug)
     command_args.append(t.path)
     t.command_args = [python] + command_args
-    t.command_str = string.join([escape(python)] + command_args, " ")
+    t.command_str = " ".join([escape(python)] + command_args)
     if printcommand:
         sys.stdout.write(t.command_str + "\n")
     test_start_time = time_func()
@@ -789,21 +789,21 @@
         else:
             sys.stdout.write("\nPassed the following %d tests:\n" % len(passed))
         paths = map(lambda x: x.path, passed)
-        sys.stdout.write("\t" + string.join(paths, "\n\t") + "\n")
+        sys.stdout.write("\t" + "\n\t".join(paths) + "\n")
     if fail:
         if len(fail) == 1:
             sys.stdout.write("\nFailed the following test:\n")
         else:
             sys.stdout.write("\nFailed the following %d tests:\n" % len(fail))
         paths = map(lambda x: x.path, fail)
-        sys.stdout.write("\t" + string.join(paths, "\n\t") + "\n")
+        sys.stdout.write("\t" + "\n\t".join(paths) + "\n")
     if no_result:
         if len(no_result) == 1:
             sys.stdout.write("\nNO RESULT from the following test:\n")
         else:
             sys.stdout.write("\nNO RESULT from the following %d tests:\n" % len(no_result))
         paths = map(lambda x: x.path, no_result)
-        sys.stdout.write("\t" + string.join(paths, "\n\t") + "\n")
+        sys.stdout.write("\t" + "\n\t".join(paths) + "\n")
 
 if outputfile:
     if outputfile == '-':
--- QMTest/SConscript (original)
+++ QMTest/SConscript (refactored)
@@ -26,7 +26,7 @@
 #
 
 import os.path
-import string
+#import string
 
 Import('build_dir', 'env')
 
@@ -50,7 +50,7 @@
     # Note:  We construct the __ VERSION __ substitution string at
     # run-time so it doesn't get replaced when this file gets copied
     # into the tree for packaging.
-    c = string.replace(c, '__' + 'VERSION' + '__', env['VERSION'])
+    c = c.replace('__' + 'VERSION' + '__', env['VERSION'])
     open(t, 'wb').write(c)
 
 for file in files:
--- SConstruct (original)
+++ SConstruct (refactored)
@@ -40,7 +40,7 @@
 import os.path
 import re
 import stat
-import string
+#import string
 import sys
 import tempfile
 
@@ -60,7 +60,7 @@
     exts = ['']
     if platform == "win32":
         exts += ['.exe']
-    for dir in string.split(os.environ['PATH'], os.pathsep):
+    for dir in os.environ['PATH'].split(os.pathsep):
         f = os.path.join(dir, file)
         for ext in exts:
             f_ext = f + ext
@@ -106,7 +106,7 @@
 build_system = ARGUMENTS.get('BUILD_SYSTEM')
 if not build_system:
     import socket
-    build_system = string.split(socket.gethostname(), '.')[0]
+    build_system = socket.gethostname().split('.')[0]
 
 version = ARGUMENTS.get('VERSION', '')
 if not version:
@@ -365,16 +365,16 @@
     # Note:  We construct the __*__ substitution strings here
     # so that they don't get replaced when this file gets
     # copied into the tree for packaging.
-    contents = string.replace(contents, '__BUILD'     + '__', env['BUILD'])
-    contents = string.replace(contents, '__BUILDSYS'  + '__', env['BUILDSYS'])
-    contents = string.replace(contents, '__COPYRIGHT' + '__', env['COPYRIGHT'])
-    contents = string.replace(contents, '__DATE'      + '__', env['DATE'])
-    contents = string.replace(contents, '__DEVELOPER' + '__', env['DEVELOPER'])
-    contents = string.replace(contents, '__FILE'      + '__', str(source[0]))
-    contents = string.replace(contents, '__MONTH_YEAR'+ '__', env['MONTH_YEAR'])
-    contents = string.replace(contents, '__REVISION'  + '__', env['REVISION'])
-    contents = string.replace(contents, '__VERSION'   + '__', env['VERSION'])
-    contents = string.replace(contents, '__NULL'      + '__', '')
+    contents = contents.replace('__BUILD'     + '__', env['BUILD'])
+    contents = contents.replace('__BUILDSYS'  + '__', env['BUILDSYS'])
+    contents = contents.replace('__COPYRIGHT' + '__', env['COPYRIGHT'])
+    contents = contents.replace('__DATE'      + '__', env['DATE'])
+    contents = contents.replace('__DEVELOPER' + '__', env['DEVELOPER'])
+    contents = contents.replace('__FILE'      + '__', str(source[0]))
+    contents = contents.replace('__MONTH_YEAR'+ '__', env['MONTH_YEAR'])
+    contents = contents.replace('__REVISION'  + '__', env['REVISION'])
+    contents = contents.replace('__VERSION'   + '__', env['VERSION'])
+    contents = contents.replace('__NULL'      + '__', '')
     open(t, 'wb').write(contents)
     os.chmod(t, os.stat(s)[0])
 
@@ -998,12 +998,12 @@
             maintain multiple lists.
             """
             c = open(str(source[0]), 'rb').read()
-            c = string.replace(c, '__VERSION' + '__', env['VERSION'])
-            c = string.replace(c, '__RPM_FILES' + '__', env['RPM_FILES'])
+            c = c.replace('__VERSION' + '__', env['VERSION'])
+            c = c.replace('__RPM_FILES' + '__', env['RPM_FILES'])
             open(str(target[0]), 'wb').write(c)
 
         rpm_files.sort()
-        rpm_files_str = string.join(rpm_files, "\n") + "\n"
+        rpm_files_str = "\n".join(rpm_files) + "\n"
         rpm_spec_env = env.Clone(RPM_FILES = rpm_files_str)
         rpm_spec_action = Action(spec_function, varlist=['RPM_FILES'])
         rpm_spec_env.Command(specfile, specfile_in, rpm_spec_action)
@@ -1072,7 +1072,7 @@
             commands.append("$PYTHON $PYTHONFLAGS $SETUP_PY bdist_dumb -f %s" % format)
 
         commands.append("$PYTHON $PYTHONFLAGS $SETUP_PY sdist --formats=%s" %  \
-                            string.join(distutils_formats, ','))
+                            ','.join(distutils_formats))
 
     commands.append("$PYTHON $PYTHONFLAGS $SETUP_PY bdist_wininst")
 
--- doc/SConscript (original)
+++ doc/SConscript (refactored)
@@ -27,7 +27,7 @@
 
 import os.path
 import re
-import string
+#import string
 
 Import('build_dir', 'env', 'whereis')
 
@@ -444,12 +444,12 @@
         def strip_to_first_html_tag(target, source, env):
             t = str(target[0])
             contents = open(t).read()
-            contents = contents[string.find(contents, '<HTML>'):]
+            contents = contents[contents.find('<HTML>'):]
             open(t, 'w').write(contents)
             return 0
 
         cmds = [
-            "( cd %s/man && cp %s .. )" % (build, string.join(man_i_files)),
+            "( cd %s/man && cp %s .. )" % (build, ' '.join(man_i_files)),
             "( cd ${SOURCE.dir} && man2html ${SOURCE.file} ) > $TARGET",
             Action(strip_to_first_html_tag),
         ]
@@ -470,11 +470,11 @@
     e = os.path.join('#src', 'engine')
     manifest_in = File(os.path.join(e, 'MANIFEST.in')).rstr()
     sources = map(lambda x: x[:-1], open(manifest_in).readlines())
-    sources = filter(lambda x: string.find(x, 'Optik') == -1, sources)
-    sources = filter(lambda x: string.find(x, 'Platform') == -1, sources)
-    sources = filter(lambda x: string.find(x, 'Tool') == -1, sources)
+    sources = filter(lambda x: x.find('Optik') == -1, sources)
+    sources = filter(lambda x: x.find('Platform') == -1, sources)
+    sources = filter(lambda x: x.find('Tool') == -1, sources)
     # XXX
-    sources = filter(lambda x: string.find(x, 'Options') == -1, sources)
+    sources = filter(lambda x: x.find('Options') == -1, sources)
 
     e = os.path.join(build, '..', 'scons', 'engine')
     sources = map(lambda x, e=e: os.path.join(e, x), sources)
@@ -519,7 +519,7 @@
 # for easy distribution to the web site.
 #
 if tar_deps:
-    tar_list = string.join(map(lambda x, b=build+'/': string.replace(x, b, ''),
+    tar_list = ' '.join(map(lambda x, b=build+'/': x.replace(b, ''),
                            tar_list))
     t = env.Command(dist_doc_tar_gz, tar_deps,
                 "tar cf${TAR_HFLAG} - -C %s %s | gzip > $TARGET" % (build, tar_list))
--- src/setup.py (original)
+++ src/setup.py (refactored)
@@ -26,7 +26,7 @@
 import os
 import os.path
 import stat
-import string
+#import string
 import sys
 
 Version = "__VERSION__"
@@ -198,7 +198,7 @@
         if head == os.sep:
             break
         head, tail = os.path.split(head)
-        if string.lower(tail)[:6] == "python":
+        if tail.lower()[:6] == "python":
             # Found the Python library directory...
             if is_win32:
                 # ...on Win32 systems, "scons" goes in the directory:
@@ -418,7 +418,7 @@
 apply(distutils.core.setup, (), arguments)
 
 if Installed:
-    print string.join(Installed, '\n')
+    print '\n'.join(Installed)
 
 # Local Variables:
 # tab-width:4
--- src/test_aegistests.py (original)
+++ src/test_aegistests.py (refactored)
@@ -35,7 +35,7 @@
 import os
 import popen2
 import re
-import string
+#import string
 import sys
 
 import TestSCons
@@ -57,7 +57,7 @@
 
 output = get_stdout('aegis -list -unformatted pf') +\
          get_stdout('aegis -list -unformatted cf')
-lines = string.split(output, '\n')[:-1]
+lines = output.split('\n')[:-1]
 sources = filter(lambda x: x[:7] == 'source ', lines)
 
 re1 = re.compile(r' src/.*Tests\.py')
@@ -71,7 +71,7 @@
 
 if test_files:
     sys.stderr.write("Found the following files with test names not marked as Aegis tests:\n")
-    sys.stderr.write('\t' + string.join(test_files, '\n\t') + '\n')
+    sys.stderr.write('\t' + '\n\t'.join(test_files) + '\n')
     test.fail_test(1)
 
 test.pass_test()
--- src/test_files.py (original)
+++ src/test_files.py (refactored)
@@ -35,7 +35,7 @@
 import os
 import os.path
 import re
-import string
+#import string
 
 import TestSCons
 
@@ -89,12 +89,12 @@
 
 if missing:
     print "Missing the following files:\n"
-    print "\t" + string.join(missing, "\n\t")
+    print "\t" + "\n\t".join(missing)
     test.fail_test(1)
 
 if no_result:
     print "Cannot check files, the following have apparently not been built:"
-    print "\t" + string.join(no_result, "\n\t")
+    print "\t" + "\n\t".join(no_result)
     test.no_result(1)
 
 test.pass_test()
--- src/test_interrupts.py (original)
+++ src/test_interrupts.py (refactored)
@@ -32,7 +32,7 @@
 import os
 import os.path
 import re
-import string
+#import string
 import time
 
 import TestSCons
@@ -76,7 +76,7 @@
 except IOError:
     test.skip_test('%s does not exist; skipping test.\n' % MANIFEST)
 else:
-    files = string.split(fp.read())
+    files = fp.read().split()
     files = filter(lambda f: f[-3:] == '.py', files)
 
 # some regexps to parse the python files
@@ -100,7 +100,7 @@
             indent_list = try_except_lines[match.group('indent')]
         except:
             indent_list = []
-        line_num = 1 + string.count(contents[:match.start()], '\n')
+        line_num = 1 + contents[:match.start()].count('\n')
         indent_list.append( (line_num, match.group('try_or_except') ) )
         try_except_lines[match.group('indent')] = indent_list
     uncaught_this_file = []
@@ -111,7 +111,7 @@
             #print "%4d %s" % (l,statement),
             m1 = keyboardint_pat.match(statement)
             m2 = exceptall_pat.match(statement)
-            if string.find(statement, indent + 'try') == 0:
+            if statement.find(indent + 'try') == 0:
                 if exc_all_seen and not exc_keyboardint_seen:
                     uncaught_this_file.append(line)
                 exc_keyboardint_seen = 0
--- src/test_pychecker.py (original)
+++ src/test_pychecker.py (refactored)
@@ -30,7 +30,7 @@
 
 import os
 import os.path
-import string
+#import string
 import sys
 
 import TestSCons
@@ -64,7 +64,7 @@
 src_engine_ = os.path.join(src_engine, '')
 
 MANIFEST = os.path.join(src_engine, 'MANIFEST.in')
-files = string.split(open(MANIFEST).read())
+files = open(MANIFEST).read().split()
 
 files = filter(lambda f: f[-3:] == '.py', files)
 
@@ -131,15 +131,15 @@
     test.run(program=program, arguments=args, status=None, stderr=None)
 
     stdout = test.stdout()
-    stdout = string.replace(stdout, src_engine_, '')
+    stdout = stdout.replace(src_engine_, '')
 
     stderr = test.stderr()
-    stderr = string.replace(stderr, src_engine_, '')
-    stderr = string.replace(stderr, pywintypes_warning, '')
+    stderr = stderr.replace(src_engine_, '')
+    stderr = stderr.replace(pywintypes_warning, '')
 
     if test.status or stdout or stderr:
         mismatches.append('\n')
-        mismatches.append(string.join([program] + args) + '\n')
+        mismatches.append(' '.join([program] + args) + '\n')
 
         mismatches.append('STDOUT =====================================\n')
         mismatches.append(stdout)
@@ -149,7 +149,7 @@
             mismatches.append(stderr)
 
 if mismatches:
-    print string.join(mismatches[1:], '')
+    print ''.join(mismatches[1:])
     test.fail_test()
 
 test.pass_test()
--- src/test_setup.py (original)
+++ src/test_setup.py (refactored)
@@ -34,7 +34,7 @@
 import os
 import os.path
 import shutil
-import string
+#import string
 import sys
 
 try: WindowsError
@@ -124,7 +124,7 @@
         except (OSError, WindowsError): pass
 
     def stdout_lines(self):
-        return string.split(self.stdout(), '\n')
+        return self.stdout().split('\n')
 
 
     def lib_line(self, lib):
@@ -321,8 +321,7 @@
 other_prefix = test.workpath('other-prefix')
 test.subdir(other_prefix)
 test.run(arguments = 'setup.py install --prefix=%s' % other_prefix)
-test.fail_test(string.find(test.stderr(),
-                           "you'll have to change the search path yourself")
+test.fail_test(test.stderr().find("you'll have to change the search path yourself")
                != -1)
 
 # All done.
--- src/test_strings.py (original)
+++ src/test_strings.py (refactored)
@@ -36,7 +36,7 @@
 import os
 import os.path
 import re
-import string
+#import string
 
 import TestCmd
 import TestSCons
@@ -263,12 +263,12 @@
 
 if missing_strings:
     print "Found the following files with missing strings:"
-    print "\t" + string.join(missing_strings, "\n\t")
+    print "\t" + "\n\t".join(missing_strings)
     test.fail_test(1)
 
 if not_built:
     print "Cannot check all strings, the following have apparently not been built:"
-    print "\t" + string.join(not_built, "\n\t")
+    print "\t" + "\n\t".join(not_built)
     test.no_result(1)
 
 test.pass_test()
--- src/engine/SCons/Action.py (original)
+++ src/engine/SCons/Action.py (refactored)
@@ -103,7 +103,7 @@
 import dis
 import os
 import re
-import string
+#import string
 import sys
 import subprocess
 
@@ -153,7 +153,7 @@
             else:
                 result.append(c)
                 i = i+1
-        return string.join(result, '')
+        return ''.join(result)
 
 strip_quotes = re.compile('^[\'"](.*)[\'"]$')
 
@@ -249,19 +249,19 @@
     # Note that we also always ignore the first entry of co_consts
     # which contains the function doc string. We assume that the
     # function does not access its doc string.
-    contents.append(',(' + string.join(map(_object_contents,code.co_consts[1:]),',') + ')')
+    contents.append(',(' + ','.join(map(_object_contents,code.co_consts[1:])) + ')')
 
     # The code contents depends on the variable names used to
     # accessed global variable, as changing the variable name changes
     # the variable actually accessed and therefore changes the
     # function result.
-    contents.append(',(' + string.join(map(_object_contents,code.co_names),',') + ')')
+    contents.append(',(' + ','.join(map(_object_contents,code.co_names)) + ')')
 
 
     # The code contents depends on its actual code!!!
     contents.append(',(' + str(remove_set_lineno_codes(code.co_code)) + ')')
 
-    return string.join(contents, '')
+    return ''.join(contents)
 
 
 def _function_contents(func):
@@ -271,7 +271,7 @@
 
     # The function contents depends on the value of defaults arguments
     if func.func_defaults:
-        contents.append(',(' + string.join(map(_object_contents,func.func_defaults),',') + ')')
+        contents.append(',(' + ','.join(map(_object_contents,func.func_defaults)) + ')')
     else:
         contents.append(',()')
 
@@ -287,9 +287,9 @@
         xxx = map(lambda x: _object_contents(x.cell_contents), closure)
     except AttributeError:
         xxx = []
-    contents.append(',(' + string.join(xxx, ',') + ')')
-
-    return string.join(contents, '')
+    contents.append(',(' + ','.join(xxx) + ')')
+
+    return ''.join(contents)
 
 
 def _actionAppend(act1, act2):
@@ -378,7 +378,7 @@
             # like a function or a CommandGenerator in that variable
             # instead of a string.
             return LazyAction(var, kw)
-        commands = string.split(str(act), '\n')
+        commands = str(act).split('\n')
         if len(commands) == 1:
             #TODO(1.5) return CommandAction(commands[0], **kw)
             return apply(CommandAction, (commands[0],), kw)
@@ -434,7 +434,7 @@
         if is_String(vl): vl = (vl,)
         for v in vl:
             result.append(env.subst('${'+v+'}'))
-        return string.join(result, '')
+        return ''.join(result)
 
     def __add__(self, other):
         return _actionAppend(self, other)
@@ -450,7 +450,7 @@
         # and CommandGeneratorAction will use this env
         # when it calls its _generate method.
         self.presub_env = env
-        lines = string.split(str(self), '\n')
+        lines = str(self).split('\n')
         self.presub_env = None      # don't need this any more
         return lines
 
@@ -534,8 +534,8 @@
             if executor:
                 target = executor.get_all_targets()
                 source = executor.get_all_sources()
-            t = string.join(map(str, target), ' and ')
-            l = string.join(self.presub_lines(env), '\n  ')
+            t = ' and '.join(map(str, target))
+            l = '\n  '.join(self.presub_lines(env))
             out = "Building %s with action:\n  %s\n" % (t, l)
             sys.stdout.write(out)
         cmd = None
@@ -590,7 +590,7 @@
         if ' ' in arg or '\t' in arg:
             arg = '"' + arg + '"'
         cl.append(arg)
-    return string.join(cl)
+    return ' '.join(cl)
 
 # A fiddlin' little function that has an 'import SCons.Environment' which
 # can't be moved to the top level without creating an import loop.  Since
@@ -642,7 +642,7 @@
             # because that's a pretty common list-like value to stick
             # in an environment variable:
             value = SCons.Util.flatten_sequence(value)
-            new_env[key] = string.join(map(str, value), os.pathsep)
+            new_env[key] = os.pathsep.join(map(str, value))
         else:
             # It's either a string or something else.  If it's a string,
             # we still want to call str() because it might be a *Unicode*
@@ -694,7 +694,7 @@
 
     def __str__(self):
         if is_List(self.cmd_list):
-            return string.join(map(str, self.cmd_list), ' ')
+            return ' '.join(map(str, self.cmd_list))
         return str(self.cmd_list)
 
     def process(self, target, source, env, executor=None):
@@ -771,7 +771,7 @@
                     # path list, because that's a pretty common list-like
                     # value to stick in an environment variable:
                     value = flatten_sequence(value)
-                    ENV[key] = string.join(map(str, value), os.pathsep)
+                    ENV[key] = os.pathsep.join(map(str, value))
                 else:
                     # If it isn't a string or a list, then we just coerce
                     # it to a string, which is the proper way to handle
@@ -806,7 +806,7 @@
         from SCons.Subst import SUBST_SIG
         cmd = self.cmd_list
         if is_List(cmd):
-            cmd = string.join(map(str, cmd))
+            cmd = ' '.join(map(str, cmd))
         else:
             cmd = str(cmd)
         if executor:
@@ -1018,7 +1018,7 @@
                 else:
                     s = str_for_display()
                 return s
-            return '[' + string.join(map(quote, a), ", ") + ']'
+            return '[' + ", ".join(map(quote, a)) + ']'
         try:
             strfunc = self.execfunction.strfunction
         except AttributeError:
@@ -1108,13 +1108,12 @@
         self.targets = '$TARGETS'
 
     def genstring(self, target, source, env):
-        return string.join(map(lambda a, t=target, s=source, e=env:
+        return '\n'.join(map(lambda a, t=target, s=source, e=env:
                                   a.genstring(t, s, e),
-                               self.list),
-                           '\n')
+                               self.list))
 
     def __str__(self):
-        return string.join(map(str, self.list), '\n')
+        return '\n'.join(map(str, self.list))
 
     def presub_lines(self, env):
         return SCons.Util.flatten_sequence(
@@ -1125,10 +1124,9 @@
 
         Simple concatenation of the signatures of the elements.
         """
-        return string.join(map(lambda x, t=target, s=source, e=env:
+        return "".join(map(lambda x, t=target, s=source, e=env:
                                       x.get_contents(t, s, e),
-                               self.list),
-                           "")
+                               self.list))
 
     def __call__(self, target, source, env, exitstatfunc=_null, presub=_null,
                  show=_null, execute=_null, chdir=_null, executor=None):
--- src/engine/SCons/ActionTests.py (original)
+++ src/engine/SCons/ActionTests.py (refactored)
@@ -37,7 +37,7 @@
 import os
 import re
 import StringIO
-import string
+#import string
 import sys
 import types
 import unittest
@@ -273,7 +273,7 @@
         except SCons.Errors.UserError, e:
             s = str(e)
             m = 'Invalid command display variable'
-            assert string.find(s, m) != -1, 'Unexpected string:  %s' % s
+            assert s.find(m) != -1, 'Unexpected string:  %s' % s
         else:
             raise Exception, "did not catch expected UserError"
 
@@ -490,7 +490,7 @@
         except SCons.Errors.UserError, e:
             s = str(e)
             m = 'Cannot have both strfunction and cmdstr args to Action()'
-            assert string.find(s, m) != -1, 'Unexpected string:  %s' % s
+            assert s.find(m) != -1, 'Unexpected string:  %s' % s
         else:
             raise Exception, "did not catch expected UserError"
 
--- src/engine/SCons/CacheDir.py (original)
+++ src/engine/SCons/CacheDir.py (refactored)
@@ -29,7 +29,7 @@
 
 import os.path
 import stat
-import string
+#import string
 import sys
 
 import SCons.Action
@@ -158,7 +158,7 @@
             return None, None
 
         sig = node.get_cachedir_bsig()
-        subdir = string.upper(sig[0])
+        subdir = sig[0].upper()
         dir = os.path.join(self.path, subdir)
         return dir, os.path.join(dir, sig)
 
--- src/engine/SCons/Conftest.py (original)
+++ src/engine/SCons/Conftest.py (refactored)
@@ -101,7 +101,7 @@
 #
 
 import re
-import string
+#import string
 from types import IntType
 
 #
@@ -636,7 +636,7 @@
 """ % (call or "")
 
     if call:
-        i = string.find(call, "\n")
+        i = call.find("\n")
         if i > 0:
             calltext = call[:i] + ".."
         elif call[-1] == ';':
@@ -723,7 +723,7 @@
              Give "have" as is should appear in the header file, include quotes
              when desired and escape special characters!
     """
-    key_up = string.upper(key)
+    key_up = key.upper()
     key_up = re.sub('[^A-Z0-9_]', '_', key_up)
     context.havedict[key_up] = have
     if have == 1:
@@ -755,7 +755,7 @@
     """
     if LogInputFiles:
         context.Log("Failed program was:\n")
-        lines = string.split(text, '\n')
+        lines = text.split('\n')
         if len(lines) and lines[-1] == '':
             lines = lines[:-1]              # remove trailing empty line
         n = 1
--- src/engine/SCons/Debug.py (original)
+++ src/engine/SCons/Debug.py (refactored)
@@ -32,7 +32,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 import time
 
@@ -60,7 +60,7 @@
         c.sort()
         return c
     else:
-        return string.split(s)
+        return s.split()
 
 def fetchLoggedInstances(classes="*"):
     classnames = string_to_classes(classes)
@@ -94,7 +94,7 @@
     # Linux doesn't actually support memory usage stats from getrusage().
     def memory():
         mstr = open('/proc/self/stat').read()
-        mstr = string.split(mstr)[22]
+        mstr = mstr.split()[22]
         return int(mstr)
 else:
     try:
@@ -176,14 +176,14 @@
 
 if os.sep != '/':
    def platformize(t):
-       return (string.replace(t[0], '/', os.sep), t[1])
+       return (t[0].replace('/', os.sep), t[1])
    shorten_list = map(platformize, shorten_list)
    del platformize
 
 def func_shorten(func_tuple):
     f = func_tuple[0]
     for t in shorten_list:
-        i = string.find(f, t[0])
+        i = f.find(t[0])
         if i >= 0:
             if t[1]:
                 i = i + len(t[0])
--- src/engine/SCons/Defaults.py (original)
+++ src/engine/SCons/Defaults.py (refactored)
@@ -41,7 +41,7 @@
 import errno
 import shutil
 import stat
-import string
+#import string
 import time
 import types
 import sys
@@ -165,7 +165,7 @@
         elem_strs = []
         for element in dest:
             elem_strs.append('"' + str(element) + '"')
-        return '[' + string.join(elem_strs, ', ') + ']'
+        return '[' + ', '.join(elem_strs) + ']'
     else:
         return '"' + str(dest) + '"'
 
--- src/engine/SCons/DefaultsTests.py (original)
+++ src/engine/SCons/DefaultsTests.py (refactored)
@@ -25,7 +25,7 @@
 
 import os
 import os.path
-import string
+#import string
 import StringIO
 import sys
 import types
--- src/engine/SCons/Environment.py (original)
+++ src/engine/SCons/Environment.py (refactored)
@@ -40,7 +40,7 @@
 import sys
 import re
 import shlex
-import string
+#import string
 from UserDict import UserDict
 
 import SCons.Action
@@ -563,7 +563,7 @@
                         # We have an object plus a string, or multiple
                         # objects that we need to smush together.  No choice
                         # but to make them into a string.
-                        p = string.join(map(SCons.Util.to_String_for_subst, p), '')
+                        p = ''.join(map(SCons.Util.to_String_for_subst, p))
             else:
                 p = s(p)
             r.append(p)
@@ -678,11 +678,11 @@
 
             # utility function to deal with -D option
             def append_define(name, dict = dict):
-                t = string.split(name, '=')
+                t = name.split('=')
                 if len(t) == 1:
                     dict['CPPDEFINES'].append(name)
                 else:
-                    dict['CPPDEFINES'].append([t[0], string.join(t[1:], '=')])
+                    dict['CPPDEFINES'].append([t[0], '='.join(t[1:])])
 
             # Loop through the flags and add them to the appropriate option.
             # This tries to strike a balance between checking for all possible
@@ -1097,7 +1097,7 @@
             for scanner in scanners:
                 for k in scanner.get_skeys(self):
                     if k and self['PLATFORM'] == 'win32':
-                        k = string.lower(k)
+                        k = k.lower()
                     result[k] = scanner
 
         self._memo['_gsm'] = result
@@ -1108,7 +1108,7 @@
         """Find the appropriate scanner given a key (usually a file suffix).
         """
         if skey and self['PLATFORM'] == 'win32':
-            skey = string.lower(skey)
+            skey = skey.lower()
         return self._gsm().get(skey)
 
     def scanner_map_delete(self, kw=None):
@@ -1469,7 +1469,7 @@
                 return env.MergeFlags(cmd, unique)
             function = parse_conf
         if SCons.Util.is_List(command):
-            command = string.join(command)
+            command = ' '.join(command)
         command = self.subst(command)
         return function(self, self.backtick(command))
 
@@ -1495,7 +1495,7 @@
         tdlist = []
         for line in lines:
             try:
-                target, depends = string.split(line, ':', 1)
+                target, depends = line.split(':', 1)
             except (AttributeError, TypeError, ValueError):
                 # Python 1.5.2 throws TypeError if line isn't a string,
                 # Python 2.x throws AttributeError because it tries
@@ -1503,7 +1503,7 @@
                 # if the line doesn't split into two or more elements.
                 pass
             else:
-                tdlist.append((string.split(target), string.split(depends)))
+                tdlist.append((target.split(), depends.split()))
         if only_one:
             targets = reduce(lambda x, y: x+y, map(lambda p: p[0], tdlist))
             if len(targets) > 1:
@@ -2092,7 +2092,7 @@
         if SCons.Util.is_List(arg):
             return map(self.subst, arg)
         elif SCons.Util.is_String(arg):
-            return string.split(self.subst(arg))
+            return self.subst(arg).split()
         else:
             return [self.subst(arg)]
 
--- src/engine/SCons/EnvironmentTests.py (original)
+++ src/engine/SCons/EnvironmentTests.py (refactored)
@@ -25,7 +25,7 @@
 
 import copy
 import os
-import string
+#import string
 import StringIO
 import sys
 import TestCmd
@@ -132,7 +132,7 @@
 class CLVar(UserList.UserList):
     def __init__(self, seq):
         if type(seq) == type(''):
-            seq = string.split(seq)
+            seq = seq.split()
         UserList.UserList.__init__(self, seq)
     def __add__(self, other):
         return UserList.UserList.__add__(self, CLVar(other))
@@ -1124,7 +1124,7 @@
         assert s == [s1, s1, None, s3, s3], s
 
         # Verify behavior of case-insensitive suffix matches on Windows.
-        uc_suffixes = [string.upper(_) for _ in suffixes]
+        uc_suffixes = [_.upper() for _ in suffixes]
 
         env = Environment(SCANNERS = [s1, s2, s3],
                           PLATFORM = 'linux')
@@ -1233,7 +1233,7 @@
                 path = drive + path
             path = os.path.normpath(path)
             drive, path = os.path.splitdrive(path)
-            return string.lower(drive) + path
+            return drive.lower() + path
 
         env = dict.TestEnvironment(LIBS = [ 'foo', 'bar', 'baz' ],
                           LIBLINKPREFIX = 'foo',
@@ -2513,21 +2513,21 @@
                           test.workpath('sub2'),
                           test.workpath('sub3'),
                           test.workpath('sub4'),
-                        ] + string.split(env_path, os.pathsep)
+                        ] + env_path.split(os.pathsep)
 
         pathdirs_1243 = [ test.workpath('sub1'),
                           test.workpath('sub2'),
                           test.workpath('sub4'),
                           test.workpath('sub3'),
-                        ] + string.split(env_path, os.pathsep)
-
-        path = string.join(pathdirs_1234, os.pathsep)
+                        ] + env_path.split(os.pathsep)
+
+        path = os.pathsep.join(pathdirs_1234)
         env = self.TestEnvironment(ENV = {'PATH' : path})
         wi = env.WhereIs('xxx.exe')
         assert wi == test.workpath(sub3_xxx_exe), wi
         wi = env.WhereIs('xxx.exe', pathdirs_1243)
         assert wi == test.workpath(sub4_xxx_exe), wi
-        wi = env.WhereIs('xxx.exe', string.join(pathdirs_1243, os.pathsep))
+        wi = env.WhereIs('xxx.exe', os.pathsep.join(pathdirs_1243))
         assert wi == test.workpath(sub4_xxx_exe), wi
 
         wi = env.WhereIs('xxx.exe', reject = sub3_xxx_exe)
@@ -2535,13 +2535,13 @@
         wi = env.WhereIs('xxx.exe', pathdirs_1243, reject = sub3_xxx_exe)
         assert wi == test.workpath(sub4_xxx_exe), wi
 
-        path = string.join(pathdirs_1243, os.pathsep)
+        path = os.pathsep.join(pathdirs_1243)
         env = self.TestEnvironment(ENV = {'PATH' : path})
         wi = env.WhereIs('xxx.exe')
         assert wi == test.workpath(sub4_xxx_exe), wi
         wi = env.WhereIs('xxx.exe', pathdirs_1234)
         assert wi == test.workpath(sub3_xxx_exe), wi
-        wi = env.WhereIs('xxx.exe', string.join(pathdirs_1234, os.pathsep))
+        wi = env.WhereIs('xxx.exe', os.pathsep.join(pathdirs_1234))
         assert wi == test.workpath(sub3_xxx_exe), wi
 
         if sys.platform == 'win32':
@@ -2552,13 +2552,13 @@
             assert wi == test.workpath(sub4_xxx_exe), wi
 
             wi = env.WhereIs('xxx', path = pathdirs_1234, pathext = '.BAT;.EXE')
-            assert string.lower(wi) == string.lower(test.workpath(sub3_xxx_exe)), wi
+            assert wi.lower() == test.workpath(sub3_xxx_exe).lower(), wi
 
             # Test that we return a normalized path even when
             # the path contains forward slashes.
             forward_slash = test.workpath('') + '/sub3'
             wi = env.WhereIs('xxx', path = forward_slash, pathext = '.EXE')
-            assert string.lower(wi) == string.lower(test.workpath(sub3_xxx_exe)), wi
+            assert wi.lower() == test.workpath(sub3_xxx_exe).lower(), wi
 
 
 
--- src/engine/SCons/Executor.py (original)
+++ src/engine/SCons/Executor.py (refactored)
@@ -30,7 +30,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 import UserList
 
 from SCons.Debug import logInstanceCreation
@@ -408,7 +408,7 @@
         env = self.get_build_env()
         get = lambda action, t=self.get_all_targets(), s=self.get_all_sources(), e=env: \
                      action.genstring(t, s, e)
-        return string.join(map(get, self.get_action_list()), "\n")
+        return "\n".join(map(get, self.get_action_list()))
 
 
     def __str__(self):
@@ -433,7 +433,7 @@
         env = self.get_build_env()
         get = lambda action, t=self.get_all_targets(), s=self.get_all_sources(), e=env: \
                      action.get_contents(t, s, e)
-        result = string.join(map(get, self.get_action_list()), "")
+        result = "".join(map(get, self.get_action_list()))
         self._memo['get_contents'] = result
         return result
 
--- src/engine/SCons/ExecutorTests.py (original)
+++ src/engine/SCons/ExecutorTests.py (refactored)
@@ -23,7 +23,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 import sys
 import unittest
 
@@ -50,9 +50,9 @@
         for action in self.actions:
             apply(action, (target, source, env), kw)
     def genstring(self, target, source, env):
-        return string.join(['GENSTRING'] + map(str, self.actions) + target + source)
+        return ' '.join(['GENSTRING'] + map(str, self.actions) + target + source)
     def get_contents(self, target, source, env):
-        return string.join(self.actions + target + source)
+        return ' '.join(self.actions + target + source)
     def get_implicit_deps(self, target, source, env):
         return []
 
--- src/engine/SCons/PathList.py (original)
+++ src/engine/SCons/PathList.py (refactored)
@@ -33,7 +33,7 @@
 """
 
 import os
-import string
+#import string
 
 import SCons.Memoize
 import SCons.Node
@@ -98,14 +98,14 @@
         over and over for each target.
         """
         if SCons.Util.is_String(pathlist):
-            pathlist = string.split(pathlist, os.pathsep)
+            pathlist = pathlist.split(os.pathsep)
         elif not SCons.Util.is_Sequence(pathlist):
             pathlist = [pathlist]
 
         pl = []
         for p in pathlist:
             try:
-                index = string.find(p, '$')
+                index = p.find('$')
             except (AttributeError, TypeError):
                 type = TYPE_OBJECT
             else:
--- src/engine/SCons/SConf.py (original)
+++ src/engine/SCons/SConf.py (refactored)
@@ -30,7 +30,7 @@
 
 import os
 import re
-import string
+#import string
 import StringIO
 import sys
 import traceback
@@ -96,7 +96,7 @@
 
 def _createConfigH(target, source, env):
     t = open(str(target[0]), "w")
-    defname = re.sub('[^A-Za-z0-9_]', '_', string.upper(str(target[0])))
+    defname = re.sub('[^A-Za-z0-9_]', '_', str(target[0]).upper())
     t.write("""#ifndef %(DEFNAME)s_SEEN
 #define %(DEFNAME)s_SEEN
 
@@ -153,8 +153,7 @@
     fd.close()
 def _stringSource( target, source, env ):
     return (str(target[0]) + ' <-\n  |' +
-            string.replace( source[0].get_contents(),
-                            '\n', "\n  |" ) )
+            source[0].get_contents().replace( '\n', "\n  |" ) )
 
 # python 2.2 introduces types.BooleanType
 BooleanTypes = [types.IntType]
@@ -222,8 +221,7 @@
               "The stored build information has an unexpected class: %s" % bi.__class__)
         else:
             self.display("The original builder output was:\n" +
-                         string.replace("  |" + str(bi.string),
-                                        "\n", "\n  |"))
+                         ("  |" + str(bi.string)).replace("\n", "\n  |"))
 
     def failed(self):
         # check, if the reason was a ConfigureDryRunError or a
@@ -465,7 +463,7 @@
         lines.append(define_str)
         lines.append('')
 
-        self.config_h_text = self.config_h_text + string.join(lines, '\n')
+        self.config_h_text = self.config_h_text + '\n'.join(lines)
 
     def BuildNodes(self, nodes):
         """
@@ -933,7 +931,7 @@
     for s in headers:
         l.append("#include %s%s%s\n"
                  % (include_quotes[0], s, include_quotes[1]))
-    return string.join(l, ''), lastHeader
+    return ''.join(l), lastHeader
 
 def CheckHeader(context, header, include_quotes = '<>', language = None):
     """
--- src/engine/SCons/SConfTests.py (original)
+++ src/engine/SCons/SConfTests.py (refactored)
@@ -25,7 +25,7 @@
 
 import os
 import re
-import string
+#import string
 import StringIO
 import sys
 from types import *
@@ -60,7 +60,7 @@
         import SCons.SConsign
         SCons.SConsign.write() # simulate normal scons-finish
         for n in sys.modules.keys():
-            if string.split(n, '.')[0] == 'SCons' and n[:12] != 'SCons.compat':
+            if n.split('.')[0] == 'SCons' and n[:12] != 'SCons.compat':
                 m = sys.modules[n]
                 if type(m) is ModuleType:
                     # if this is really a scons module, clear its namespace
--- src/engine/SCons/Subst.py (original)
+++ src/engine/SCons/Subst.py (refactored)
@@ -30,7 +30,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import re
-import string
+#import string
 import types
 import UserList
 import UserString
@@ -399,7 +399,7 @@
     handles separating command lines into lists of arguments, so see
     that function if that's what you're looking for.
     """
-    if type(strSubst) == types.StringType and string.find(strSubst, '$') < 0:
+    if type(strSubst) == types.StringType and strSubst.find('$') < 0:
         return strSubst
 
     class StringSubber:
@@ -438,7 +438,7 @@
                     return s
                 else:
                     key = s[1:]
-                    if key[0] == '{' or string.find(key, '.') >= 0:
+                    if key[0] == '{' or key.find('.') >= 0:
                         if key[0] == '{':
                             key = key[1:-1]
                         try:
@@ -472,7 +472,7 @@
                     # are probably more the exception than the norm,
                     # so it should be tolerable for now.
                     lv = lvars.copy()
-                    var = string.split(key, '.')[0]
+                    var = key.split('.')[0]
                     lv[var] = ''
                     return self.substitute(s, lv)
             elif is_Sequence(s):
@@ -523,7 +523,7 @@
                     if len(result) == 1:
                         result = result[0]
                     else:
-                        result = string.join(map(str, result), '')
+                        result = ''.join(map(str, result))
                 return result
             else:
                 return self.expand(args, lvars)
@@ -571,7 +571,7 @@
         if mode != SUBST_RAW:
             # Compress strings of white space characters into
             # a single space.
-            result = string.strip(_space_sep.sub(' ', result))
+            result = _space_sep.sub(' ', result).strip()
     elif is_Sequence(result):
         remove = _list_remove[mode]
         if remove:
@@ -653,7 +653,7 @@
                     self.close_strip('$)')
                 else:
                     key = s[1:]
-                    if key[0] == '{' or string.find(key, '.') >= 0:
+                    if key[0] == '{' or key.find('.') >= 0:
                         if key[0] == '{':
                             key = key[1:-1]
                         try:
@@ -680,7 +680,7 @@
                     # string for the value of the variable name
                     # we just expanded.
                     lv = lvars.copy()
-                    var = string.split(key, '.')[0]
+                    var = key.split('.')[0]
                     lv[var] = ''
                     self.substitute(s, lv, 0)
                     self.this_word()
@@ -870,7 +870,7 @@
 
     We do this with some straightforward, brute-force code here...
     """
-    if type(strSubst) == types.StringType and string.find(strSubst, '$') < 0:
+    if type(strSubst) == types.StringType and strSubst.find('$') < 0:
         return strSubst
 
     matchlist = ['$' + key, '${' + key + '}']
@@ -880,7 +880,7 @@
         if a in matchlist:
             a = val
         if is_Sequence(a):
-            return string.join(map(str, a))
+            return ' '.join(map(str, a))
         else:
             return str(a)
 
--- src/engine/SCons/SubstTests.py (original)
+++ src/engine/SCons/SubstTests.py (refactored)
@@ -25,7 +25,7 @@
 
 import os
 import os.path
-import string
+#import string
 import StringIO
 import sys
 import types
@@ -101,7 +101,7 @@
         return str
 else:
     def cvt(str):
-        return string.replace(str, '/', os.sep)
+        return str.replace('/', os.sep)
 
 class SubstTestCase(unittest.TestCase):
     class MyNode(DummyNode):
--- src/engine/SCons/Taskmaster.py (original)
+++ src/engine/SCons/Taskmaster.py (refactored)
@@ -52,7 +52,7 @@
 
 from itertools import chain
 import operator
-import string
+#import string
 import sys
 import traceback
 
@@ -1017,7 +1017,7 @@
         desc = 'Found dependency cycle(s):\n'
         for node, cycle in nclist:
             if cycle:
-                desc = desc + "  " + string.join(map(str, cycle), " -> ") + "\n"
+                desc = desc + "  " + " -> ".join(map(str, cycle)) + "\n"
             else:
                 desc = desc + \
                     "  Internal Error: no cycle found for node %s (%s) in state %s\n" %  \
--- src/engine/SCons/Util.py (original)
+++ src/engine/SCons/Util.py (refactored)
@@ -33,7 +33,7 @@
 import os
 import os.path
 import re
-import string
+#import string
 import sys
 import types
 
@@ -60,10 +60,10 @@
     _altsep = '/'
 if _altsep:
     def rightmost_separator(path, sep):
-        return max(string.rfind(path, sep), string.rfind(path, _altsep))
+        return max(path.rfind(sep), path.rfind(_altsep))
 else:
     def rightmost_separator(path, sep):
-        return string.rfind(path, sep)
+        return path.rfind(sep)
 
 # First two from the Python Cookbook, just for completeness.
 # (Yeah, yeah, YAGNI...)
@@ -88,7 +88,7 @@
 def splitext(path):
     "Same as os.path.splitext() but faster."
     sep = rightmost_separator(path, os.sep)
-    dot = string.rfind(path, '.')
+    dot = path.rfind('.')
     # An ext is only real if it has at least one non-digit char
     if dot > sep and not containsOnly(path[dot:], "0123456789."):
         return path[:dot],path[dot:]
@@ -104,7 +104,7 @@
     """
     drive, rest = os.path.splitdrive(path)
     if drive:
-        path = string.upper(drive) + rest
+        path = drive.upper() + rest
     return path
 
 class NodeList(UserList):
@@ -121,7 +121,7 @@
         return len(self.data) != 0
 
     def __str__(self):
-        return string.join(map(str, self.data))
+        return ' '.join(map(str, self.data))
 
     def __iter__(self):
         return iter(self.data)
@@ -278,10 +278,10 @@
     children = child_func(root)
 
     if prune and visited.has_key(rname) and children:
-        print string.join(tags + margins + ['+-[', rname, ']'], '')
+        print ''.join(tags + margins + ['+-[', rname, ']'])
         return
 
-    print string.join(tags + margins + ['+-', rname], '')
+    print ''.join(tags + margins + ['+-', rname])
 
     visited[rname] = 1
 
@@ -426,7 +426,7 @@
 
     def to_String_for_subst(s):
         if is_Sequence( s ):
-            return string.join( map(to_String_for_subst, s) )
+            return ' '.join( map(to_String_for_subst, s) )
 
         return to_String( s )
 
@@ -554,7 +554,7 @@
             l = []
             for e in s:
                 l.append(to_String_for_subst(e))
-            return string.join( s )
+            return ' '.join( s )
         elif isinstance(s, UserString):
             # s.data can only be either a unicode or a regular
             # string. Please see the UserString initializer.
@@ -766,16 +766,16 @@
             except KeyError:
                 return None
         if is_String(path):
-            path = string.split(path, os.pathsep)
+            path = path.split(os.pathsep)
         if pathext is None:
             try:
                 pathext = os.environ['PATHEXT']
             except KeyError:
                 pathext = '.COM;.EXE;.BAT;.CMD'
         if is_String(pathext):
-            pathext = string.split(pathext, os.pathsep)
+            pathext = pathext.split(os.pathsep)
         for ext in pathext:
-            if string.lower(ext) == string.lower(file[-len(ext):]):
+            if ext.lower() == file[-len(ext):].lower():
                 pathext = ['']
                 break
         if not is_List(reject) and not is_Tuple(reject):
@@ -801,11 +801,11 @@
             except KeyError:
                 return None
         if is_String(path):
-            path = string.split(path, os.pathsep)
+            path = path.split(os.pathsep)
         if pathext is None:
             pathext = ['.exe', '.cmd']
         for ext in pathext:
-            if string.lower(ext) == string.lower(file[-len(ext):]):
+            if ext.lower() == file[-len(ext):].lower():
                 pathext = ['']
                 break
         if not is_List(reject) and not is_Tuple(reject):
@@ -832,7 +832,7 @@
             except KeyError:
                 return None
         if is_String(path):
-            path = string.split(path, os.pathsep)
+            path = path.split(os.pathsep)
         if not is_List(reject) and not is_Tuple(reject):
             reject = [reject]
         for d in path:
@@ -881,11 +881,11 @@
     is_list = 1
     paths = orig
     if not is_List(orig) and not is_Tuple(orig):
-        paths = string.split(paths, sep)
+        paths = paths.split(sep)
         is_list = 0
 
     if is_String(newpath):
-        newpaths = string.split(newpath, sep)
+        newpaths = newpath.split(sep)
     elif not is_List(newpath) and not is_Tuple(newpath):
         newpaths = [ newpath ]  # might be a Dir
     else:
@@ -934,7 +934,7 @@
     if is_list:
         return paths
     else:
-        return string.join(paths, sep)
+        return sep.join(paths)
 
 def AppendPath(oldpath, newpath, sep = os.pathsep, 
                delete_existing=1, canonicalize=None):
@@ -962,11 +962,11 @@
     is_list = 1
     paths = orig
     if not is_List(orig) and not is_Tuple(orig):
-        paths = string.split(paths, sep)
+        paths = paths.split(sep)
         is_list = 0
 
     if is_String(newpath):
-        newpaths = string.split(newpath, sep)
+        newpaths = newpath.split(sep)
     elif not is_List(newpath) and not is_Tuple(newpath):
         newpaths = [ newpath ]  # might be a Dir
     else:
@@ -1015,13 +1015,13 @@
     if is_list:
         return paths
     else:
-        return string.join(paths, sep)
+        return sep.join(paths)
 
 if sys.platform == 'cygwin':
     def get_native_path(path):
         """Transforms an absolute path into a native path for the system.  In
         Cygwin, this converts from a Cygwin path to a Windows one."""
-        return string.replace(os.popen('cygpath -w ' + path).read(), '\n', '')
+        return os.popen('cygpath -w ' + path).read().replace('\n', '')
 else:
     def get_native_path(path):
         """Transforms an absolute path into a native path for the system.
@@ -1034,7 +1034,7 @@
     if is_List(arg) or is_Tuple(arg):
         return arg
     elif is_String(arg):
-        return string.split(arg)
+        return arg.split()
     else:
         return [arg]
 
@@ -1057,7 +1057,7 @@
     def __coerce__(self, other):
         return (self, CLVar(other))
     def __str__(self):
-        return string.join(self.data)
+        return ' '.join(self.data)
 
 # A dictionary that preserves the order in which items are added.
 # Submitted by David Benjamin to ActiveState's Python Cookbook web site:
@@ -1304,7 +1304,7 @@
             else:
                 result.append(line)
                 break
-        return string.join(result, '')
+        return ''.join(result)
 
     def readlines(self):
         result = []
@@ -1568,7 +1568,7 @@
     if len(signatures) == 1:
         return signatures[0]
     else:
-        return MD5signature(string.join(signatures, ', '))
+        return MD5signature(', '.join(signatures))
 
 
 
--- src/engine/SCons/UtilTests.py (original)
+++ src/engine/SCons/UtilTests.py (refactored)
@@ -25,7 +25,7 @@
 
 import os
 import os.path
-import string
+#import string
 import StringIO
 import sys
 import types
@@ -112,9 +112,9 @@
       +-windows.h
 """
 
-        lines = string.split(expect, '\n')[:-1]
+        lines = expect.split('\n')[:-1]
         lines = map(lambda l: '[E BSPACN ]'+l, lines)
-        withtags = string.join(lines, '\n') + '\n'
+        withtags = '\n'.join(lines) + '\n'
 
         return foo, expect, withtags
 
@@ -137,12 +137,12 @@
 """
 
         if not prune:
-            expect = string.replace(expect, '[', '')
-            expect = string.replace(expect, ']', '')
-
-        lines = string.split(expect, '\n')[:-1]
+            expect = expect.replace('[', '')
+            expect = expect.replace(']', '')
+
+        lines = expect.split('\n')[:-1]
         lines = map(lambda l: '[E BSPACN ]'+l, lines)
-        withtags = string.join(lines, '\n') + '\n'
+        withtags = '\n'.join(lines) + '\n'
 
         return blat_o, expect, withtags
 
@@ -333,20 +333,20 @@
                               test.workpath('sub2'),
                               test.workpath('sub3'),
                               test.workpath('sub4'),
-                            ] + string.split(env_path, os.pathsep)
+                            ] + env_path.split(os.pathsep)
 
             pathdirs_1243 = [ test.workpath('sub1'),
                               test.workpath('sub2'),
                               test.workpath('sub4'),
                               test.workpath('sub3'),
-                            ] + string.split(env_path, os.pathsep)
-
-            os.environ['PATH'] = string.join(pathdirs_1234, os.pathsep)
+                            ] + env_path.split(os.pathsep)
+
+            os.environ['PATH'] = os.pathsep.join(pathdirs_1234)
             wi = WhereIs('xxx.exe')
             assert wi == test.workpath(sub3_xxx_exe), wi
             wi = WhereIs('xxx.exe', pathdirs_1243)
             assert wi == test.workpath(sub4_xxx_exe), wi
-            wi = WhereIs('xxx.exe', string.join(pathdirs_1243, os.pathsep))
+            wi = WhereIs('xxx.exe', os.pathsep.join(pathdirs_1243))
             assert wi == test.workpath(sub4_xxx_exe), wi
 
             wi = WhereIs('xxx.exe',reject = sub3_xxx_exe)
@@ -354,12 +354,12 @@
             wi = WhereIs('xxx.exe', pathdirs_1243, reject = sub3_xxx_exe)
             assert wi == test.workpath(sub4_xxx_exe), wi
 
-            os.environ['PATH'] = string.join(pathdirs_1243, os.pathsep)
+            os.environ['PATH'] = os.pathsep.join(pathdirs_1243)
             wi = WhereIs('xxx.exe')
             assert wi == test.workpath(sub4_xxx_exe), wi
             wi = WhereIs('xxx.exe', pathdirs_1234)
             assert wi == test.workpath(sub3_xxx_exe), wi
-            wi = WhereIs('xxx.exe', string.join(pathdirs_1234, os.pathsep))
+            wi = WhereIs('xxx.exe', os.pathsep.join(pathdirs_1234))
             assert wi == test.workpath(sub3_xxx_exe), wi
 
             if sys.platform == 'win32':
@@ -370,13 +370,13 @@
                 assert wi == test.workpath(sub4_xxx_exe), wi
 
                 wi = WhereIs('xxx', path = pathdirs_1234, pathext = '.BAT;.EXE')
-                assert string.lower(wi) == string.lower(test.workpath(sub3_xxx_exe)), wi
+                assert wi.lower() == test.workpath(sub3_xxx_exe).lower(), wi
 
                 # Test that we return a normalized path even when
                 # the path contains forward slashes.
                 forward_slash = test.workpath('') + '/sub3'
                 wi = WhereIs('xxx', path = forward_slash, pathext = '.EXE')
-                assert string.lower(wi) == string.lower(test.workpath(sub3_xxx_exe)), wi
+                assert wi.lower() == test.workpath(sub3_xxx_exe).lower(), wi
 
             del os.environ['PATH']
             wi = WhereIs('xxx.exe')
--- src/engine/SCons/Warnings.py (original)
+++ src/engine/SCons/Warnings.py (refactored)
@@ -29,7 +29,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 import sys
 
 import SCons.Errors
@@ -194,11 +194,11 @@
         if s[:5] == "scons":
             return "SCons" + s[5:]
         else:
-            return string.capitalize(s)
+            return s.capitalize()
 
     for arg in arguments:
 
-        elems = string.split(string.lower(arg), '-')
+        elems = arg.lower().split('-')
         enable = 1
         if elems[0] == 'no':
             enable = 0
@@ -207,7 +207,7 @@
         if len(elems) == 1 and elems[0] == 'all':
             class_name = "Warning"
         else:
-            class_name = string.join(map(_capitalize, elems), '') + "Warning"
+            class_name = ''.join(map(_capitalize, elems)) + "Warning"
         try:
             clazz = globals()[class_name]
         except KeyError:
--- src/engine/SCons/cpp.py (original)
+++ src/engine/SCons/cpp.py (refactored)
@@ -34,7 +34,7 @@
 
 import os
 import re
-import string
+#import string
 
 #
 # First "subsystem" of regular expressions that we set up:
@@ -99,7 +99,7 @@
 # a list of tuples, one for each preprocessor line.  The preprocessor
 # directive will be the first element in each tuple, and the rest of
 # the line will be the second element.
-e = '^\s*#\s*(' + string.join(l, '|') + ')(.*)$'
+e = '^\s*#\s*(' + '|'.join(l) + ')(.*)$'
 
 # And last but not least, compile the expression.
 CPP_Expression = re.compile(e, re.M)
@@ -139,7 +139,7 @@
 
 # Turn the list of keys into one regular expression that will allow us
 # to substitute all of the operators at once.
-expr = string.join(map(re.escape, l), '|')
+expr = '|'.join(map(re.escape, l))
 
 # ...and compile the expression.
 CPP_to_Python_Ops_Expression = re.compile(expr)
@@ -192,7 +192,7 @@
         self.name = name
         self.args = function_arg_separator.split(args)
         try:
-            expansion = string.split(expansion, '##')
+            expansion = expansion.split('##')
         except (AttributeError, TypeError):
             # Python 1.5 throws TypeError if "expansion" isn't a string,
             # later versions throw AttributeError.
@@ -218,7 +218,7 @@
             if not s in self.args:
                 s = repr(s)
             parts.append(s)
-        statement = string.join(parts, ' + ')
+        statement = ' + '.join(parts)
 
         return eval(statement, globals(), locals)
 
@@ -363,7 +363,7 @@
         eval()ing it in the C preprocessor namespace we use to
         track #define values.
         """
-        t = CPP_to_Python(string.join(t[1:]))
+        t = CPP_to_Python(' '.join(t[1:]))
         try: return eval(t, self.cpp_namespace)
         except (NameError, TypeError): return 0
 
--- src/engine/SCons/cppTests.py (original)
+++ src/engine/SCons/cppTests.py (refactored)
@@ -23,7 +23,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 import sys
 import unittest
 
@@ -635,7 +635,7 @@
 
     def strip_initial_spaces(self, s):
         #lines = s.split('\n')
-        lines = string.split(s, '\n')
+        lines = s.split('\n')
         spaces = re.match(' *', lines[0]).group(0)
         def strip_spaces(l, spaces=spaces):
             #if l.startswith(spaces):
@@ -643,7 +643,7 @@
                 l = l[len(spaces):]
             return l
         #return '\n'.join([ strip_spaces(l) for l in lines ])
-        return string.join(map(strip_spaces, lines), '\n')
+        return '\n'.join(map(strip_spaces, lines))
 
     def write(self, file, contents):
         open(file, 'w').write(self.strip_initial_spaces(contents))
--- src/engine/SCons/Node/Alias.py (original)
+++ src/engine/SCons/Node/Alias.py (refactored)
@@ -32,7 +32,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 import UserDict
 
 import SCons.Errors
@@ -96,7 +96,7 @@
         """The contents of an alias is the concatenation
         of the content signatures of all its sources."""
         childsigs = map(lambda n: n.get_csig(), self.children())
-        return string.join(childsigs, '')
+        return ''.join(childsigs)
 
     def sconsign(self):
         """An Alias is not recorded in .sconsign files"""
--- src/engine/SCons/Node/FS.py (original)
+++ src/engine/SCons/Node/FS.py (refactored)
@@ -43,7 +43,7 @@
 import re
 import shutil
 import stat
-import string
+#import string
 import sys
 import time
 
@@ -260,7 +260,7 @@
                                            "should be in Valid_Duplicates")
     global Link_Funcs
     Link_Funcs = []
-    for func in string.split(duplicate,'-'):
+    for func in duplicate.split('-'):
         if link_dict[func]:
             Link_Funcs.append(link_dict[func])
 
@@ -373,7 +373,7 @@
         return x
 else:
     def _my_normcase(x):
-        return string.upper(x)
+        return x.upper()
 
 
 
@@ -497,7 +497,7 @@
             return self
         else:
             entry = self.get()
-            r = string.replace(entry.get_path(), os.sep, '/')
+            r = entry.get_path().replace(os.sep, '/')
             return SCons.Subst.SpecialAttrWrapper(r, entry.name + "_posix")
 
     def __get_windows_path(self):
@@ -507,7 +507,7 @@
             return self
         else:
             entry = self.get()
-            r = string.replace(entry.get_path(), os.sep, '\\')
+            r = entry.get_path().replace(os.sep, '\\')
             return SCons.Subst.SpecialAttrWrapper(r, entry.name + "_windows")
 
     def __get_srcnode(self):
@@ -754,7 +754,7 @@
         except ValueError: pass
         else: path_elems = path_elems[i+1:]
         path_elems = map(lambda n: n.name, path_elems)
-        return string.join(path_elems, os.sep)
+        return os.sep.join(path_elems)
 
     def set_src_builder(self, builder):
         """Set the source code builder for this node."""
@@ -1249,7 +1249,7 @@
             root = directory.root
 
         if os.sep != '/':
-            p = string.replace(p, os.sep, '/')
+            p = p.replace(os.sep, '/')
         return root._lookup_abs(p, fsclass, create)
 
     def Entry(self, name, directory = None, create = 1):
@@ -1332,7 +1332,7 @@
             tail = [dir.name] + tail
             dir = dir.up()
         if targets:
-            message = fmt % string.join(map(str, targets))
+            message = fmt % ' '.join(map(str, targets))
         return targets, message
 
     def Glob(self, pathname, ondisk=True, source=True, strings=False, cwd=None):
@@ -1576,7 +1576,7 @@
             path_elems = ['..'] * (len(self.path_elements) - i) \
                          + map(lambda n: n.name, other.path_elements[i:])
              
-            result = string.join(path_elems, os.sep)
+            result = os.sep.join(path_elems)
 
         memo_dict[other] = result
 
@@ -1687,7 +1687,7 @@
         sorted_children.sort(name_cmp)
         for node in sorted_children:
             contents.append('%s %s\n' % (node.get_csig(), node.name))
-        return string.join(contents, '')
+        return ''.join(contents)
 
     def get_csig(self):
         """Compute the content signature for Directory nodes. In
@@ -2200,7 +2200,7 @@
                 except AttributeError:
                     s = str(n)
                 else:
-                    s = string.replace(s, os.sep, '/')
+                    s = s.replace(os.sep, '/')
                 return s
         for attr in ['bsources', 'bdepends', 'bimplicit']:
             try:
@@ -2249,9 +2249,9 @@
         bkidsigs = self.bsourcesigs + self.bdependsigs + self.bimplicitsigs
         for bkid, bkidsig in izip(bkids, bkidsigs):
             result.append(str(bkid) + ': ' +
-                          string.join(bkidsig.format(names=names), ' '))
+                          ' '.join(bkidsig.format(names=names)))
         result.append('%s [%s]' % (self.bactsig, self.bact))
-        return string.join(result, '\n')
+        return '\n'.join(result)
 
 class File(Base):
     """A class for files in a file system.
--- src/engine/SCons/Node/FSTests.py (original)
+++ src/engine/SCons/Node/FSTests.py (refactored)
@@ -25,7 +25,7 @@
 
 import os
 import os.path
-import string
+#import string
 import sys
 import time
 import unittest
@@ -445,7 +445,7 @@
                 self.have['copy'] = copy
 
                 self.links_to_be_called = []
-                for link in string.split(self.duplicate, '-'):
+                for link in self.duplicate.split('-'):
                     if self.have[link]:
                         self.links_to_be_called.append(link)
 
@@ -817,7 +817,7 @@
             'actionsig [action]',
         ]
 
-        expect = string.join(expect_lines, '\n')
+        expect = '\n'.join(expect_lines)
         format = bi1.format()
         assert format == expect, (repr(expect), repr(format))
 
@@ -921,12 +921,12 @@
         drive, path = os.path.splitdrive(os.getcwd())
 
         def _do_Dir_test(lpath, path_, abspath_, up_path_, sep, fileSys=fs, drive=drive):
-            dir = fileSys.Dir(string.replace(lpath, '/', sep))
+            dir = fileSys.Dir(lpath.replace('/', sep))
 
             if os.sep != '/':
-                path_ = string.replace(path_, '/', os.sep)
-                abspath_ = string.replace(abspath_, '/', os.sep)
-                up_path_ = string.replace(up_path_, '/', os.sep)
+                path_ = path_.replace('/', os.sep)
+                abspath_ = abspath_.replace('/', os.sep)
+                up_path_ = up_path_.replace('/', os.sep)
 
             def strip_slash(p, drive=drive):
                 if p[-1] == os.sep and len(p) > 1:
@@ -937,7 +937,7 @@
             path = strip_slash(path_)
             abspath = strip_slash(abspath_)
             up_path = strip_slash(up_path_)
-            name = string.split(abspath, os.sep)[-1]
+            name = abspath.split(os.sep)[-1]
 
             assert dir.name == name, \
                    "dir.name %s != expected name %s" % \
@@ -978,7 +978,7 @@
             Dir_test('#',           './',          sub_dir,           sub)
 
             try:
-                f2 = fs.File(string.join(['f1', 'f2'], sep), directory = d1)
+                f2 = fs.File(sep.join(['f1', 'f2']), directory = d1)
             except TypeError, x:
                 assert str(x) == ("Tried to lookup File '%s' as a Dir." %
                                   d1_f1), x
@@ -986,7 +986,7 @@
                 raise
 
             try:
-                dir = fs.Dir(string.join(['d1', 'f1'], sep))
+                dir = fs.Dir(sep.join(['d1', 'f1']))
             except TypeError, x:
                 assert str(x) == ("Tried to lookup File '%s' as a Dir." %
                                   d1_f1), x
@@ -1051,7 +1051,7 @@
         assert built_it
 
         def match(path, expect):
-            expect = string.replace(expect, '/', os.sep)
+            expect = expect.replace('/', os.sep)
             assert path == expect, "path %s != expected %s" % (path, expect)
 
         e1 = fs.Entry("d1")
@@ -1466,11 +1466,11 @@
             seps = seps + ['/']
 
         def _do_Dir_test(lpath, path_, up_path_, sep, fileSys=fs):
-            dir = fileSys.Dir(string.replace(lpath, '/', sep))
+            dir = fileSys.Dir(lpath.replace('/', sep))
 
             if os.sep != '/':
-                path_ = string.replace(path_, '/', os.sep)
-                up_path_ = string.replace(up_path_, '/', os.sep)
+                path_ = path_.replace('/', os.sep)
+                up_path_ = up_path_.replace('/', os.sep)
 
             def strip_slash(p):
                 if p[-1] == os.sep and len(p) > 3:
@@ -1478,7 +1478,7 @@
                 return p
             path = strip_slash(path_)
             up_path = strip_slash(up_path_)
-            name = string.split(path, os.sep)[-1]
+            name = path.split(os.sep)[-1]
 
             assert dir.name == name, \
                    "dir.name %s != expected name %s" % \
@@ -1577,7 +1577,7 @@
 
         d1 = fs.Dir('d1')
         d2 = d1.Dir('d2')
-        dirs = string.split(os.path.normpath(d2.abspath), os.sep)
+        dirs = os.path.normpath(d2.abspath).split(os.sep)
         above_path = apply(os.path.join, ['..']*len(dirs) + ['above'])
         above = d2.Dir(above_path)
 
@@ -1757,7 +1757,7 @@
         s = self.fs.Dir(os.path.join('d', 'sub'))
 
         #TODO(1.5) files = d.get_contents().split('\n')
-        files = string.split(d.get_contents(), '\n')
+        files = d.get_contents().split('\n')
 
         assert e.get_contents() == '', e.get_contents()
         assert e.get_text_contents() == '', e.get_text_contents()
--- src/engine/SCons/Node/NodeTests.py (original)
+++ src/engine/SCons/Node/NodeTests.py (refactored)
@@ -25,7 +25,7 @@
 
 import os
 import re
-import string
+#import string
 import sys
 import types
 import unittest
@@ -1293,7 +1293,7 @@
         # New-style classes report as "object"; classic classes report
         # as "instance"...
         r = re.sub("object", "instance", r)
-        l = string.join(["<MyNode instance at 0x>"]*3, ", ")
+        l = ", ".join(["<MyNode instance at 0x>"]*3)
         assert r == '[%s]' % l, r
 
 
--- src/engine/SCons/Node/__init__.py (original)
+++ src/engine/SCons/Node/__init__.py (refactored)
@@ -46,7 +46,7 @@
 
 import copy
 from itertools import chain, izip
-import string
+#import string
 import UserList
 
 from SCons.Debug import logInstanceCreation
@@ -57,7 +57,7 @@
 from SCons.Debug import Trace
 
 def classname(obj):
-    return string.split(str(obj.__class__), '.')[-1]
+    return str(obj.__class__).split('.')[-1]
 
 # Node states
 #
@@ -1234,9 +1234,9 @@
 
         if len(lines) == 0:
             def fmt_with_title(title, strlines):
-                lines = string.split(strlines, '\n')
+                lines = strlines.split('\n')
                 sep = '\n' + ' '*(15 + len(title))
-                return ' '*15 + title + string.join(lines, sep) + '\n'
+                return ' '*15 + title + sep.join(lines) + '\n'
             if old.bactsig != new.bactsig:
                 if old.bact == new.bact:
                     lines.append("the contents of the build action changed\n" +
@@ -1254,7 +1254,7 @@
             return "%s %s"  % (preamble, lines[0])
         else:
             lines = ["%s:\n" % preamble] + lines
-            return string.join(lines, ' '*11)
+            return ( ' '*11).join(lines)
 
 try:
     [].extend(UserList.UserList([]))
--- src/engine/SCons/Platform/__init__.py (original)
+++ src/engine/SCons/Platform/__init__.py (refactored)
@@ -48,7 +48,7 @@
 
 import imp
 import os
-import string
+#import string
 import sys
 import tempfile
 
@@ -69,15 +69,15 @@
     if osname == 'posix':
         if sys.platform == 'cygwin':
             return 'cygwin'
-        elif string.find(sys.platform, 'irix') != -1:
+        elif sys.platform.find('irix') != -1:
             return 'irix'
-        elif string.find(sys.platform, 'sunos') != -1:
+        elif sys.platform.find('sunos') != -1:
             return 'sunos'
-        elif string.find(sys.platform, 'hp-ux') != -1:
+        elif sys.platform.find('hp-ux') != -1:
             return 'hpux'
-        elif string.find(sys.platform, 'aix') != -1:
+        elif sys.platform.find('aix') != -1:
             return 'aix'
-        elif string.find(sys.platform, 'darwin') != -1:
+        elif sys.platform.find('darwin') != -1:
             return 'darwin'
         else:
             return 'posix'
@@ -184,7 +184,7 @@
         if env['SHELL'] and env['SHELL'] == 'sh':
             # The sh shell will try to escape the backslashes in the
             # path, so unescape them.
-            native_tmp = string.replace(native_tmp, '\\', r'\\\\')
+            native_tmp = native_tmp.replace('\\', r'\\\\')
             # In Cygwin, we want to use rm to delete the temporary
             # file, because del does not exist in the sh shell.
             rm = env.Detect('rm') or 'del'
@@ -199,7 +199,7 @@
             prefix = '@'
 
         args = map(SCons.Subst.quote_spaces, cmd[1:])
-        os.write(fd, string.join(args, " ") + "\n")
+        os.write(fd, " ".join(args) + "\n")
         os.close(fd)
         # XXX Using the SCons.Action.print_actions value directly
         # like this is bogus, but expedient.  This class should
@@ -218,7 +218,7 @@
         # reach into SCons.Action directly.
         if SCons.Action.print_actions:
             print("Using tempfile "+native_tmp+" for command line:\n"+
-                  str(cmd[0]) + " " + string.join(args," "))
+                  str(cmd[0]) + " " + " ".join(args))
         return [ cmd[0], prefix + native_tmp + '\n' + rm, native_tmp ]
     
 def Platform(name = platform_default()):
--- src/engine/SCons/Platform/aix.py (original)
+++ src/engine/SCons/Platform/aix.py (refactored)
@@ -33,7 +33,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import posix
 
@@ -51,9 +51,9 @@
         cmd = "lslpp -fc " + package + " 2>/dev/null | egrep '" + xlc + "([^-_a-zA-Z0-9].*)?$'"
         line = os.popen(cmd).readline()
         if line:
-            v, p = string.split(line, ':')[1:3]
-            xlcVersion = string.split(v)[1]
-            xlcPath = string.split(p)[0]
+            v, p = line.split(':')[1:3]
+            xlcVersion = v.split()[1]
+            xlcPath = p.split()[0]
             xlcPath = xlcPath[:xlcPath.rindex('/')]
             break
     return (xlcPath, xlc, xlc_r, xlcVersion)
--- src/engine/SCons/Platform/posix.py (original)
+++ src/engine/SCons/Platform/posix.py (refactored)
@@ -35,7 +35,7 @@
 import errno
 import os
 import os.path
-import string
+#import string
 import subprocess
 import sys
 import select
@@ -53,14 +53,14 @@
     slash = '\\'
     special = '"$()'
 
-    arg = string.replace(arg, slash, slash+slash)
+    arg = arg.replace(slash, slash+slash)
     for c in special:
-        arg = string.replace(arg, c, slash+c)
+        arg = arg.replace(c, slash+c)
 
     return '"' + arg + '"'
 
 def exec_system(l, env):
-    stat = os.system(string.join(l))
+    stat = os.system(' '.join(l))
     if stat & 0xff:
         return stat | 0x80
     return stat >> 8
@@ -90,22 +90,22 @@
         return stat >> 8
 
 def _get_env_command(sh, escape, cmd, args, env):
-    s = string.join(args)
+    s = ' '.join(args)
     if env:
         l = ['env', '-'] + \
             map(lambda t, e=escape: e(t[0])+'='+e(t[1]), env.items()) + \
             [sh, '-c', escape(s)]
-        s = string.join(l)
+        s = ' '.join(l)
     return s
 
 def env_spawn(sh, escape, cmd, args, env):
     return exec_system([_get_env_command( sh, escape, cmd, args, env)], env)
 
 def spawnvpe_spawn(sh, escape, cmd, args, env):
-    return exec_spawnvpe([sh, '-c', string.join(args)], env)
+    return exec_spawnvpe([sh, '-c', ' '.join(args)], env)
 
 def fork_spawn(sh, escape, cmd, args, env):
-    return exec_fork([sh, '-c', string.join(args)], env)
+    return exec_fork([sh, '-c', ' '.join(args)], env)
 
 def process_cmd_output(cmd_stdout, cmd_stderr, stdout, stderr):
     stdout_eof = stderr_eof = 0
@@ -131,7 +131,7 @@
                 raise
 
 def exec_popen3(l, env, stdout, stderr):
-    proc = subprocess.Popen(string.join(l),
+    proc = subprocess.Popen(' '.join(l),
                             stdout=stdout,
                             stderr=stderr,
                             shell=True)
@@ -198,7 +198,7 @@
 def piped_fork_spawn(sh, escape, cmd, args, env, stdout, stderr):
     # spawn using fork / exec and providing a pipe for the command's
     # stdout / stderr stream
-    return exec_piped_fork([sh, '-c', string.join(args)],
+    return exec_piped_fork([sh, '-c', ' '.join(args)],
                            env, stdout, stderr)
 
 
--- src/engine/SCons/Platform/win32.py (original)
+++ src/engine/SCons/Platform/win32.py (refactored)
@@ -34,7 +34,7 @@
 
 import os
 import os.path
-import string
+#import string
 import sys
 import tempfile
 
@@ -109,11 +109,11 @@
         stderrRedirected = 0
         for arg in args:
             # are there more possibilities to redirect stdout ?
-            if (string.find( arg, ">", 0, 1 ) != -1 or
-                string.find( arg, "1>", 0, 2 ) != -1):
+            if (arg.find( ">", 0, 1 ) != -1 or
+                arg.find( "1>", 0, 2 ) != -1):
                 stdoutRedirected = 1
             # are there more possibilities to redirect stderr ?
-            if string.find( arg, "2>", 0, 2 ) != -1:
+            if arg.find( "2>", 0, 2 ) != -1:
                 stderrRedirected = 1
 
         # redirect output of non-redirected streams to our tempfiles
@@ -124,7 +124,7 @@
 
         # actually do the spawn
         try:
-            args = [sh, '/C', escape(string.join(args)) ]
+            args = [sh, '/C', escape(' '.join(args)) ]
             ret = os.spawnve(os.P_WAIT, sh, args, env)
         except OSError, e:
             # catch any error
@@ -162,7 +162,7 @@
             result = 127
             if len(l) > 2:
                 if len(l[2]) < 1000:
-                    command = string.join(l[0:3])
+                    command = ' '.join(l[0:3])
                 else:
                     command = l[0]
             else:
@@ -174,7 +174,7 @@
     if not sh:
         sys.stderr.write("scons: Could not find command interpreter, is it in your PATH?\n")
         return 127
-    return exec_spawn([sh, '/C', escape(string.join(args))], env)
+    return exec_spawn([sh, '/C', escape(' '.join(args))], env)
 
 # Windows does not allow special characters in file names anyway, so no
 # need for a complex escape function, we will just quote the arg, except
--- src/engine/SCons/Scanner/D.py (original)
+++ src/engine/SCons/Scanner/D.py (refactored)
@@ -33,7 +33,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import re
-import string
+#import string
 
 import SCons.Scanner
 
@@ -54,7 +54,7 @@
 
     def find_include(self, include, source_dir, path):
         # translate dots (package separators) to slashes
-        inc = string.replace(include, '.', '/')
+        inc = include.replace('.', '/')
 
         i = SCons.Node.FS.find_file(inc + '.d', (source_dir,) + path)
         if i is None:
--- src/engine/SCons/Scanner/DirTests.py (original)
+++ src/engine/SCons/Scanner/DirTests.py (refactored)
@@ -24,7 +24,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 import sys
 import types
 import unittest
--- src/engine/SCons/Scanner/Fortran.py (original)
+++ src/engine/SCons/Scanner/Fortran.py (refactored)
@@ -30,7 +30,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import re
-import string
+#import string
 
 import SCons.Node
 import SCons.Node.FS
@@ -99,7 +99,7 @@
 
             # Convert module name to a .mod filename
             suffix = env.subst('$FORTRANMODSUFFIX')
-            modules = map(lambda x, s=suffix: string.lower(x) + s, modules)
+            modules = map(lambda x, s=suffix: x.lower() + s, modules)
             # Remove unique items from the list
             mods_and_includes = SCons.Util.unique(includes+modules)
             node.includes = mods_and_includes
--- src/engine/SCons/Scanner/LaTeX.py (original)
+++ src/engine/SCons/Scanner/LaTeX.py (refactored)
@@ -30,7 +30,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 import re
 
 import SCons.Scanner
@@ -64,7 +64,7 @@
         else:
             # Split at os.pathsep to convert into absolute path
             #TODO(1.5) env.PrependENVPath(var, [os.path.abspath(p) for p in str(env[var]).split(os.pathsep)])
-            env.PrependENVPath(var, map(lambda p: os.path.abspath(p), string.split(str(env[var]), os.pathsep)))
+            env.PrependENVPath(var, map(lambda p: os.path.abspath(p), str(env[var]).split(os.pathsep)))
     except KeyError:
         pass
 
@@ -75,7 +75,7 @@
     if SCons.Util.is_List(env['ENV'][var]):
         # TODO(1.5)
         #env['ENV'][var] = os.pathsep.join(env['ENV'][var])
-        env['ENV'][var] = string.join(env['ENV'][var], os.pathsep)
+        env['ENV'][var] = os.pathsep.join(env['ENV'][var])
     # Append the trailing os.pathsep character here to catch the case with no env[var]
     env['ENV'][var] = env['ENV'][var] + os.pathsep
 
@@ -303,7 +303,7 @@
             split_includes = []
             for include in includes:
                 inc_type = noopt_cre.sub('', include[0])
-                inc_list = string.split(include[1],',')
+                inc_list = include[1].split(',')
                 for j in range(len(inc_list)):
                     split_includes.append( (inc_type, inc_list[j]) )
             #
--- src/engine/SCons/Scanner/LaTeXTests.py (original)
+++ src/engine/SCons/Scanner/LaTeXTests.py (refactored)
@@ -24,7 +24,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 import sys
 import types
 import unittest
--- src/engine/SCons/Scanner/Prog.py (original)
+++ src/engine/SCons/Scanner/Prog.py (refactored)
@@ -23,7 +23,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import SCons.Node
 import SCons.Node.FS
@@ -53,7 +53,7 @@
         # There are no LIBS in this environment, so just return a null list:
         return []
     if SCons.Util.is_String(libs):
-        libs = string.split(libs)
+        libs = libs.split()
     else:
         libs = SCons.Util.flatten(libs)
 
--- src/engine/SCons/Scanner/ProgTests.py (original)
+++ src/engine/SCons/Scanner/ProgTests.py (refactored)
@@ -24,7 +24,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 import sys
 import types
 import unittest
@@ -156,7 +156,7 @@
     def runTest(self):
         env = DummyEnvironment(LIBPATH=[test.workpath("d1/d2"),
                                         test.workpath("d1")],
-                               LIBS=string.split('l2 l3'))
+                               LIBS='l2 l3'.split())
         s = SCons.Scanner.Prog.ProgramScanner()
         path = s.path(env)
         deps = s(DummyNode('dummy'), env, path)
@@ -171,7 +171,7 @@
                 else:
                     return arg
         env = SubstEnvironment(LIBPATH=[ "$blah" ],
-                               LIBS=string.split('l2 l3'))
+                               LIBS='l2 l3'.split())
         s = SCons.Scanner.Prog.ProgramScanner()
         path = s.path(env)
         deps = s(DummyNode('dummy'), env, path)
--- src/engine/SCons/Scanner/__init__.py (original)
+++ src/engine/SCons/Scanner/__init__.py (refactored)
@@ -30,7 +30,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import re
-import string
+#import string
 
 import SCons.Node.FS
 import SCons.Util
@@ -408,7 +408,7 @@
         return n, i
 
     def sort_key(self, include):
-        return SCons.Node.FS._my_normcase(string.join(include))
+        return SCons.Node.FS._my_normcase(' '.join(include))
 
 # Local Variables:
 # tab-width:4
--- src/engine/SCons/Script/Interactive.py (original)
+++ src/engine/SCons/Script/Interactive.py (refactored)
@@ -90,7 +90,7 @@
 import os
 import re
 import shlex
-import string
+#import string
 import sys
 
 try:
@@ -134,7 +134,7 @@
         print "*** Unknown command: %s" % argv[0]
 
     def onecmd(self, line):
-        line = string.strip(line)
+        line = line.strip()
         if not line:
             print self.lastcmd
             return self.emptyline()
@@ -144,7 +144,7 @@
         elif line[0] == '?':
             line = 'help ' + line[1:]
         if os.sep == '\\':
-            line = string.replace(line, '\\', '\\\\')
+            line = line.replace('\\', '\\\\')
         argv = shlex.split(line)
         argv[0] = self.synonyms.get(argv[0], argv[0])
         if not argv[0]:
@@ -307,7 +307,7 @@
 
     def _strip_initial_spaces(self, s):
         #lines = s.split('\n')
-        lines = string.split(s, '\n')
+        lines = s.split('\n')
         spaces = re.match(' *', lines[0]).group(0)
         #def strip_spaces(l):
         #    if l.startswith(spaces):
@@ -319,7 +319,7 @@
                 l = l[len(spaces):]
             return l
         lines = map(strip_spaces, lines)
-        return string.join(lines, '\n')
+        return '\n'.join(lines)
 
     def do_exit(self, argv):
         """\
--- src/engine/SCons/Script/Main.py (original)
+++ src/engine/SCons/Script/Main.py (refactored)
@@ -38,7 +38,7 @@
 
 import os
 import os.path
-import string
+#import string
 import sys
 import time
 import traceback
@@ -107,7 +107,7 @@
             self.func = obj
         elif SCons.Util.is_List(obj):
             self.func = self.spinner
-        elif string.find(obj, self.target_string) != -1:
+        elif obj.find(self.target_string) != -1:
             self.func = self.replace_string
         else:
             self.func = self.string
@@ -132,7 +132,7 @@
         self.write(self.obj)
 
     def replace_string(self, node):
-        self.write(string.replace(self.obj, self.target_string, str(node)))
+        self.write(self.obj.replace(self.target_string, str(node)))
 
     def __call__(self, node):
         self.count = self.count + 1
@@ -208,7 +208,7 @@
         if self.top and not t.has_builder() and not t.side_effect:
             if not t.exists():
                 def classname(obj):
-                    return string.split(str(obj.__class__), '.')[-1]
+                    return str(obj.__class__).split('.')[-1]
                 if classname(t) in ('File', 'Dir', 'Entry'):
                     errstr="Do not know how to make %s target `%s' (%s)." % (classname(t), t, t.abspath)
                 else: # Alias or Python or ...
@@ -262,7 +262,7 @@
         node = buildError.node
         if not SCons.Util.is_List(node):
                 node = [ node ]
-        nodename = string.join(map(str, node), ', ')
+        nodename = ', '.join(map(str, node))
 
         errfmt = "scons: *** [%s] %s\n"
         sys.stderr.write(errfmt % (nodename, buildError))
@@ -425,7 +425,7 @@
 
 
 def python_version_string():
-    return string.split(sys.version)[0]
+    return sys.version.split()[0]
 
 def python_version_unsupported(version=sys.version_info):
     return version < (1, 5, 2)
@@ -514,8 +514,8 @@
         pre = ["   "]
         post = ["   %s\n"]
         l = len(self.stats)
-        fmt1 = string.join(pre + [' %7s']*l + post, '')
-        fmt2 = string.join(pre + [' %7d']*l + post, '')
+        fmt1 = ''.join(pre + [' %7s']*l + post)
+        fmt2 = ''.join(pre + [' %7d']*l + post)
         labels = self.labels[:l]
         labels.append(("", "Class"))
         self.outfp.write(fmt1 % tuple(map(lambda x: x[0], labels)))
@@ -563,7 +563,7 @@
     # of SCons:
     for frame in tb:
         filename = frame[0]
-        if string.find(filename, os.sep+'SCons'+os.sep) == -1:
+        if filename.find(os.sep+'SCons'+os.sep) == -1:
             return frame
     return tb[0]
 
@@ -1224,7 +1224,7 @@
 
 def _exec_main(parser, values):
     sconsflags = os.environ.get('SCONSFLAGS', '')
-    all_args = string.split(sconsflags) + sys.argv[1:]
+    all_args = sconsflags.split() + sys.argv[1:]
 
     options, args = parser.parse_args(all_args, values)
 
@@ -1285,7 +1285,7 @@
         pass 
     parts.append(version_string("engine", SCons))
     parts.append("__COPYRIGHT__")
-    version = string.join(parts, '')
+    version = ''.join(parts)
 
     import SConsOptions
     parser = SConsOptions.Parser(version)
--- src/engine/SCons/Script/SConsOptions.py (original)
+++ src/engine/SCons/Script/SConsOptions.py (refactored)
@@ -25,7 +25,7 @@
 
 import optparse
 import re
-import string
+#import string
 import sys
 import textwrap
 
@@ -55,10 +55,10 @@
     if value is None:
         return []
     if not SCons.Util.is_List(value):
-        value = string.split(value, ',')
+        value = value.split(',')
     result = []
     for v in value:
-        v = string.lower(v)
+        v = v.lower()
         if v == 'all':
             result = diskcheck_all
         elif v == 'none':
@@ -293,7 +293,7 @@
         # Value explicitly attached to arg?  Pretend it's the next
         # argument.
         if "=" in arg:
-            (opt, next_arg) = string.split(arg, "=", 1)
+            (opt, next_arg) = arg.split("=", 1)
             rargs.insert(0, next_arg)
             had_explicit_value = True
         else:
@@ -462,7 +462,7 @@
                 result.append("%*s%s\n" % (self.help_position, "", line))
         elif opts[-1] != "\n":
             result.append("\n")
-        return string.join(result, "")
+        return "".join(result)
 
     # For consistent help output across Python versions, we provide a
     # subclass copy of format_option_strings() and these two variables.
@@ -474,7 +474,7 @@
     def format_option_strings(self, option):
         """Return a comma-separated list of option strings & metavariables."""
         if option.takes_value():
-            metavar = option.metavar or string.upper(option.dest)
+            metavar = option.metavar or option.dest.upper()
             short_opts = []
             for sopt in option._short_opts:
                 short_opts.append(self._short_opt_fmt % (sopt, metavar))
@@ -490,7 +490,7 @@
         else:
             opts = long_opts + short_opts
 
-        return string.join(opts, ", ")
+        return ", ".join(opts)
 
 def Parser(version):
     """
@@ -581,7 +581,7 @@
             raise OptionValueError("Warning:  %s is not a valid config type" % value)
         setattr(parser.values, option.dest, value)
     opt_config_help = "Controls Configure subsystem: %s." \
-                      % string.join(config_options, ", ")
+                      % ", ".join(config_options)
     op.add_option('--config',
                   nargs=1, type="string",
                   dest="config", default="auto",
@@ -624,7 +624,7 @@
         else:
             raise OptionValueError("Warning:  %s is not a valid debug type" % value)
     opt_debug_help = "Print various types of debugging information: %s." \
-                     % string.join(debug_options, ", ")
+                     % ", ".join(debug_options)
     op.add_option('--debug',
                   nargs=1, type="string",
                   dest="debug", default=[],
@@ -655,7 +655,7 @@
         SCons.Node.FS.set_duplicate(value)
 
     opt_duplicate_help = "Set the preferred duplication methods. Must be one of " \
-                         + string.join(SCons.Node.FS.Valid_Duplicates, ", ")
+                         + ", ".join(SCons.Node.FS.Valid_Duplicates)
 
     op.add_option('--duplicate',
                   nargs=1, type="string",
@@ -803,7 +803,7 @@
     def opt_tree(option, opt, value, parser, tree_options=tree_options):
         import Main
         tp = Main.TreePrinter()
-        for o in string.split(value, ','):
+        for o in value.split(','):
             if o == 'all':
                 tp.derived = False
             elif o == 'derived':
@@ -817,7 +817,7 @@
         parser.values.tree_printers.append(tp)
 
     opt_tree_help = "Print a dependency tree in various formats: %s." \
-                    % string.join(tree_options, ", ")
+                    % ", ".join(tree_options)
 
     op.add_option('--tree',
                   nargs=1, type="string",
@@ -847,7 +847,7 @@
 
     def opt_warn(option, opt, value, parser, tree_options=tree_options):
         if SCons.Util.is_String(value):
-            value = string.split(value, ',')
+            value = value.split(',')
         parser.values.warn.extend(value)
 
     op.add_option('--warn', '--warning',
--- src/engine/SCons/Script/SConscript.py (original)
+++ src/engine/SCons/Script/SConscript.py (refactored)
@@ -48,7 +48,7 @@
 import os
 import os.path
 import re
-import string
+#import string
 import sys
 import traceback
 import types
@@ -145,7 +145,7 @@
     try:
         fvars = SCons.Util.flatten(vars)
         for var in fvars:
-            for v in string.split(var):
+            for v in var.split():
                 retval.append(call_stack[-1].globals[v])
     except KeyError, x:
         raise SCons.Errors.UserError, "Return of non-existent variable '%s'"%x
@@ -369,7 +369,7 @@
 
         This is complicated by the fact that a version string can be
         something like 3.2b1."""
-        version = string.split(string.split(version_string, ' ')[0], '.')
+        version = version_string.split(' ')[0].split('.')
         v_major = int(version[0])
         v_minor = int(re.match('\d+', version[1]).group())
         if len(version) >= 3:
@@ -484,7 +484,7 @@
         except AttributeError:
             python_ver = self._get_major_minor_revision(sys.version)[:2]
         if python_ver < (major, minor):
-            v = string.split(sys.version, " ", 1)[0]
+            v = sys.version.split(" ", 1)[0]
             print "Python %d.%d or greater required, but you have Python %s" %(major,minor,v)
             sys.exit(2)
 
--- src/engine/SCons/Script/__init__.py (original)
+++ src/engine/SCons/Script/__init__.py (refactored)
@@ -40,7 +40,7 @@
 start_time = time.time()
 
 import os
-import string
+#import string
 import sys
 import UserList
 
@@ -58,7 +58,7 @@
 # the "--debug=memoizer" flag and enable Memoizer before we import any
 # of the other modules that use it.
 
-_args = sys.argv + string.split(os.environ.get('SCONSFLAGS', ''))
+_args = sys.argv + os.environ.get('SCONSFLAGS', '').split()
 if "--debug=memoizer" in _args:
     import SCons.Memoize
     import SCons.Warnings
@@ -211,7 +211,7 @@
 
 def _Add_Arguments(alist):
     for arg in alist:
-        a, b = string.split(arg, '=', 1)
+        a, b = arg.split('=', 1)
         ARGUMENTS[a] = b
         ARGLIST.append((a, b))
 
--- src/engine/SCons/Tool/FortranCommon.py (original)
+++ src/engine/SCons/Tool/FortranCommon.py (refactored)
@@ -30,7 +30,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import re
-import string
+#import string
 import os.path
 
 import SCons.Action
@@ -73,7 +73,7 @@
     # Convert module name to a .mod filename
     suffix = env.subst('$FORTRANMODSUFFIX', target=target, source=source)
     moddir = env.subst('$FORTRANMODDIR', target=target, source=source)
-    modules = map(lambda x, s=suffix: string.lower(x) + s, modules)
+    modules = map(lambda x, s=suffix: x.lower() + s, modules)
     for m in modules:
        target.append(env.fs.File(m, moddir))
     return (target, source)
@@ -91,8 +91,8 @@
     pre-processed. Both should be sequences, not strings."""
     assert len(suffixes) > 0
     s = suffixes[0]
-    sup = string.upper(s)
-    upper_suffixes = [string.upper(_) for _ in suffixes]
+    sup = s.upper()
+    upper_suffixes = [_.upper() for _ in suffixes]
     if SCons.Util.case_sensitive_suffixes(s, sup):
         ppsuffixes.extend(upper_suffixes)
     else:
--- src/engine/SCons/Tool/JavaCommon.py (original)
+++ src/engine/SCons/Tool/JavaCommon.py (refactored)
@@ -32,7 +32,7 @@
 import os
 import os.path
 import re
-import string
+#import string
 
 java_parsing = 1
 
@@ -127,7 +127,7 @@
             self.brackets = self.brackets - 1
             if len(self.stackBrackets) and \
                self.brackets == self.stackBrackets[-1]:
-                self.listOutputs.append(string.join(self.listClasses, '$'))
+                self.listOutputs.append('$'.join(self.listClasses))
                 self.localClasses.pop()
                 self.listClasses.pop()
                 self.anonStacksStack.pop()
@@ -179,7 +179,7 @@
                 self.__getAnonStack()[-1] = self.__getAnonStack()[-1] + 1
                 for anon in self.__getAnonStack():
                     className.append(str(anon))
-                self.listOutputs.append(string.join(className, '$'))
+                self.listOutputs.append('$'.join(className))
 
             self.nextAnon = self.nextAnon + 1
             self.__getAnonStack().append(0)
@@ -298,7 +298,7 @@
             currstate = currstate.parseToken(token)
             if trace: trace(token, currstate)
         if initial.package:
-            package = string.replace(initial.package, '.', os.sep)
+            package = initial.package.replace('.', os.sep)
         return (package, initial.listOutputs)
 
 else:
--- src/engine/SCons/Tool/PharLapCommon.py (original)
+++ src/engine/SCons/Tool/PharLapCommon.py (refactored)
@@ -36,7 +36,7 @@
 import SCons.Errors
 import SCons.Util
 import re
-import string
+#import string
 
 def getPharLapPath():
     """Reads the registry to find the installed path of the Phar Lap ETS
@@ -97,14 +97,14 @@
         is_list = 1
         paths = env_dict[key]
         if not SCons.Util.is_List(env_dict[key]):
-            paths = string.split(paths, sep)
+            paths = paths.split(sep)
             is_list = 0
         if not os.path.normcase(path) in map(os.path.normcase, paths):
             paths = [ path ] + paths
         if is_list:
             env_dict[key] = paths
         else:
-            env_dict[key] = string.join(paths, sep)
+            env_dict[key] = sep.join(paths)
     except KeyError:
         env_dict[key] = path
 
--- src/engine/SCons/Tool/bcc32.py (original)
+++ src/engine/SCons/Tool/bcc32.py (refactored)
@@ -31,7 +31,7 @@
 
 import os
 import os.path
-import string
+#import string
 
 import SCons.Defaults
 import SCons.Tool
--- src/engine/SCons/Tool/dmd.py (original)
+++ src/engine/SCons/Tool/dmd.py (refactored)
@@ -57,7 +57,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import SCons.Action
 import SCons.Builder
@@ -112,7 +112,7 @@
         # This is merely for the convenience of the dependency scanner.
         dmd_path = env.WhereIs(dc)
         if dmd_path:
-            x = string.rindex(dmd_path, dc)
+            x = dmd_path.rindex(dc)
             phobosDir = dmd_path[:x] + '/../src/phobos'
             if os.path.isdir(phobosDir):
                 env.Append(DPATH = [phobosDir])
--- src/engine/SCons/Tool/fortran.py (original)
+++ src/engine/SCons/Tool/fortran.py (refactored)
@@ -34,7 +34,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import re
-import string
+#import string
 
 import SCons.Action
 import SCons.Defaults
--- src/engine/SCons/Tool/hpc++.py (original)
+++ src/engine/SCons/Tool/hpc++.py (refactored)
@@ -34,7 +34,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 
 import SCons.Util
 
@@ -67,8 +67,8 @@
         env['SHCXXFLAGS'] = SCons.Util.CLVar('$CXXFLAGS +Z')
         # determine version of aCC
         line = os.popen(acc + ' -V 2>&1').readline().rstrip()
-        if string.find(line, 'aCC: HP ANSI C++') == 0:
-            env['CXXVERSION'] = string.split(line)[-1]
+        if line.find('aCC: HP ANSI C++') == 0:
+            env['CXXVERSION'] = line.split()[-1]
 
         if env['PLATFORM'] == 'cygwin':
             env['SHCXXFLAGS'] = SCons.Util.CLVar('$CXXFLAGS')
--- src/engine/SCons/Tool/ifort.py (original)
+++ src/engine/SCons/Tool/ifort.py (refactored)
@@ -34,7 +34,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import SCons.Defaults
 from SCons.Scanner.Fortran import FortranScan
@@ -75,7 +75,7 @@
         for dialect in ['F77', 'F90', 'FORTRAN', 'F95']:
             for var in ['%sCOM' % dialect, '%sPPCOM' % dialect,
                         'SH%sCOM' % dialect, 'SH%sPPCOM' % dialect]:
-                env[var] = string.replace(env[var], '-o $TARGET', '-object:$TARGET')
+                env[var] = env[var].replace('-o $TARGET', '-object:$TARGET')
         env['FORTRANMODDIRPREFIX'] = "/module:"
     else:
         env['FORTRANMODDIRPREFIX'] = "-module "
--- src/engine/SCons/Tool/intelc.py (original)
+++ src/engine/SCons/Tool/intelc.py (refactored)
@@ -406,7 +406,7 @@
                     # Couldn't get it from registry: use default subdir of topdir
                     env.PrependENVPath(p[0], os.path.join(topdir, p[2]))
                 else:
-                    env.PrependENVPath(p[0], string.split(path, os.pathsep))
+                    env.PrependENVPath(p[0], path.split(os.pathsep))
                     # print "ICL %s: %s, final=%s"%(p[0], path, str(env['ENV'][p[0]]))
 
     if is_windows:
@@ -445,7 +445,7 @@
         for ld in [envlicdir, reglicdir]:
             # If the string contains an '@', then assume it's a network
             # license (port@system) and good by definition.
-            if ld and (string.find(ld, '@') != -1 or os.path.exists(ld)):
+            if ld and (ld.find('@') != -1 or os.path.exists(ld)):
                 licdir = ld
                 break
         if not licdir:
--- src/engine/SCons/Tool/ipkg.py (original)
+++ src/engine/SCons/Tool/ipkg.py (refactored)
@@ -36,7 +36,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import SCons.Builder
 
@@ -56,8 +56,8 @@
     # TODO(1.5)
     #env['IPKGUSER']   = os.popen('id -un').read().strip()
     #env['IPKGGROUP']  = os.popen('id -gn').read().strip()
-    env['IPKGUSER']   = string.strip(os.popen('id -un').read())
-    env['IPKGGROUP']  = string.strip(os.popen('id -gn').read())
+    env['IPKGUSER']   = os.popen('id -un').read().strip()
+    env['IPKGGROUP']  = os.popen('id -gn').read().strip()
     env['IPKGFLAGS']  = SCons.Util.CLVar('-o $IPKGUSER -g $IPKGGROUP')
     env['IPKGSUFFIX'] = '.ipk'
 
--- src/engine/SCons/Tool/javac.py (original)
+++ src/engine/SCons/Tool/javac.py (refactored)
@@ -35,7 +35,7 @@
 
 import os
 import os.path
-import string
+#import string
 
 import SCons.Action
 import SCons.Builder
@@ -45,7 +45,7 @@
 
 def classname(path):
     """Turn a string (path name) into a Java class name."""
-    return string.replace(os.path.normpath(path), os.sep, '.')
+    return os.path.normpath(path).replace(os.sep, '.')
 
 def emit_java_classes(target, source, env):
     """Create and return lists of source java files
@@ -156,7 +156,7 @@
         if self.default:
             path = path + [ env[self.default] ]
         if path:
-            return [self.opt, string.join(path, os.pathsep)]
+            return [self.opt, os.pathsep.join(path)]
             #return self.opt + " " + os.pathsep.join(path)
         else:
             return []
--- src/engine/SCons/Tool/javah.py (original)
+++ src/engine/SCons/Tool/javah.py (refactored)
@@ -34,7 +34,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 
 import SCons.Action
 import SCons.Builder
@@ -93,7 +93,7 @@
             target[0]._morph()
         tlist = []
         for s in source:
-            fname = string.replace(s.attributes.java_classname, '.', '_') + '.h'
+            fname = s.attributes.java_classname.replace('.', '_') + '.h'
             t = target[0].File(fname)
             t.attributes.java_lookupdir = target[0]
             tlist.append(t)
--- src/engine/SCons/Tool/lex.py (original)
+++ src/engine/SCons/Tool/lex.py (refactored)
@@ -35,7 +35,7 @@
 
 import os.path
 
-import string
+#import string
 
 import SCons.Action
 import SCons.Tool
@@ -62,7 +62,7 @@
             if option[:l] == fileGenOption:
                 # A file generating option is present, so add the
                 # file name to the target list.
-                fileName = string.strip(option[l:])
+                fileName = option[l:].strip()
                 target.append(fileName)
     return (target, source)
 
--- src/engine/SCons/Tool/midl.py (original)
+++ src/engine/SCons/Tool/midl.py (refactored)
@@ -33,7 +33,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import SCons.Action
 import SCons.Builder
@@ -53,10 +53,10 @@
 
     midlcom = env['MIDLCOM']
 
-    if string.find(midlcom, '/proxy') != -1:
+    if midlcom.find('/proxy') != -1:
         proxy = base + '_p.c'
         t.append(proxy)
-    if string.find(midlcom, '/dlldata') != -1:
+    if midlcom.find('/dlldata') != -1:
         dlldata = base + '_data.c'
         t.append(dlldata)
     
--- src/engine/SCons/Tool/mingw.py (original)
+++ src/engine/SCons/Tool/mingw.py (refactored)
@@ -35,7 +35,7 @@
 
 import os
 import os.path
-import string
+#import string
 
 import SCons.Action
 import SCons.Builder
--- src/engine/SCons/Tool/msvc.py (original)
+++ src/engine/SCons/Tool/msvc.py (refactored)
@@ -35,7 +35,7 @@
 
 import os.path
 import re
-import string
+#import string
 import sys
 
 import SCons.Action
--- src/engine/SCons/Tool/msvs.py (original)
+++ src/engine/SCons/Tool/msvs.py (refactored)
@@ -39,7 +39,7 @@
 import os
 import pickle
 import re
-import string
+#import string
 import sys
 
 import SCons.Builder
@@ -58,9 +58,9 @@
 ##############################################################################
 
 def xmlify(s):
-    s = string.replace(s, "&", "&amp;") # do this first
-    s = string.replace(s, "'", "&apos;")
-    s = string.replace(s, '"', "&quot;")
+    s = s.replace("&", "&amp;") # do this first
+    s = s.replace("'", "&apos;")
+    s = s.replace('"', "&quot;")
     return s
 
 external_makefile_guid = '{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}'
@@ -293,7 +293,7 @@
         for n in sourcenames:
             # TODO(1.5):
             #self.sources[n].sort(lambda a, b: cmp(a.lower(), b.lower()))
-            self.sources[n].sort(lambda a, b: cmp(string.lower(a), string.lower(b)))
+            self.sources[n].sort(lambda a, b: cmp(a.lower(), b.lower()))
 
         def AddConfig(self, variant, buildtarget, outdir, runfile, cmdargs, dspfile=dspfile):
             config = Config()
@@ -394,7 +394,7 @@
                                 '# PROP %sUse_Debug_Libraries ' % (base, base))
                 # TODO(1.5):
                 #if kind.lower().find('debug') < 0:
-                if string.find(string.lower(kind), 'debug') < 0:
+                if kind.lower().find('debug') < 0:
                     self.file.write('0\n')
                 else:
                     self.file.write('1\n')
@@ -447,7 +447,7 @@
         cats = categories.keys()
         # TODO(1.5):
         #cats.sort(lambda a, b: cmp(a.lower(), b.lower()))
-        cats.sort(lambda a, b: cmp(string.lower(a), string.lower(b)))
+        cats.sort(lambda a, b: cmp(a.lower(), b.lower()))
         for kind in cats:
             if not self.sources[kind]:
                 continue # skip empty groups
@@ -455,7 +455,7 @@
             self.file.write('# Begin Group "' + kind + '"\n\n')
             # TODO(1.5)
             #typelist = categories[kind].replace('|', ';')
-            typelist = string.replace(categories[kind], '|', ';')
+            typelist = categories[kind].replace('|', ';')
             self.file.write('# PROP Default_Filter "' + typelist + '"\n')
 
             for file in self.sources[kind]:
@@ -480,7 +480,7 @@
         while line:
             # TODO(1.5):
             #if line.find("# End Project") > -1:
-            if string.find(line, "# End Project") > -1:
+            if line.find("# End Project") > -1:
                 break
             line = dspfile.readline()
 
@@ -675,8 +675,8 @@
             # TODO(1.5)
             #preprocdefs = xmlify(';'.join(self.env.get('CPPDEFINES', [])))
             #includepath = xmlify(';'.join(self.env.get('CPPPATH', [])))
-            preprocdefs = xmlify(string.join(processDefines(self.env.get('CPPDEFINES', [])), ';'))
-            includepath = xmlify(string.join(self.env.get('CPPPATH', []), ';'))
+            preprocdefs = xmlify(';'.join(processDefines(self.env.get('CPPDEFINES', []))))
+            includepath = xmlify(';'.join(self.env.get('CPPPATH', [])))
 
             if not env_has_buildtarget:
                 del self.env['MSVSBUILDTARGET']
@@ -706,7 +706,7 @@
         sorteditems = hierarchy.items()
         # TODO(1.5):
         #sorteditems.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
-        sorteditems.sort(lambda a, b: cmp(string.lower(a[0]), string.lower(b[0])))
+        sorteditems.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
 
         # First folders, then files
         for key, value in sorteditems:
@@ -739,7 +739,7 @@
         cats = categories.keys()
         # TODO(1.5)
         #cats.sort(lambda a, b: cmp(a.lower(), b.lower()))
-        cats.sort(lambda a, b: cmp(string.lower(a), string.lower(b)))
+        cats.sort(lambda a, b: cmp(a.lower(), b.lower()))
         cats = filter(lambda k, s=self: s.sources[k], cats)
         for kind in cats:
             if len(cats) > 1:
@@ -790,7 +790,7 @@
         while line:
             # TODO(1.5)
             #if line.find('<!-- SCons Data:') > -1:
-            if string.find(line, '<!-- SCons Data:') > -1:
+            if line.find('<!-- SCons Data:') > -1:
                 break
             line = dspfile.readline()
 
@@ -981,7 +981,7 @@
             dspfile_base = os.path.basename(self.dspfile)
             slnguid = self.slnguid
             scc_provider = env.get('MSVS_SCC_PROVIDER', '')
-            scc_provider = string.replace(scc_provider, ' ', r'\u0020')
+            scc_provider = scc_provider.replace(' ', r'\u0020')
             scc_project_name = env.get('MSVS_SCC_PROJECT_NAME', '')
             # scc_aux_path = env.get('MSVS_SCC_AUX_PATH', '')
             scc_local_path = env.get('MSVS_SCC_LOCAL_PATH', '')
--- src/engine/SCons/Tool/msvsTests.py (original)
+++ src/engine/SCons/Tool/msvsTests.py (refactored)
@@ -24,7 +24,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 import TestCmd
 import unittest
@@ -39,7 +39,7 @@
 from SCons.Tool.MSCommon import get_default_version, \
                                 query_versions
 
-regdata_6a = string.split(r'''[HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio]
+regdata_6a = r'''[HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio]
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\6.0]
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\6.0\ServicePacks]
 "sp3"=""
@@ -49,9 +49,9 @@
 "ProductDir"="C:\Program Files\Microsoft Visual Studio\MSDN98\98VSa\1033"
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\6.0\Setup\Microsoft Visual C++]
 "ProductDir"="C:\Program Files\Microsoft Visual Studio\VC98"
-''','\n')
-
-regdata_6b = string.split(r'''[HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio]
+'''.split('\n')
+
+regdata_6b = r'''[HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio]
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\6.0]
 "InstallDir"="C:\VS6\Common\IDE\IDE98"
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\6.0\ServicePacks]
@@ -68,9 +68,9 @@
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\6.0\Setup\Microsoft VSEE Client]
 "ProductDir"="C:\VS6\Common\Tools"
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\6.0\Setup\Visual Studio 98]
-''','\n')
-
-regdata_7 = string.split(r'''
+'''.split('\n')
+
+regdata_7 = r'''
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\7.0]
 "InstallDir"="C:\Program Files\Microsoft Visual Studio .NET\Common7\IDE\"
 "Source Directories"="C:\Program Files\Microsoft Visual Studio .NET\Vc7\crt\;C:\Program Files\Microsoft Visual Studio .NET\Vc7\atlmfc\src\mfc\;C:\Program Files\Microsoft Visual Studio .NET\Vc7\atlmfc\src\atl\"
@@ -134,9 +134,9 @@
 "Include Dirs"="$(VCInstallDir)include;$(VCInstallDir)atlmfc\include;$(VCInstallDir)PlatformSDK\include\prerelease;$(VCInstallDir)PlatformSDK\include;$(FrameworkSDKDir)include"
 "Source Dirs"="$(VCInstallDir)atlmfc\src\mfc;$(VCInstallDir)atlmfc\src\atl;$(VCInstallDir)crt\src"
 "Reference Dirs"=""
-''','\n')
-
-regdata_7_1 = string.split(r'''
+'''.split('\n')
+
+regdata_7_1 = r'''
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\7.1]
 @=""
 "Source Directories"="C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\crt\src\;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\atlmfc\src\mfc\;C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\atlmfc\src\atl\"
@@ -240,9 +240,9 @@
 "VCManagedWrapperGeneratorTool"=""
 "VCAuxiliaryManagedWrapperGeneratorTool"=""
 "VCPrimaryInteropTool"=""
-''','\n')
-
-regdata_8exp = string.split(r'''
+'''.split('\n')
+
+regdata_8exp = r'''
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VCExpress\8.0]
 "CLR Version"="v2.0.50727"
 "ApplicationID"="VCExpress"
@@ -284,9 +284,9 @@
 "VCXMLDataGeneratorTool"="*.xsd"
 "VCManifestTool"="*.manifest"
 "VCXDCMakeTool"="*.xdc"
-''','\n')
-
-regdata_80 = string.split(r'''
+'''.split('\n')
+
+regdata_80 = r'''
 [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\8.0]
 "CLR Version"="v2.0.50727"
 "ApplicationID"="VisualStudio"
@@ -346,13 +346,13 @@
 "VCXMLDataGeneratorTool"="*.xsd"
 "VCManifestTool"="*.manifest"
 "VCXDCMakeTool"="*.xdc"
-''','\n')
-
-regdata_cv = string.split(r'''[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion]
+'''.split('\n')
+
+regdata_cv = r'''[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion]
 "ProgramFilesDir"="C:\Program Files"
 "CommonFilesDir"="C:\Program Files\Common Files"
 "MediaPath"="C:\WINDOWS\Media"
-''','\n')
+'''.split('\n')
 
 
 regdata_none = []
@@ -428,8 +428,8 @@
             raise SCons.Util.RegError
 
     def addKey(self,name,sep = '\\'):
-        if string.find(name, sep) != -1:
-            keyname, subkeys = string.split(name, sep, 1)
+        if name.find(sep) != -1:
+            keyname, subkeys = name.split(sep, 1)
         else:
             keyname = name
             subkeys = ""
--- src/engine/SCons/Tool/mwcc.py (original)
+++ src/engine/SCons/Tool/mwcc.py (refactored)
@@ -34,7 +34,7 @@
 
 import os
 import os.path
-import string
+#import string
 
 import SCons.Util
 
@@ -80,8 +80,8 @@
     ENV['CWFolder'] = version.path
     ENV['LM_LICENSE_FILE'] = version.license
     plus = lambda x: '+%s' % x
-    ENV['MWCIncludes'] = string.join(map(plus, version.includes), os.pathsep)
-    ENV['MWLibraries'] = string.join(map(plus, version.libs), os.pathsep)
+    ENV['MWCIncludes'] = os.pathsep.join(map(plus, version.includes))
+    ENV['MWLibraries'] = os.pathsep.join(map(plus, version.libs))
     return 1
 
 
--- src/engine/SCons/Tool/rmic.py (original)
+++ src/engine/SCons/Tool/rmic.py (refactored)
@@ -34,7 +34,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 
 import SCons.Action
 import SCons.Builder
@@ -86,7 +86,7 @@
     tlist = []
     for s in source:
         for suff in stub_suffixes:
-            fname = string.replace(s.attributes.java_classname, '.', os.sep) + \
+            fname = s.attributes.java_classname.replace('.', os.sep) + \
                     suff + class_suffix
             t = target[0].File(fname)
             t.attributes.java_lookupdir = target[0]
--- src/engine/SCons/Tool/swig.py (original)
+++ src/engine/SCons/Tool/swig.py (refactored)
@@ -35,7 +35,7 @@
 
 import os.path
 import re
-import string
+#import string
 import subprocess
 
 import SCons.Action
@@ -72,7 +72,7 @@
 
     for m in matches:
         mnames.append(m[2])
-        directors = directors or string.find(m[0], 'directors') >= 0
+        directors = directors or m[0].find('directors') >= 0
     return mnames, directors
 
 def _add_director_header_targets(target, env):
--- src/engine/SCons/Tool/tex.py (original)
+++ src/engine/SCons/Tool/tex.py (refactored)
@@ -36,7 +36,7 @@
 
 import os.path
 import re
-import string
+#import string
 import shutil
 
 import SCons.Action
@@ -292,7 +292,7 @@
                 target_aux = os.path.join(targetdir, auxfilename)
                 if os.path.exists(target_aux) and os.path.isfile(target_aux):
                     content = open(target_aux, "rb").read()
-                    if string.find(content, "bibdata") != -1:
+                    if content.find("bibdata") != -1:
                         if Verbose:
                             print "Need to run bibtex"
                         bibfile = env.fs.File(targetbase)
@@ -424,7 +424,7 @@
         # Split at os.pathsep to convert into absolute path
         # TODO(1.5)
         #paths = paths.split(os.pathsep)
-        paths = string.split(paths, os.pathsep)
+        paths = paths.split(os.pathsep)
 
     # now that we have the path list restore the env
     if savedpath is _null:
@@ -651,7 +651,7 @@
         # Split at os.pathsep to convert into absolute path
         # TODO(1.5)
         #paths = paths.split(os.pathsep)
-        paths = string.split(paths, os.pathsep)
+        paths = paths.split(os.pathsep)
 
     # now that we have the path list restore the env
     if savedpath is _null:
--- src/engine/SCons/Tool/wix.py (original)
+++ src/engine/SCons/Tool/wix.py (refactored)
@@ -35,7 +35,7 @@
 import SCons.Builder
 import SCons.Action
 import os
-import string
+#import string
 
 def generate(env):
     """Add Builders and construction variables for WiX to an Environment."""
@@ -68,7 +68,7 @@
     # try to find the candle.exe and light.exe tools and 
     # add the install directory to light libpath.
     #for path in os.environ['PATH'].split(os.pathsep):
-    for path in string.split(os.environ['PATH'], os.pathsep):
+    for path in os.environ['PATH'].split(os.pathsep):
         if not path:
             continue
 
--- src/engine/SCons/Tool/yacc.py (original)
+++ src/engine/SCons/Tool/yacc.py (refactored)
@@ -34,7 +34,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 
 import SCons.Defaults
 import SCons.Tool
@@ -71,7 +71,7 @@
             if option[:l] == fileGenOption:
                 # A file generating option is present, so add the file
                 # name to the list of targets.
-                fileName = string.strip(option[l:])
+                fileName = option[l:].strip()
                 target.append(fileName)
 
     return (target, source)
--- src/engine/SCons/Tool/MSCommon/netframework.py (original)
+++ src/engine/SCons/Tool/MSCommon/netframework.py (refactored)
@@ -28,7 +28,7 @@
 
 import os
 import re
-import string
+#import string
 
 from common import read_reg, debug
 
@@ -64,8 +64,8 @@
             # since version numbers aren't really floats...
             aa = a[1:]
             bb = b[1:]
-            aal = string.split(aa, '.')
-            bbl = string.split(bb, '.')
+            aal = aa.split('.')
+            bbl = bb.split('.')
             # sequence comparison in python is lexicographical
             # which is exactly what we want.
             # Note we sort backwards so the highest version is first.
--- src/engine/SCons/Tool/packaging/__init__.py (original)
+++ src/engine/SCons/Tool/packaging/__init__.py (refactored)
@@ -114,7 +114,7 @@
 
     PACKAGETYPE=kw['PACKAGETYPE']
     if not is_List(PACKAGETYPE):
-        PACKAGETYPE=string.split(PACKAGETYPE, ',')
+        PACKAGETYPE=PACKAGETYPE.split(',')
 
     # load the needed packagers.
     def load_packager(type):
--- src/engine/SCons/Tool/packaging/rpm.py (original)
+++ src/engine/SCons/Tool/packaging/rpm.py (refactored)
@@ -29,7 +29,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import SCons.Builder
 
@@ -83,7 +83,7 @@
     # if no "SOURCE_URL" tag is given add a default one.
     if not kw.has_key('SOURCE_URL'):
         #kw['SOURCE_URL']=(str(target[0])+".tar.gz").replace('.rpm', '')
-        kw['SOURCE_URL']=string.replace(str(target[0])+".tar.gz", '.rpm', '')
+        kw['SOURCE_URL']=(str(target[0])+".tar.gz").replace('.rpm', '')
 
     # mangle the source and target list for the rpmbuild
     env = OverrideEnvironment(env, kw)
@@ -107,16 +107,16 @@
     # find the .spec file for rpm and add it since it is not necessarily found
     # by the FindSourceFiles function.
     #sources.extend( [s for s in source if str(s).rfind('.spec')!=-1] )
-    spec_file = lambda s: string.rfind(str(s), '.spec') != -1
+    spec_file = lambda s: str(s).rfind('.spec') != -1
     sources.extend( filter(spec_file, source) )
 
     # as the source contains the url of the source package this rpm package
     # is built from, we extract the target name
     #tarball = (str(target[0])+".tar.gz").replace('.rpm', '')
-    tarball = string.replace(str(target[0])+".tar.gz", '.rpm', '')
+    tarball = (str(target[0])+".tar.gz").replace('.rpm', '')
     try:
         #tarball = env['SOURCE_URL'].split('/')[-1]
-        tarball = string.split(env['SOURCE_URL'], '/')[-1]
+        tarball = env['SOURCE_URL'].split('/')[-1]
     except KeyError, e:
         raise SCons.Errors.UserError( "Missing PackageTag '%s' for RPM packager" % e.args[0] )
 
--- src/engine/SCons/Variables/BoolVariable.py (original)
+++ src/engine/SCons/Variables/BoolVariable.py (refactored)
@@ -38,7 +38,7 @@
 
 __all__ = ['BoolVariable',]
 
-import string
+#import string
 
 import SCons.Errors
 
@@ -57,7 +57,7 @@
 
     This is usable as 'converter' for SCons' Variables.
     """
-    lval = string.lower(val)
+    lval = val.lower()
     if lval in __true_strings: return True
     if lval in __false_strings: return False
     raise ValueError("Invalid value for boolean option: %s" % val)
--- src/engine/SCons/Variables/EnumVariable.py (original)
+++ src/engine/SCons/Variables/EnumVariable.py (refactored)
@@ -41,7 +41,7 @@
 
 __all__ = ['EnumVariable',]
 
-import string
+#import string
 
 import SCons.Errors
 
@@ -80,21 +80,21 @@
     given 'map'-dictionary (unmapped input values are returned
     unchanged). 
     """
-    help = '%s (%s)' % (help, string.join(allowed_values, '|'))
+    help = '%s (%s)' % (help, '|'.join(allowed_values))
     # define validator
     if ignorecase >= 1:
         validator = lambda key, val, env, vals=allowed_values: \
-                    _validator(key, string.lower(val), env, vals)
+                    _validator(key, val.lower(), env, vals)
     else:
         validator = lambda key, val, env, vals=allowed_values: \
                     _validator(key, val, env, vals)
     # define converter
     if ignorecase == 2:
         converter = lambda val, map=map: \
-                    string.lower(map.get(string.lower(val), val))
+                    map.get(val.lower(), val).lower()
     elif ignorecase == 1:
         converter = lambda val, map=map: \
-                    map.get(string.lower(val), val)
+                    map.get(val.lower(), val)
     else:
         converter = lambda val, map=map: \
                     map.get(val, val)
--- src/engine/SCons/Variables/ListVariable.py (original)
+++ src/engine/SCons/Variables/ListVariable.py (refactored)
@@ -54,7 +54,7 @@
 
 __all__ = ['ListVariable',]
 
-import string
+#import string
 import UserList
 
 import SCons.Util
@@ -85,7 +85,7 @@
         if self.data == self.allowedElems:
             return 'all'
         else:
-            return string.join(self, ',')
+            return ','.join(self)
     def prepare_to_store(self):
         return self.__str__()
 
@@ -97,12 +97,12 @@
     elif val == 'all':
         val = allowedElems
     else:
-        val = filter(None, string.split(val, ','))
+        val = filter(None, val.split(','))
         val = map(lambda v, m=mapdict: m.get(v, v), val)
         notAllowed = filter(lambda v, aE=allowedElems: not v in aE, val)
         if notAllowed:
             raise ValueError("Invalid value(s) for option: %s" %
-                             string.join(notAllowed, ','))
+                             ','.join(notAllowed))
     return _ListVariable(val, allowedElems)
 
 
@@ -122,12 +122,11 @@
     A 'package list' option may either be 'all', 'none' or a list of
     package names (separated by space).
     """
-    names_str = 'allowed names: %s' % string.join(names, ' ')
+    names_str = 'allowed names: %s' % ' '.join(names)
     if SCons.Util.is_List(default):
-        default = string.join(default, ',')
-    help = string.join(
-        (help, '(all|none|comma-separated list of names)', names_str),
-        '\n    ')
+        default = ','.join(default)
+    help = '\n    '.join(
+        (help, '(all|none|comma-separated list of names)', names_str))
     return (key, help, default,
             None, #_validator,
             lambda val, elems=names, m=map: _converter(val, elems, m))
--- src/engine/SCons/Variables/PackageVariable.py (original)
+++ src/engine/SCons/Variables/PackageVariable.py (refactored)
@@ -54,7 +54,7 @@
 
 __all__ = ['PackageVariable',]
 
-import string
+#import string
 
 import SCons.Errors
 
@@ -64,7 +64,7 @@
 def _converter(val):
     """
     """
-    lval = string.lower(val)
+    lval = val.lower()
     if lval in __enable_strings: return True
     if lval in __disable_strings: return False
     #raise ValueError("Invalid value for boolean option: %s" % val)
@@ -95,9 +95,8 @@
     A 'package list' option may either be 'all', 'none' or a list of
     package names (seperated by space).
     """
-    help = string.join(
-        (help, '( yes | no | /path/to/%s )' % key),
-        '\n    ')
+    help = '\n    '.join(
+        (help, '( yes | no | /path/to/%s )' % key))
     return (key, help, default,
             lambda k, v, e, f=searchfunc: _validator(k,v,e,f),
             _converter)
--- src/engine/SCons/Variables/__init__.py (original)
+++ src/engine/SCons/Variables/__init__.py (refactored)
@@ -30,7 +30,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 import sys
 
 import SCons.Environment
@@ -297,7 +297,7 @@
             return self.FormatVariableHelpText(env, opt.key, opt.help, opt.default, actual, opt.aliases)
         lines = filter(None, map(format, options))
 
-        return string.join(lines, '')
+        return ''.join(lines)
 
     format  = '\n%s: %s\n    default: %s\n    actual: %s\n'
     format_ = '\n%s: %s\n    default: %s\n    actual: %s\n    aliases: %s\n'
--- src/script/scons-time.py (original)
+++ src/script/scons-time.py (refactored)
@@ -41,7 +41,7 @@
 import os.path
 import re
 import shutil
-import string
+#import string
 import sys
 import tempfile
 import time
@@ -539,7 +539,7 @@
 
         for file in files:
             base = os.path.splitext(file)[0]
-            run, index = string.split(base, '-')[-2:]
+            run, index = base.split('-')[-2:]
 
             run = int(run)
             index = int(index)
--- src/script/sconsign.py (original)
+++ src/script/sconsign.py (refactored)
@@ -161,7 +161,7 @@
 
 import cPickle
 import imp
-import string
+#import string
 import whichdb
 
 import SCons.SConsign
@@ -182,7 +182,7 @@
 
 def my_import(mname):
     if '.' in mname:
-        i = string.rfind(mname, '.')
+        i = mname.rfind('.')
         parent = my_import(mname[:i])
         fp, pathname, description = imp.find_module(mname[i+1:],
                                                     parent.__path__)
@@ -241,7 +241,7 @@
         result.append(nodeinfo_string(bkids[i], bkidsigs[i], "        "))
     if result == []:
         return None
-    return string.join(result, "\n        ")
+    return "\n        ".join(result)
 
 map_field = {
     'action'    : map_action,
@@ -277,7 +277,7 @@
         l.append('%s: %s' % (repr(k), repr(d.get(k))))
     if '\n' in name:
         name = repr(name)
-    return name + ': {' + string.join(l, ', ') + '}'
+    return name + ': {' + ', '.join(l) + '}'
 
 def nodeinfo_cooked(name, ninfo, prefix=""):
     try:
@@ -292,7 +292,7 @@
         sep = '\n    ' + prefix
     else:
         sep = ' '
-    return string.join(outlist, sep)
+    return sep.join(outlist)
 
 nodeinfo_string = nodeinfo_cooked
 
--- test/Case.py (original)
+++ test/Case.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 import sys
 import TestSCons
 
@@ -73,7 +73,7 @@
     sys.stdout.flush()
 
     test.run(stderr = None, status = None)
-    test.fail_test(string.split(test.stderr(), '\n')[0] ==
+    test.fail_test(test.stderr().split('\n')[0] ==
                    "scons: *** Multiple ways to build the same target were specified for: foo.o")
 
 else:
--- test/Flatten.py (original)
+++ test/Flatten.py (refactored)
@@ -28,7 +28,7 @@
 Test that the Flatten() function is available and works.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -64,7 +64,7 @@
 
 def double_backslash(f):
     p = test.workpath(f)
-    return string.replace(p, '\\', '\\\\')
+    return p.replace('\\', '\\\\')
 
 expect = """\
 ['begin', '%s', 'middle', '%s', 'end']
--- test/LoadableModule.py (original)
+++ test/LoadableModule.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 
 import TestCmd
@@ -97,13 +97,13 @@
 foo1_name = {'darwin' : 'foo1'}.get(sys.platform[:6], dll_+'foo1'+_dll)
 
 test.write('dlopenprog.c',
-           string.replace(dlopenprog, '__foo1_name__', foo1_name))
+           dlopenprog.replace('__foo1_name__', foo1_name))
 
 test.run(arguments = '.',
          stderr=TestSCons.noisy_ar,
          match=TestSCons.match_re_dotall)
 
-if string.find(sys.platform, 'darwin') != -1:
+if sys.platform.find('darwin') != -1:
     test.run(program='/usr/bin/file',
              arguments = "foo1",
              match = TestCmd.match_re,
--- test/NodeOps.py (original)
+++ test/NodeOps.py (refactored)
@@ -36,7 +36,7 @@
 import sys
 import TestSCons
 import os
-import string
+#import string
 
 _exe = TestSCons._exe
 lib_ = TestSCons.lib_
@@ -47,7 +47,7 @@
     
 if os.name == 'posix':
     os.environ['LD_LIBRARY_PATH'] = '.'
-if string.find(sys.platform, 'irix') > -1:
+if sys.platform.find('irix') > -1:
     os.environ['LD_LIBRARYN32_PATH'] = '.'
 
 test = TestSCons.TestSCons()
--- test/WhereIs.py (original)
+++ test/WhereIs.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -57,13 +57,13 @@
                   test.workpath('sub2'),
                   test.workpath('sub3'),
                   test.workpath('sub4'),
-                ] + string.split(env_path, os.pathsep)
+                ] + env_path.split(os.pathsep)
 
 pathdirs_1243 = [ test.workpath('sub1'),
                   test.workpath('sub2'),
                   test.workpath('sub4'),
                   test.workpath('sub3'),
-                ] + string.split(env_path, os.pathsep)
+                ] + env_path.split(os.pathsep)
 
 test.write('SConstruct', """
 SConscript('%s')
@@ -77,13 +77,13 @@
 env.Replace( XXXNAME='xxx.exe' )
 print env.WhereIs( '$XXXNAME', %s )
 """ % (subdir_SConscript,
-       repr(string.join(pathdirs_1234, os.pathsep)),
-       repr(string.join(pathdirs_1243, os.pathsep)),
+       repr(os.pathsep.join(pathdirs_1234)),
+       repr(os.pathsep.join(pathdirs_1243)),
        repr(pathdirs_1234),
        repr(pathdirs_1243),
        repr(pathdirs_1243),
        repr(sub4_xxx_exe),
-       repr(string.join(pathdirs_1243, os.pathsep)),
+       repr(os.pathsep.join(pathdirs_1243)),
       ))
 
 test.write(subdir_SConscript, """
@@ -93,13 +93,13 @@
 print env.WhereIs('xxx.exe', %s)
 print WhereIs('xxx.exe', %s)
 print WhereIs('xxx.exe', %s)
-""" % (repr(string.join(pathdirs_1234, os.pathsep)),
-       repr(string.join(pathdirs_1243, os.pathsep)),
+""" % (repr(os.pathsep.join(pathdirs_1234)),
+       repr(os.pathsep.join(pathdirs_1243)),
        repr(pathdirs_1234),
        repr(pathdirs_1243),
       ))
 
-os.environ['PATH'] = string.join(pathdirs_1234, os.pathsep)
+os.environ['PATH'] = os.pathsep.join(pathdirs_1234)
 
 expect = [ test.workpath(sub3_xxx_exe),
            test.workpath(sub3_xxx_exe),
@@ -116,10 +116,10 @@
          ]
 
 test.run(arguments = ".",
-         stdout = test.wrap_stdout(read_str = string.join(expect, "\n") + "\n",
+         stdout = test.wrap_stdout(read_str = "\n".join(expect) + "\n",
                                    build_str = "scons: `.' is up to date.\n"))
 
-os.environ['PATH'] = string.join(pathdirs_1243, os.pathsep)
+os.environ['PATH'] = os.pathsep.join(pathdirs_1243)
 
 expect = [ test.workpath(sub4_xxx_exe),
            test.workpath(sub3_xxx_exe),
@@ -136,7 +136,7 @@
          ]
 
 test.run(arguments = ".",
-         stdout = test.wrap_stdout(read_str = string.join(expect, "\n") + "\n",
+         stdout = test.wrap_stdout(read_str = "\n".join(expect) + "\n",
                                    build_str = "scons: `.' is up to date.\n"))
 
 
--- test/gnutools.py (original)
+++ test/gnutools.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import TestSCons
-import string
+#import string
 import sys
 
 _python_ = TestSCons._python_
@@ -116,8 +116,8 @@
 
 def testObject(test, obj, expect):
     contents = test.read(test.workpath('work1', obj))
-    line1 = string.split(contents,'\n')[0]
-    actual = string.join(string.split(line1))
+    line1 = contents.split('\n')[0]
+    actual = ' '.join(line1.split())
     if not expect == actual:
         print "%s:  %s != %s\n" % (obj, repr(expect), repr(actual))
         test.fail_test()
--- test/option--C.py (original)
+++ test/option--C.py (refactored)
@@ -25,16 +25,16 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import types
 
 import TestSCons
 
 def match_normcase(lines, matches):
     if not type(lines) is types.ListType:
-        lines = string.split(lines, "\n")
+        lines = lines.split("\n")
     if not type(matches) is types.ListType:
-        matches = string.split(matches, "\n")
+        matches = matches.split("\n")
     if len(lines) != len(matches):
         return
     for i in range(len(lines)):
--- test/option-j.py (original)
+++ test/option-j.py (refactored)
@@ -30,7 +30,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 
 import TestSCons
 
@@ -91,10 +91,10 @@
     test.run(arguments = args)
 
     str = test.read("f1")
-    start1,finish1 = map(float, string.split(str, "\n"))
+    start1,finish1 = map(float, str.split("\n"))
 
     str = test.read("f2")
-    start2,finish2 = map(float, string.split(str, "\n"))
+    start2,finish2 = map(float, str.split("\n"))
 
     return start2, finish1
 
@@ -149,10 +149,10 @@
 test.must_contain_all_lines(test.stderr(), [warn])
 
 str = test.read("f1")
-start1,finish1 = map(float, string.split(str, "\n"))
+start1,finish1 = map(float, str.split("\n"))
 
 str = test.read("f2")
-start2,finish2 = map(float, string.split(str, "\n"))
+start2,finish2 = map(float, str.split("\n"))
 
 test.fail_test(start2 < finish1)
 
--- test/python-version.py (original)
+++ test/python-version.py (refactored)
@@ -31,7 +31,7 @@
 
 import os
 import re
-import string
+#import string
 
 import TestCmd
 import TestSCons
--- test/special-filenames.py (original)
+++ test/special-filenames.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -57,7 +57,7 @@
 file_names = []
 for fn in attempt_file_names:
     try:
-        in_name = string.replace(fn, '$$', '$') + '.in'
+        in_name = fn.replace('$$', '$') + '.in'
         test.write(in_name, fn + '\n')
         file_names.append(fn)
     except IOError:
@@ -68,7 +68,7 @@
 def buildFileStr(fn):
     return "env.Build(source=r\"\"\"%s.in\"\"\", target=r\"\"\"%s.out\"\"\")" % ( fn, fn )
 
-xxx =  string.join(map(buildFileStr, file_names), '\n')
+xxx =  '\n'.join(map(buildFileStr, file_names))
 
 test.write("SConstruct", """
 env=Environment(BUILDERS = {'Build' : Builder(action = '%(_python_)s cat.py $TARGET $SOURCE')})
@@ -79,7 +79,7 @@
 test.run(arguments='.')
 
 for fn in file_names:
-    out_name = string.replace(fn, '$$', '$') + '.out'
+    out_name = fn.replace('$$', '$') + '.out'
     test.fail_test(test.read(out_name) != fn + '\n')
 
 test.pass_test()
--- test/subdivide.py (original)
+++ test/subdivide.py (refactored)
@@ -132,8 +132,8 @@
 """ % locals()
 
 if os.sep == '\\':
-    import string
-    expect = string.replace(expect, '\\', '\\\\')
+    #import string
+    expect = expect.replace('\\', '\\\\')
 
 test.must_match(['src', 'prog.exe'], expect)
 
--- test/textfile.py (original)
+++ test/textfile.py (refactored)
@@ -27,7 +27,7 @@
 import TestSCons
 
 import os
-import string
+#import string
 
 test = TestSCons.TestSCons()
 
@@ -63,8 +63,8 @@
 textparts = ['lalala', '42',
              'Goethe', 'Schiller',
              'tanteratei']
-foo1Text  = string.join(textparts, os.linesep)
-foo2Text  = string.join(textparts, '|*')
+foo1Text  = os.linesep.join(textparts)
+foo2Text  = '|*'.join(textparts)
 foo1aText = foo1Text + os.linesep
 foo2aText = foo2Text + '|*'
 
@@ -142,7 +142,7 @@
 line3b = 'This line has many substitutions'
 
 def matchem(file, lines):
-    lines = string.join(lines, os.linesep)
+    lines = os.linesep.join(lines)
     test.must_match(file, lines)
 
 matchem('text.txt', [line1, line2a, line3a])
--- test/AR/AR.py (original)
+++ test/AR/AR.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -39,7 +39,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment(LIBS = ['foo'], LIBPATH = ['.'])
--- test/AR/ARFLAGS.py (original)
+++ test/AR/ARFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -39,7 +39,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment(LIBS = ['foo'], LIBPATH = ['.'])
--- test/AS/ASPPCOMSTR.py (original)
+++ test/AS/ASPPCOMSTR.py (refactored)
@@ -29,7 +29,7 @@
 the displayed assembler string.
 """
 
-import string
+#import string
 
 import TestSCons
 
--- test/AS/as-live.py (original)
+++ test/AS/as-live.py (refactored)
@@ -28,7 +28,7 @@
 Verify correct use of the live 'as' assembler.
 """
 
-import string
+#import string
 import sys
 
 import TestSCons
@@ -43,7 +43,7 @@
 if not test.detect('AS', 'as'):
     test.skip_test("as not found; skipping test\n")
 
-x86 = (sys.platform == 'win32' or string.find(sys.platform, 'linux') != -1)
+x86 = (sys.platform == 'win32' or sys.platform.find('linux') != -1)
 
 if not x86:
     test.skip_test("skipping as test on non-x86 platform '%s'\n" % sys.platform)
@@ -56,7 +56,7 @@
 open('%s', 'wb').write("wrapper.py: %%s\\n" %% sys.argv[-1])
 cmd = " ".join(sys.argv[1:])
 os.system(cmd)
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """\
 aaa = Environment()
--- test/AS/ml.py (original)
+++ test/AS/ml.py (refactored)
@@ -28,7 +28,7 @@
 Verify correct use of the live 'ml' assembler.
 """
 
-import string
+#import string
 import sys
 
 import TestSCons
@@ -51,7 +51,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 import os
--- test/AS/nasm.py (original)
+++ test/AS/nasm.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -44,7 +44,7 @@
 if not nasm:
     test.skip_test('nasm not found; skipping test\n')
 
-if string.find(sys.platform, 'linux') == -1:
+if sys.platform.find('linux') == -1:
     test.skip_test("skipping test on non-Linux platform '%s'\n" % sys.platform)
 
 try:
@@ -53,7 +53,7 @@
 except OSError:
     test.skip_test('could not determine nasm version; skipping test\n')
 else:
-    version = string.split(stdout.read())[2]
+    version = stdout.read().split()[2]
     if version[:4] != '0.98':
         test.skip_test("skipping test of nasm version %s\n" % version)
 
@@ -71,7 +71,7 @@
 nasm_format = 'elf'
 format_map = {}
 for k, v in format_map.items():
-    if string.find(sys.platform, k) != -1:
+    if sys.platform.find(k) != -1:
         nasm_format = v
         break
 
@@ -80,7 +80,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 eee = Environment(tools = ['gcc', 'gnulink', 'nasm'],
--- test/AddOption/help.py (original)
+++ test/AddOption/help.py (refactored)
@@ -29,7 +29,7 @@
 it's not).
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -56,27 +56,27 @@
 ]
 
 test.run(arguments = '-h')
-lines = string.split(test.stdout(), '\n')
+lines = test.stdout().split('\n')
 missing = filter(lambda e, l=lines: not e in l, expected_lines)
 
 if missing:
     print "====== STDOUT:"
     print test.stdout()
     print "====== Missing the following lines in the above AddOption() help output:"
-    print string.join(missing, "\n")
+    print "\n".join(missing)
     test.fail_test()
 
 test.unlink('SConstruct')
 
 test.run(arguments = '-h')
-lines = string.split(test.stdout(), '\n')
+lines = test.stdout().split('\n')
 unexpected = filter(lambda e, l=lines: e in l, expected_lines)
 
 if unexpected:
     print "====== STDOUT:"
     print test.stdout()
     print "====== Unexpected lines in the above non-AddOption() help output:"
-    print string.join(unexpected, "\n")
+    print "\n".join(unexpected)
     test.fail_test()
 
 test.pass_test()
--- test/Builder/multi/same-overrides.py (original)
+++ test/Builder/multi/same-overrides.py (refactored)
@@ -28,7 +28,7 @@
 Verify that everything works if two multi calls have the same overrides.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -56,7 +56,7 @@
 test.write('file4a.in', 'file4a.in\n')
 test.write('file4b.in', 'file4b.in\n')
 
-python_expr = string.replace(TestSCons.python, '\\', '\\\\')
+python_expr = TestSCons.python.replace('\\', '\\\\')
 act = TestSCons.re_escape('"%s" build.py \$foo \$TARGET \$SOURCES' % python_expr)
 
 expect = ("""
--- test/CC/CC.py (original)
+++ test/CC/CC.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 import TestSCons
 
@@ -151,7 +151,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment()
--- test/CC/SHCC.py (original)
+++ test/CC/SHCC.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -38,7 +38,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment()
--- test/CC/SHCCFLAGS.py (original)
+++ test/CC/SHCCFLAGS.py (refactored)
@@ -27,7 +27,7 @@
 import sys
 import TestSCons
 import os
-import string
+#import string
     
 test = TestSCons.TestSCons()
 
@@ -37,7 +37,7 @@
 
 if os.name == 'posix':
     os.environ['LD_LIBRARY_PATH'] = '.'
-if string.find(sys.platform, 'irix') > -1:
+if sys.platform.find('irix') > -1:
     os.environ['LD_LIBRARYN32_PATH'] = '.'
 
 test.write('SConstruct', """
--- test/CC/SHCFLAGS.py (original)
+++ test/CC/SHCFLAGS.py (refactored)
@@ -27,7 +27,7 @@
 import sys
 import TestSCons
 import os
-import string
+#import string
     
 test = TestSCons.TestSCons()
 
@@ -37,7 +37,7 @@
 
 if os.name == 'posix':
     os.environ['LD_LIBRARY_PATH'] = '.'
-if string.find(sys.platform, 'irix') > -1:
+if sys.platform.find('irix') > -1:
     os.environ['LD_LIBRARYN32_PATH'] = '.'
 
 test.write('SConstruct', """
--- test/CPPPATH/absolute-path.py (original)
+++ test/CPPPATH/absolute-path.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -45,7 +45,7 @@
 # Verify that including an absolute path still works even if they
 # double the separators in the input file.  This can happen especially
 # on Windows if they use \\ to represent an escaped backslash.
-inc2_h = string.replace(inc2_h, os.sep, os.sep+os.sep)
+inc2_h = inc2_h.replace(os.sep, os.sep+os.sep)
 
 test.write(['work', 'SConstruct'], """\
 Program('prog.c')
--- test/CXX/CXX.py (original)
+++ test/CXX/CXX.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 import TestSCons
 
@@ -181,7 +181,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment()
--- test/CXX/CXXFLAGS.py (original)
+++ test/CXX/CXXFLAGS.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -39,7 +39,7 @@
 
 if os.name == 'posix':
     os.environ['LD_LIBRARY_PATH'] = '.'
-if string.find(sys.platform, 'irix') > -1:
+if sys.platform.find('irix') > -1:
     os.environ['LD_LIBRARYN32_PATH'] = '.'
 
 test = TestSCons.TestSCons()
--- test/CXX/SHCXX.py (original)
+++ test/CXX/SHCXX.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -38,7 +38,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment()
--- test/CXX/SHCXXFLAGS.py (original)
+++ test/CXX/SHCXXFLAGS.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -38,7 +38,7 @@
 
 if os.name == 'posix':
     os.environ['LD_LIBRARY_PATH'] = '.'
-if string.find(sys.platform, 'irix') > -1:
+if sys.platform.find('irix') > -1:
     os.environ['LD_LIBRARYN32_PATH'] = '.'
 
 test = TestSCons.TestSCons()
--- test/Configure/config-h.py (original)
+++ test/Configure/config-h.py (refactored)
@@ -30,14 +30,14 @@
 
 import os
 import re
-import string
+#import string
 
 import TestSCons
 
 test = TestSCons.TestSCons(match = TestSCons.match_exact)
 
 lib = test.Configure_lib
-LIB = "LIB" + string.upper(lib)
+LIB = "LIB" + lib.upper()
 
 test.write('SConstruct', """\
 env = Environment()
@@ -85,7 +85,7 @@
 expected_stdout = test.wrap_stdout(build_str=expected_build_str,
                                        read_str=expected_read_str)
 
-expected_config_h = string.replace("""\
+expected_config_h = ("""\
 #ifndef CONFIG_H_SEEN
 #define CONFIG_H_SEEN
 
@@ -130,7 +130,7 @@
 /* #undef HAVE_LIBHOPEFULLYNOLIB2 */
 
 #endif /* CONFIG_H_SEEN */
-""" % locals(), "\n", os.linesep)
+""" % locals()).replace("\n", os.linesep)
 
 test.run(stdout=expected_stdout)
 
--- test/DVIPDF/DVIPDF.py (original)
+++ test/DVIPDF/DVIPDF.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -114,7 +114,7 @@
 cmd = " ".join(sys.argv[1:])
 open('%s', 'ab').write("%%s\\n" %% cmd)
 os.system(cmd)
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/DVIPDF/DVIPDFFLAGS.py (original)
+++ test/DVIPDF/DVIPDFFLAGS.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -118,7 +118,7 @@
 cmd = " ".join(sys.argv[1:])
 open('%s', 'ab').write("%%s\\n" %% cmd)
 os.system(cmd)
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/DVIPS/DVIPS.py (original)
+++ test/DVIPS/DVIPS.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -126,7 +126,7 @@
 cmd = " ".join(sys.argv[1:])
 open('%s', 'ab').write("%%s\\n" %% cmd)
 os.system(cmd)
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/DVIPS/DVIPSFLAGS.py (original)
+++ test/DVIPS/DVIPSFLAGS.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -133,7 +133,7 @@
 cmd = " ".join(sys.argv[1:])
 open('%s', 'ab').write("%%s\\n" %% cmd)
 os.system(cmd)
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/Deprecated/BuildDir.py (original)
+++ test/Deprecated/BuildDir.py (refactored)
@@ -32,7 +32,7 @@
 Note that using BuildDir() does not yet print a deprecation warning.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -191,9 +191,9 @@
 def blank_output(err):
     if not err:
         return 1
-    stderrlines = filter(lambda l: l, string.split(err, '\n'))
+    stderrlines = filter(lambda l: l, err.split('\n'))
     msg = "warning: tempnam() possibly used unsafely"
-    stderrlines = filter(lambda l, msg=msg: string.find(l, msg) == -1,
+    stderrlines = filter(lambda l, msg=msg: l.find(msg) == -1,
                          stderrlines)
     return len(stderrlines) == 0
 
--- test/Deprecated/debug-stree.py (original)
+++ test/Deprecated/debug-stree.py (refactored)
@@ -29,7 +29,7 @@
 that indicates the state of various Node status flags.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -98,7 +98,7 @@
 
 test.run(arguments = "--debug=stree foo.xxx",
          stderr = stderr)
-test.fail_test(string.count(test.stdout(), stree) != 1)
+test.fail_test(test.stdout().count(stree) != 1)
 
 stree2 = """
  E         = exists
@@ -130,7 +130,7 @@
 
 test.run(arguments = "--no-exec --debug=stree foo.xxx",
          stderr = stderr)
-test.fail_test(string.count(test.stdout(), stree2) != 1)
+test.fail_test(test.stdout().count(stree2) != 1)
 
 test.pass_test()
 
--- test/Deprecated/Options/BoolOption.py (original)
+++ test/Deprecated/Options/BoolOption.py (refactored)
@@ -28,7 +28,7 @@
 Test the BoolOption canned Option type.
 """
 
-import string
+#import string
 
 try:
     True, False
@@ -43,7 +43,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 
--- test/Deprecated/Options/EnumOption.py (original)
+++ test/Deprecated/Options/EnumOption.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 
 import TestSCons
 
@@ -38,7 +38,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 
--- test/Deprecated/Options/ListOption.py (original)
+++ test/Deprecated/Options/ListOption.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -39,7 +39,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     r = result[1:len(expect)+1]
     assert r == expect, (r, expect)
 
--- test/Deprecated/Options/Options.py (original)
+++ test/Deprecated/Options/Options.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import TestSCons
-import string
+#import string
 
 test = TestSCons.TestSCons(match = TestSCons.match_re_dotall)
 
@@ -36,7 +36,7 @@
 Default(env.Alias('dummy', None))
 """)
 test.run()
-cc, ccflags = string.split(test.stdout(), '\n')[1:3]
+cc, ccflags = test.stdout().split('\n')[1:3]
 
 test.write('SConstruct', """
 # test validator.  Change a key and add a new one to the environment
@@ -130,26 +130,26 @@
 
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 test.run(stderr=warnings)
-check(['0', '1', cc, string.strip(ccflags + ' -g'), 'v', 'v'])
+check(['0', '1', cc, (ccflags + ' -g').strip(), 'v', 'v'])
 
 test.run(arguments='RELEASE_BUILD=1', stderr=warnings)
-check(['1', '1', cc, string.strip(ccflags + ' -O -g'), 'v', 'v'])
+check(['1', '1', cc, (ccflags + ' -O -g').strip(), 'v', 'v'])
 
 test.run(arguments='RELEASE_BUILD=1 DEBUG_BUILD=0', stderr=warnings)
-check(['1', '0', cc, string.strip(ccflags + ' -O'), 'v', 'v'])
+check(['1', '0', cc, (ccflags + ' -O').strip(), 'v', 'v'])
 
 test.run(arguments='CC=not_a_c_compiler', stderr=warnings)
-check(['0', '1', 'not_a_c_compiler', string.strip(ccflags + ' -g'), 'v', 'v'])
+check(['0', '1', 'not_a_c_compiler', (ccflags + ' -g').strip(), 'v', 'v'])
 
 test.run(arguments='UNDECLARED=foo', stderr=warnings)
-check(['0', '1', cc, string.strip(ccflags + ' -g'), 'v', 'v'])
+check(['0', '1', cc, (ccflags + ' -g').strip(), 'v', 'v'])
 
 test.run(arguments='CCFLAGS=--taco', stderr=warnings)
-check(['0', '1', cc, string.strip(ccflags + ' -g'), 'v', 'v'])
+check(['0', '1', cc, (ccflags + ' -g').strip(), 'v', 'v'])
 
 test.write('custom.py', """
 DEBUG_BUILD=0
@@ -157,10 +157,10 @@
 """)
 
 test.run(stderr=warnings)
-check(['1', '0', cc, string.strip(ccflags + ' -O'), 'v', 'v'])
+check(['1', '0', cc, (ccflags + ' -O').strip(), 'v', 'v'])
 
 test.run(arguments='DEBUG_BUILD=1', stderr=warnings)
-check(['1', '1', cc, string.strip(ccflags + ' -O -g'), 'v', 'v'])
+check(['1', '1', cc, (ccflags + ' -O -g').strip(), 'v', 'v'])
 
 test.run(arguments='-h',
          stdout = """\
--- test/Deprecated/Options/PackageOption.py (original)
+++ test/Deprecated/Options/PackageOption.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 
 try:
     True, False
@@ -44,7 +44,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 
--- test/Deprecated/Options/PathOption.py (original)
+++ test/Deprecated/Options/PathOption.py (refactored)
@@ -31,7 +31,7 @@
 
 import os.path
 import re
-import string
+#import string
 
 import TestSCons
 
@@ -40,7 +40,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 #### test PathOption ####
--- test/Errors/execute-a-directory.py (original)
+++ test/Errors/execute-a-directory.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -41,7 +41,7 @@
 bld = Builder(action = '%s $SOURCES $TARGET')
 env = Environment(BUILDERS = { 'bld' : bld })
 env.bld(target = 'f3', source = 'f3.in')
-""" % string.replace(test.workdir, '\\', '\\\\'))
+""" % test.workdir.replace('\\', '\\\\'))
 
 test.run(arguments='.',
          stdout = test.wrap_stdout("%s f3.in f3\n" % test.workdir, error=1),
--- test/Errors/non-executable-file.py (original)
+++ test/Errors/non-executable-file.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -72,7 +72,7 @@
 bld = Builder(action = '%s $SOURCES $TARGET')
 env = Environment(BUILDERS = { 'bld': bld })
 env.bld(target = 'f1', source = 'f1.in')
-""" % string.replace(not_executable, '\\', '\\\\'))
+""" % not_executable.replace('\\', '\\\\'))
 
 test.run(arguments='.',
          stdout = test.wrap_stdout("%s f1.in f1\n" % not_executable, error=1),
--- test/Errors/nonexistent-executable.py (original)
+++ test/Errors/nonexistent-executable.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -39,7 +39,7 @@
 bld = Builder(action = '%s $SOURCES $TARGET')
 env = Environment(BUILDERS = { 'bld' : bld })
 env.bld(target = 'f1', source = 'f1.in')
-""" % string.replace(no_such_file, '\\', '\\\\'))
+""" % no_such_file.replace('\\', '\\\\'))
 
 test.run(arguments='.',
          stdout = test.wrap_stdout("%s f1.in f1\n" % no_such_file, error=1),
--- test/Fortran/F77.py (original)
+++ test/Fortran/F77.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -103,7 +103,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(F77 = '%(fc)s', tools = ['default', 'f77'], F77FILESUFFIXES = ['.f'])
--- test/Fortran/F77FLAGS.py (original)
+++ test/Fortran/F77FLAGS.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -84,7 +84,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(F77 = '%(fc)s', tools = ['default', 'f77'], F77FILESUFFIXES = [".f"])
--- test/Fortran/F90.py (original)
+++ test/Fortran/F90.py (refactored)
@@ -103,7 +103,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(F90 = '%(fc)s')
--- test/Fortran/F90FLAGS.py (original)
+++ test/Fortran/F90FLAGS.py (refactored)
@@ -110,7 +110,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(F90 = '%(fc)s')
--- test/Fortran/F95.py (original)
+++ test/Fortran/F95.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -105,7 +105,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(F95 = '%(fc)s')
--- test/Fortran/F95FLAGS.py (original)
+++ test/Fortran/F95FLAGS.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -112,7 +112,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(F95 = '%(fc)s')
--- test/Fortran/FORTRAN.py (original)
+++ test/Fortran/FORTRAN.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -98,7 +98,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(FORTRAN = '%(fc)s')
--- test/Fortran/FORTRANFLAGS.py (original)
+++ test/Fortran/FORTRANFLAGS.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -102,7 +102,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(FORTRAN = '%(fc)s')
--- test/Fortran/SHF77.py (original)
+++ test/Fortran/SHF77.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -101,7 +101,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(SHF77 = '%(fc)s')
--- test/Fortran/SHF77FLAGS.py (original)
+++ test/Fortran/SHF77FLAGS.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -82,7 +82,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(SHF77 = '%(fc)s')
--- test/Fortran/SHF90.py (original)
+++ test/Fortran/SHF90.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -103,7 +103,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(SHF90 = '%(fc)s')
--- test/Fortran/SHF90FLAGS.py (original)
+++ test/Fortran/SHF90FLAGS.py (refactored)
@@ -106,7 +106,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(SHF90 = '%(fc)s')
--- test/Fortran/SHF95.py (original)
+++ test/Fortran/SHF95.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -102,7 +102,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(SHF95 = '%(fc)s')
--- test/Fortran/SHF95FLAGS.py (original)
+++ test/Fortran/SHF95FLAGS.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -110,7 +110,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(SHF95 = '%(fc)s')
--- test/Fortran/SHFORTRAN.py (original)
+++ test/Fortran/SHFORTRAN.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -96,7 +96,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(SHFORTRAN = '%(fc)s')
--- test/Fortran/SHFORTRANFLAGS.py (original)
+++ test/Fortran/SHFORTRANFLAGS.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -98,7 +98,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(SHFORTRAN = '%(fc)s')
--- test/GetOption/help.py (original)
+++ test/GetOption/help.py (refactored)
@@ -28,7 +28,7 @@
 Test use of GetOption('help') to short-circuit work.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -46,10 +46,10 @@
 expect = "GetOption('help') set"
 
 test.run(arguments = '-q -Q -h')
-test.fail_test(string.split(test.stdout(), '\n')[0] != expect)
+test.fail_test(test.stdout().split('\n')[0] != expect)
 
 test.run(arguments = '-q -Q --help')
-test.fail_test(string.split(test.stdout(), '\n')[0] != expect)
+test.fail_test(test.stdout().split('\n')[0] != expect)
 
 test.pass_test()
 
--- test/Ghostscript/GS.py (original)
+++ test/Ghostscript/GS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -80,7 +80,7 @@
 cmd = " ".join(sys.argv[1:])
 open('%s', 'ab').write("%%s\\n" %% cmd)
 os.system(cmd)
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """\
 import os
--- test/Ghostscript/GSFLAGS.py (original)
+++ test/Ghostscript/GSFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -88,7 +88,7 @@
 cmd = " ".join(sys.argv[1:])
 open('%s', 'ab').write("%%s\\n" %% cmd)
 os.system(cmd)
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """\
 import os
--- test/Install/Install.py (original)
+++ test/Install/Install.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 import time
 
 import TestSCons
@@ -44,7 +44,7 @@
 f4_out = test.workpath('work', 'export', 'f4.out')
 f5_txt = test.workpath('outside', 'f5.txt')
 f6_txt = test.workpath('outside', 'f6.txt')
-f6_sep = string.replace(f6_txt, os.sep, '/')
+f6_sep = f6_txt.replace(os.sep, '/')
 
 _SUBDIR_f4_out = os.path.join('$SUBDIR', 'f4.out')
 
--- test/Interactive/implicit-VariantDir.py (original)
+++ test/Interactive/implicit-VariantDir.py (refactored)
@@ -37,7 +37,7 @@
 """
 
 import os.path
-import string
+#import string
 
 import TestSCons
 
@@ -94,7 +94,7 @@
 
 # Start scons, to build only "build/foo"
 build_foo_exe   = os.path.join('build', 'foo' + TestSCons._exe)
-_build_foo_exe_ = '"%s"' % string.replace(build_foo_exe, '\\', '\\\\')
+_build_foo_exe_ = '"%s"' % build_foo_exe.replace('\\', '\\\\')
 abs_foo_exe     = test.workpath(build_foo_exe)
 
 scons = test.start(arguments = '--interactive', combine=1)
--- test/Interactive/shell.py (original)
+++ test/Interactive/shell.py (refactored)
@@ -28,7 +28,7 @@
 to shell out of interactive mode.
 """
 
-import string
+#import string
 import sys
 
 import TestSCons
@@ -38,7 +38,7 @@
 _python_ = TestSCons._python_
 
 shell_command_py    = test.workpath('shell_command.py')
-_shell_command_py_  = '"%s"' % string.replace(shell_command_py, '\\', '\\\\')
+_shell_command_py_  = '"%s"' % shell_command_py.replace('\\', '\\\\')
 
 test.write(shell_command_py, """\
 print 'hello from shell_command.py'
--- test/Java/JAR.py (original)
+++ test/Java/JAR.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -130,7 +130,7 @@
 import sys
 open('%s', 'ab').write("wrapper.py %%s\\n" %% " ".join(sys.argv[1:]))
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment(tools = ['javac', 'jar'],
@@ -236,7 +236,7 @@
 test.run(arguments = '.')
 
 expected_wrapper_out = "wrapper.py %(where_jar)s cf bar.jar classes/com/sub/bar\n"
-expected_wrapper_out = string.replace(expected_wrapper_out, '/', os.sep)
+expected_wrapper_out = expected_wrapper_out.replace('/', os.sep)
 test.must_match('wrapper.out',
                 expected_wrapper_out % locals())
 
--- test/Java/JARCHDIR.py (original)
+++ test/Java/JARCHDIR.py (refactored)
@@ -34,7 +34,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -100,7 +100,7 @@
 # env.subst() in the code that handle jar).
 
 p = test.workpath('out')
-for d in string.split(test.workpath('in'), os.sep):
+for d in test.workpath('in').split(os.sep):
     p = p + d
     test.subdir(p)
     p = p + os.sep
--- test/Java/JARFLAGS.py (original)
+++ test/Java/JARFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -69,7 +69,7 @@
 adding: src/Example1\.class.*
 """ % locals())
 
-expect = string.replace(expect, '/', os.sep)
+expect = expect.replace('/', os.sep)
 
 test.run(arguments = '.',
          match=TestSCons.match_re_dotall,
--- test/Java/JAVABOOTCLASSPATH.py (original)
+++ test/Java/JAVABOOTCLASSPATH.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -83,7 +83,7 @@
 # we'll just take the easy way out and examine the -n output to see if
 # the expected option shows up on the command line.
 
-bootclasspath = string.join(['dir1', 'dir2'], os.pathsep)
+bootclasspath = os.pathsep.join(['dir1', 'dir2'])
 
 expect = """\
 %(where_javac)s -bootclasspath %(bootclasspath)s -d class -sourcepath com com/Example1.java
--- test/Java/JAVACFLAGS.py (original)
+++ test/Java/JAVACFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -57,7 +57,7 @@
 """)
 
 expected_wrapper_out = "%(where_javac)s -O -d classes -sourcepath src src/Example1.java\n"
-expected_wrapper_out = string.replace(expected_wrapper_out, '/', os.sep)
+expected_wrapper_out = expected_wrapper_out.replace('/', os.sep)
 test.run(arguments = '.',
          stdout = test.wrap_stdout(expected_wrapper_out % locals()))
 
--- test/Java/JAVAH.py (original)
+++ test/Java/JAVAH.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -108,7 +108,7 @@
 import sys
 open('%s', 'ab').write("wrapper.py %%s\\n" %% " ".join(sys.argv[1:]))
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment(tools = ['javac', 'javah', 'install'],
--- test/Java/RMIC.py (original)
+++ test/Java/RMIC.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -100,7 +100,7 @@
 import sys
 open('%s', 'ab').write("wrapper.py %%s\\n" %% " ".join(sys.argv[1:]))
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment(tools = ['javac', 'rmic'],
--- test/LEX/live.py (original)
+++ test/LEX/live.py (refactored)
@@ -28,7 +28,7 @@
 Test LEX and LEXFLAGS with a live lex.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -48,7 +48,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment()
--- test/LINK/LINK.py (original)
+++ test/LINK/LINK.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -39,7 +39,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment()
--- test/LINK/LINKCOMSTR.py (original)
+++ test/LINK/LINKCOMSTR.py (refactored)
@@ -29,7 +29,7 @@
 the displayed linker string.
 """
 
-import string
+#import string
 
 import TestSCons
 
--- test/LINK/LINKFLAGS.py (original)
+++ test/LINK/LINKFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -40,7 +40,7 @@
 open('%s', 'wb').write("wrapper.py\\n")
 args = filter(lambda s: s != 'fake_link_flag', sys.argv[1:])
 os.system(" ".join(args))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment()
--- test/LINK/SHLINK.py (original)
+++ test/LINK/SHLINK.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -40,7 +40,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment()
--- test/LINK/SHLINKFLAGS.py (original)
+++ test/LINK/SHLINKFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -41,7 +41,7 @@
 open('%s', 'wb').write("wrapper.py\\n")
 args = filter(lambda s: s != 'fake_shlink_flag', sys.argv[1:])
 os.system(" ".join(args))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment()
--- test/Libs/SharedLibrary.py (original)
+++ test/Libs/SharedLibrary.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -202,13 +202,13 @@
 
 if os.name == 'posix':
     os.environ['LD_LIBRARY_PATH'] = '.'
-if string.find(sys.platform, 'irix') != -1:
+if sys.platform.find('irix') != -1:
     os.environ['LD_LIBRARYN32_PATH'] = '.'
 
 test.run(program = test.workpath('prog'),
          stdout = "f1.c\nf2a.c\nf2b.c\nf2c.c\nf3a.c\nf3b.c\nf3c.c\nprog.c\n")
 
-if sys.platform == 'win32' or string.find(sys.platform, 'irix') != -1:
+if sys.platform == 'win32' or sys.platform.find('irix') != -1:
     test.run(arguments = '-f SConstructFoo')
 else:
     test.run(arguments = '-f SConstructFoo', status=2, stderr='''\
@@ -274,9 +274,9 @@
 
     # Make sure there is (at most) one mention each of the
     # appropriate .def and .lib files per line.
-    for line in string.split(test.stdout(), '\n'):
-        test.fail_test(string.count(line, 'foo4.def') > 1)
-        test.fail_test(string.count(line, 'foo4.lib') > 1)
+    for line in test.stdout().split('\n'):
+        test.fail_test(line.count('foo4.def') > 1)
+        test.fail_test(line.count('foo4.lib') > 1)
 
     test.run(program = test.workpath('progbar'),
              stdout = "f4.c\nprogbar.c\n")
--- test/M4/M4.py (original)
+++ test/M4/M4.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -73,7 +73,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment(tools=['default', 'm4'],
--- test/MSVS/vs-8.0-x64-files.py (original)
+++ test/MSVS/vs-8.0-x64-files.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSConsMSVS
 
@@ -48,9 +48,9 @@
 # We didn't create an API for putting parameters like this into
 # the common generated and expected files.  Until we do, just patch
 # in the values.
-expected_slnfile = string.replace(expected_slnfile, 'Win32', 'x64')
-expected_vcprojfile = string.replace(expected_vcprojfile, 'Win32', 'x64')
-SConscript_contents = string.replace(SConscript_contents, '\'Release\'', '\'Release|x64\'')
+expected_slnfile = expected_slnfile.replace('Win32', 'x64')
+expected_vcprojfile = expected_vcprojfile.replace('Win32', 'x64')
+SConscript_contents = SConscript_contents.replace('\'Release\'', '\'Release|x64\'')
 
 
 
--- test/Perforce/Perforce.py (original)
+++ test/Perforce/Perforce.py (refactored)
@@ -32,7 +32,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -78,7 +78,7 @@
             try:
                 spawnv = os.spawnv
             except AttributeError:
-                os.system(string.join(args))
+                os.system(' '.join(args))
             else:
                 spawnv(os.P_NOWAIT, self.p4d, args)
                 self.sleep(2)
@@ -102,7 +102,7 @@
                 # is already clear.
                 pass
 
-        self.portflag = string.join(self.p4portflags)
+        self.portflag = ' '.join(self.p4portflags)
 
     def p4(self, *args, **kw):
         try:
@@ -110,7 +110,7 @@
         except KeyError:
             arguments = args[0]
             args = args[1:]
-        kw['arguments'] = string.join(self.p4portflags + [arguments])
+        kw['arguments'] = ' '.join(self.p4portflags + [arguments])
         kw['program'] = self.p4path
         return apply(self.run, args, kw)
 
@@ -209,7 +209,7 @@
 paths = [ 'aaa.in', 'bbb.in', 'ccc.in',
           'sub/ddd.in', 'sub/eee.in', 'sub/fff.in', 'sub/SConscript' ]
 paths = map(os.path.normpath, paths)
-args = '-c testclient1 add -t binary %s' % string.join(paths)
+args = '-c testclient1 add -t binary %s' % ' '.join(paths)
 test.p4(args, chdir='import')
 
 changespec = test.substitute("""
--- test/Progress/TARGET.py (original)
+++ test/Progress/TARGET.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -59,7 +59,7 @@
       \rSConstruct\r          \r.\r"""
 
 if os.linesep != '\n':
-    expect = string.replace(expect, '\n', os.linesep)
+    expect = expect.replace('\n', os.linesep)
 
 test.run(arguments = '-Q .', stdout=expect)
 
--- test/Progress/file.py (original)
+++ test/Progress/file.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -74,7 +74,7 @@
 """
 
 if os.linesep != '\n':
-    expect = string.replace(expect, '\n', os.linesep)
+    expect = expect.replace('\n', os.linesep)
 
 test.must_match('progress.out', expect)
 
--- test/Progress/spinner.py (original)
+++ test/Progress/spinner.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -59,7 +59,7 @@
 \\\r|\r"""
 
 if os.linesep != '\n':
-    expect = string.replace(expect, '\n', os.linesep)
+    expect = expect.replace('\n', os.linesep)
 
 test.run(arguments = '-Q .', stdout=expect)
 
--- test/QT/QTFLAGS.py (original)
+++ test/QT/QTFLAGS.py (refactored)
@@ -147,9 +147,9 @@
                 ['work1', 'mmmanother_ui_file.cxx'])
 
 def _flagTest(test,fileToContentsStart):
-    import string
+    #import string
     for f,c in fileToContentsStart.items():
-        if string.find(test.read(test.workpath('work1', f)), c) != 0:
+        if test.read(test.workpath('work1', f)).find(c) != 0:
             return 1
     return 0
 
--- test/QT/copied-env.py (original)
+++ test/QT/copied-env.py (refactored)
@@ -28,7 +28,7 @@
 Test Qt with a copied construction environment.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -68,10 +68,10 @@
 
 test.run()
 
-moc_MyForm = filter(lambda x: string.find(x, 'moc_MyForm') != -1,
-                    string.split(test.stdout(), '\n'))
+moc_MyForm = filter(lambda x: x.find('moc_MyForm') != -1,
+                    test.stdout().split('\n'))
 
-MYLIB_IMPL = filter(lambda x: string.find(x, 'MYLIB_IMPL') != -1, moc_MyForm)
+MYLIB_IMPL = filter(lambda x: x.find('MYLIB_IMPL') != -1, moc_MyForm)
 
 if not MYLIB_IMPL:
     print "Did not find MYLIB_IMPL on moc_MyForm compilation line:"
--- test/QT/installed.py (original)
+++ test/QT/installed.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -191,7 +191,7 @@
     # an indication that it built correctly) but don't fail the test.
     expect = 'cannot connect to X server'
     test.fail_test(test.stdout())
-    test.fail_test(string.find(test.stderr(), expect) == -1)
+    test.fail_test(test.stderr().find(expect) == -1)
     if test.status != 1 and (test.status>>8) != 1:
         sys.stdout.write('test_realqt returned status %s\n' % test.status)
         test.fail_test()
@@ -206,8 +206,8 @@
 expect1 = "scons: warning: Could not detect qt, using empty QTDIR"
 expect2 = "scons: warning: Could not detect qt, using moc executable as a hint"
 
-test.fail_test(string.find(test.stderr(), expect1) == -1 and
-               string.find(test.stderr(), expect2) == -1)
+test.fail_test(test.stderr().find(expect1) == -1 and
+               test.stderr().find(expect2) == -1)
 
 
 test.pass_test()
--- test/QT/source-from-ui.py (original)
+++ test/QT/source-from-ui.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 
 import TestSCons
 
@@ -126,7 +126,7 @@
 test.must_not_exist(test.workpath(h))
 
 cppContents = test.read(test.workpath('build', cpp))
-test.fail_test(string.find(cppContents, '#include "aaa.ui.h"') == -1)
+test.fail_test(cppContents.find('#include "aaa.ui.h"') == -1)
 
 test.run(arguments = "variant_dir=1 chdir=1 " +
                      test.workpath('build', aaa_dll) )
--- test/QT/up-to-date.py (original)
+++ test/QT/up-to-date.py (refactored)
@@ -34,7 +34,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -133,7 +133,7 @@
 
 test.run(arguments = my_obj, stderr=None)
 
-expect = string.replace( my_obj, '/', os.sep )
+expect = my_obj.replace( '/', os.sep )
 test.up_to_date(options = '--debug=explain',
                 arguments = (expect),
                 stderr=None)
--- test/QT/warnings.py (original)
+++ test/QT/warnings.py (refactored)
@@ -30,7 +30,7 @@
 
 import os
 import re
-import string
+#import string
 
 import TestSCons
 
@@ -82,7 +82,7 @@
 if moc:
     import os.path
     qtdir = os.path.dirname(os.path.dirname(moc))
-    qtdir = string.replace(qtdir, '\\', '\\\\' )
+    qtdir = qtdir.replace('\\', '\\\\' )
 
     expect = """
 scons: warning: Could not detect qt, using moc executable as a hint \(QTDIR=%s\)
--- test/RANLIB/RANLIB.py (original)
+++ test/RANLIB/RANLIB.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -45,7 +45,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment(LIBS = ['foo'], LIBPATH = ['.'])
--- test/RANLIB/RANLIBFLAGS.py (original)
+++ test/RANLIB/RANLIBFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -44,7 +44,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment(LIBS = ['foo'], LIBPATH = ['.'])
--- test/Repository/LIBPATH.py (original)
+++ test/Repository/LIBPATH.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 import TestSCons
 
 test = TestSCons.TestSCons()
@@ -99,13 +99,13 @@
 dirs = ['.', workpath_foo, workpath_bar,
         'zzz', workpath_foo_zzz, workpath_bar_zzz]
 test.fail_test(test.read(['work', 'zzz.out']) !=
-               string.join(dirs, '\n') + '\n')
+               '\n'.join(dirs) + '\n')
 
 #dirs = [workpath_bar_yyy, '.', workpath_foo, workpath_bar]
 dirs = ['yyy', workpath_foo_yyy, workpath_bar_yyy,
         '.', workpath_foo, workpath_bar]
 test.fail_test(test.read(['work', 'yyy.out']) !=
-               string.join(dirs, '\n') + '\n')
+               '\n'.join(dirs) + '\n')
 
 #
 test.run(chdir = 'work', options = '-c', arguments = ".")
@@ -119,13 +119,13 @@
 dirs = ['.', workpath_foo, workpath_bar,
         'zzz', workpath_foo_zzz, workpath_bar_zzz]
 test.fail_test(test.read(['work', 'zzz.out']) !=
-               string.join(dirs, '\n') + '\n')
+               '\n'.join(dirs) + '\n')
 
 #dirs = ['yyy', workpath_bar_yyy, '.', workpath_foo, workpath_bar]
 dirs = ['yyy', workpath_foo_yyy, workpath_bar_yyy,
         '.', workpath_foo, workpath_bar]
 test.fail_test(test.read(['work', 'yyy.out']) !=
-               string.join(dirs, '\n') + '\n')
+               '\n'.join(dirs) + '\n')
 
 #
 test.pass_test()
--- test/Repository/SharedLibrary.py (original)
+++ test/Repository/SharedLibrary.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -115,7 +115,7 @@
         os.environ['DYLD_LIBRARY_PATH'] = test.workpath('work')
     else:
         os.environ['LD_LIBRARY_PATH'] = test.workpath('work')
-if string.find(sys.platform, 'irix') != -1:
+if sys.platform.find('irix') != -1:
     os.environ['LD_LIBRARYN32_PATH'] = test.workpath('work')
 
 test.run(program = test.workpath('work', 'prog'),
--- test/SCCS/diskcheck.py (original)
+++ test/SCCS/diskcheck.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 
 import TestSCons
 
@@ -107,7 +107,7 @@
 
 test.run(arguments = '--diskcheck=sccs', stderr = None)
 
-lines = string.split("""
+lines = """
 sccs get SConscript
 sccs get aaa.in
 cat(["aaa.out"], ["aaa.in"])
@@ -121,7 +121,7 @@
 sccs get fff.in
 cat(["sub/fff.out"], ["sub/fff.in"])
 cat(["sub/all"], ["sub/ddd.out", "sub/eee.out", "sub/fff.out"])
-""", '\n')
+""".split('\n')
 
 test.must_contain_all_lines(test.stdout(), lines)
 
--- test/SCCS/explicit.py (original)
+++ test/SCCS/explicit.py (refactored)
@@ -28,7 +28,7 @@
 Test explicit checkouts from local SCCS files.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -93,7 +93,7 @@
 
 test.run(arguments = '.', stderr = None)
 
-lines = string.split("""
+lines = """
 sccs get -e SConscript
 sccs get -e aaa.in
 cat(["aaa.out"], ["aaa.in"])
@@ -107,7 +107,7 @@
 sccs get -e fff.in
 cat(["sub/fff.out"], ["sub/fff.in"])
 cat(["sub/all"], ["sub/ddd.out", "sub/eee.out", "sub/fff.out"])
-""", '\n')
+""".split('\n')
 
 test.must_contain_all_lines(test.stdout(), lines)
 
--- test/SCCS/implicit.py (original)
+++ test/SCCS/implicit.py (refactored)
@@ -28,7 +28,7 @@
 Test transparent SCCS checkouts of implicit dependencies.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -70,10 +70,10 @@
 
 test.run(stderr = None)
 
-lines = string.split("""
+lines = """
 sccs get foo.c
 sccs get foo.h
-""", '\n')
+""".split('\n')
 
 test.must_contain_all_lines(test.stdout(), lines)
 
--- test/SCCS/transparent.py (original)
+++ test/SCCS/transparent.py (refactored)
@@ -28,7 +28,7 @@
 Test transparent checkouts from SCCS files in an SCCS subdirectory.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -93,7 +93,7 @@
 
 test.run(arguments = '.', stderr = None)
 
-lines = string.split("""
+lines = """
 sccs get SConscript
 sccs get aaa.in
 cat(["aaa.out"], ["aaa.in"])
@@ -107,7 +107,7 @@
 sccs get fff.in
 cat(["sub/fff.out"], ["sub/fff.in"])
 cat(["sub/all"], ["sub/ddd.out", "sub/eee.out", "sub/fff.out"])
-""", '\n')
+""".split('\n')
 
 test.must_contain_all_lines(test.stdout(), lines)
 
--- test/SWIG/live.py (original)
+++ test/SWIG/live.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 import sys
 
 import TestSCons
@@ -61,7 +61,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """\
 foo = Environment(SWIGFLAGS='-python',
--- test/TAR/TAR.py (original)
+++ test/TAR/TAR.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -91,7 +91,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment()
--- test/TAR/TARFLAGS.py (original)
+++ test/TAR/TARFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -97,7 +97,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 foo = Environment()
--- test/TEX/LATEX.py (original)
+++ test/TEX/LATEX.py (refactored)
@@ -30,7 +30,7 @@
 and that we can use this to wrap calls to the real latex utility.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -102,7 +102,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/TEX/LATEXFLAGS.py (original)
+++ test/TEX/LATEXFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -85,7 +85,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/TEX/PDFLATEX.py (original)
+++ test/TEX/PDFLATEX.py (refactored)
@@ -30,7 +30,7 @@
 and that we can use this to wrap calls to the real latex utility.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -102,7 +102,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/TEX/PDFLATEXFLAGS.py (original)
+++ test/TEX/PDFLATEXFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -85,7 +85,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/TEX/PDFTEX.py (original)
+++ test/TEX/PDFTEX.py (refactored)
@@ -30,7 +30,7 @@
 and that we can use this to wrap calls to the real latex utility.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -89,7 +89,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/TEX/PDFTEXFLAGS.py (original)
+++ test/TEX/PDFTEXFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -78,7 +78,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/TEX/TEX.py (original)
+++ test/TEX/TEX.py (refactored)
@@ -30,7 +30,7 @@
 and that we can use this to wrap calls to the real latex utility.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -89,7 +89,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
@@ -172,18 +172,18 @@
     test.must_exist('bar-latex.dvi')
 
     test.run(stderr = None)
-    output_lines = string.split(test.stdout(), '\n')
+    output_lines = test.stdout().split('\n')
 
-    reruns = filter(lambda x: string.find(x, 'latex -interaction=nonstopmode -recorder rerun.tex') != -1, output_lines)
+    reruns = filter(lambda x: x.find('latex -interaction=nonstopmode -recorder rerun.tex') != -1, output_lines)
     if len(reruns) != 2:
         print "Expected 2 latex calls, got %s:" % len(reruns)
-        print string.join(reruns, '\n')
+        print '\n'.join(reruns)
         test.fail_test()
 
-    bibtex = filter(lambda x: string.find(x, 'bibtex bibtex-test') != -1, output_lines)
+    bibtex = filter(lambda x: x.find('bibtex bibtex-test') != -1, output_lines)
     if len(bibtex) != 1:
         print "Expected 1 bibtex call, got %s:" % len(bibtex)
-        print string.join(bibtex, '\n')
+        print '\n'.join(bibtex)
         test.fail_test()
 
 test.pass_test()
--- test/TEX/TEXFLAGS.py (original)
+++ test/TEX/TEXFLAGS.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -78,7 +78,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
     test.write('SConstruct', """
 import os
--- test/Variables/BoolVariable.py (original)
+++ test/Variables/BoolVariable.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 
 try:
     True, False
@@ -44,7 +44,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 
--- test/Variables/EnumVariable.py (original)
+++ test/Variables/EnumVariable.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 
 import TestSCons
 
@@ -38,7 +38,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 
--- test/Variables/ListVariable.py (original)
+++ test/Variables/ListVariable.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -38,7 +38,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     r = result[1:len(expect)+1]
     assert r == expect, (r, expect)
 
--- test/Variables/PackageVariable.py (original)
+++ test/Variables/PackageVariable.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 
 try:
     True, False
@@ -44,7 +44,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 
--- test/Variables/PathVariable.py (original)
+++ test/Variables/PathVariable.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os.path
-import string
+#import string
 
 import TestSCons
 
@@ -39,7 +39,7 @@
 SConstruct_path = test.workpath('SConstruct')
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 #### test PathVariable ####
--- test/Variables/Variables.py (original)
+++ test/Variables/Variables.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import TestSCons
-import string
+#import string
 
 test = TestSCons.TestSCons()
 
@@ -125,26 +125,26 @@
 """)
 
 def check(expect):
-    result = string.split(test.stdout(), '\n')
+    result = test.stdout().split('\n')
     assert result[1:len(expect)+1] == expect, (result[1:len(expect)+1], expect)
 
 test.run()
-check(['0', '1', cc, string.strip(ccflags + ' -g'), 'v', 'v'])
+check(['0', '1', cc, (ccflags + ' -g').strip(), 'v', 'v'])
 
 test.run(arguments='RELEASE_BUILD=1')
-check(['1', '1', cc, string.strip(ccflags + ' -O -g'), 'v', 'v'])
+check(['1', '1', cc, (ccflags + ' -O -g').strip(), 'v', 'v'])
 
 test.run(arguments='RELEASE_BUILD=1 DEBUG_BUILD=0')
-check(['1', '0', cc, string.strip(ccflags + ' -O'), 'v', 'v'])
+check(['1', '0', cc, (ccflags + ' -O').strip(), 'v', 'v'])
 
 test.run(arguments='CC=not_a_c_compiler')
-check(['0', '1', 'not_a_c_compiler', string.strip(ccflags + ' -g'), 'v', 'v'])
+check(['0', '1', 'not_a_c_compiler', (ccflags + ' -g').strip(), 'v', 'v'])
 
 test.run(arguments='UNDECLARED=foo')
-check(['0', '1', cc, string.strip(ccflags + ' -g'), 'v', 'v'])
+check(['0', '1', cc, (ccflags + ' -g').strip(), 'v', 'v'])
 
 test.run(arguments='CCFLAGS=--taco')
-check(['0', '1', cc, string.strip(ccflags + ' -g'), 'v', 'v'])
+check(['0', '1', cc, (ccflags + ' -g').strip(), 'v', 'v'])
 
 test.write('custom.py', """
 DEBUG_BUILD=0
@@ -152,10 +152,10 @@
 """)
 
 test.run()
-check(['1', '0', cc, string.strip(ccflags + ' -O'), 'v', 'v'])
+check(['1', '0', cc, (ccflags + ' -O').strip(), 'v', 'v'])
 
 test.run(arguments='DEBUG_BUILD=1')
-check(['1', '1', cc, string.strip(ccflags + ' -O -g'), 'v', 'v'])
+check(['1', '1', cc, (ccflags + ' -O -g').strip(), 'v', 'v'])
 
 test.run(arguments='-h',
          stdout = """\
--- test/VariantDir/VariantDir.py (original)
+++ test/VariantDir/VariantDir.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -229,9 +229,9 @@
 def blank_output(err):
     if not err:
         return 1
-    stderrlines = filter(lambda l: l, string.split(err, '\n'))
+    stderrlines = filter(lambda l: l, err.split('\n'))
     msg = "warning: tempnam() possibly used unsafely"
-    stderrlines = filter(lambda l, msg=msg: string.find(l, msg) == -1,
+    stderrlines = filter(lambda l, msg=msg: l.find(msg) == -1,
                          stderrlines)
     return len(stderrlines) == 0
 
--- test/Win32/mingw.py (original)
+++ test/Win32/mingw.py (refactored)
@@ -29,7 +29,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 
 import TestSCons
@@ -53,7 +53,7 @@
 """)
 
 test.run()
-if string.find(test.stdout(), 'mingw exists') == -1:
+if test.stdout().find('mingw exists') == -1:
     test.skip_test("No MinGW on this system, skipping test.\n")
 
 test.subdir('header')
@@ -149,8 +149,8 @@
 # that comes out of stderr:
 test.run(arguments='test.exe', stderr='.*')
 # ensure the source def for cshared.def got used, and there wasn't a target def for chshared.dll:
-test.fail_test(string.find(test.stdout(), 'cshared.def') == -1)
-test.fail_test(string.find(test.stdout(), '-Wl,--output-def,cshared.def') != -1)
+test.fail_test(test.stdout().find('cshared.def') == -1)
+test.fail_test(test.stdout().find('-Wl,--output-def,cshared.def') != -1)
 # ensure the target def got generated for the shared.dll:
 test.fail_test(not os.path.exists(test.workpath('shared.def')))
 test.run(program=test.workpath('test.exe'), stdout='test.cpp\nshared.cpp\nstatic.cpp\ncshared.c\n2001 resource.rc\n')
--- test/Win32/win32pathmadness.py (original)
+++ test/Win32/win32pathmadness.py (refactored)
@@ -33,7 +33,7 @@
 import TestSCons
 import sys
 import TestCmd
-import string
+#import string
 import os.path
 
 test = TestSCons.TestSCons(match=TestCmd.match_re)
@@ -89,10 +89,10 @@
 
 drive, rest = os.path.splitdrive(test.workpath('src'))
 
-drive_upper = string.upper(drive)
-drive_lower = string.lower(drive)
-rest_upper = rest[0] + string.upper(rest[1]) + rest[2:]
-rest_lower = rest[0] + string.lower(rest[1]) + rest[2:]
+drive_upper = drive.upper()
+drive_lower = drive.lower()
+rest_upper = rest[0] + rest[1].upper() + rest[2:]
+rest_lower = rest[0] + rest[1].lower() + rest[2:]
 
 combinations = [
     os.path.join(drive_upper, rest_upper),
--- test/YACC/live.py (original)
+++ test/YACC/live.py (refactored)
@@ -28,7 +28,7 @@
 Test YACC and YACCFLAGS with a live yacc compiler.
 """
 
-import string
+#import string
 
 import TestSCons
 
@@ -47,7 +47,7 @@
 import sys
 open('%s', 'wb').write("wrapper.py\\n")
 os.system(" ".join(sys.argv[1:]))
-""" % string.replace(test.workpath('wrapper.out'), '\\', '\\\\'))
+""" % test.workpath('wrapper.out').replace('\\', '\\\\'))
 
 test.write('SConstruct', """
 foo = Environment(YACCFLAGS='-d')
--- test/ZIP/ZIP.py (original)
+++ test/ZIP/ZIP.py (refactored)
@@ -26,7 +26,7 @@
 
 import os
 import stat
-import string
+#import string
 
 import TestSCons
 
@@ -104,14 +104,14 @@
 
     def files(fname, test=test, unzip=unzip):
         test.run(program = unzip, arguments = "-l -qq %s" % fname)
-        lines = string.split(test.stdout(), "\n")[:-1]
+        lines = test.stdout().split("\n")[:-1]
         def lastword(line):
-            return string.split(line)[-1]
+            return line.split()[-1]
         return map(lastword, lines)
 
 if zip:
 
-    marker_out = string.replace(test.workpath('marker.out'), '\\', '\\\\')
+    marker_out = test.workpath('marker.out').replace('\\', '\\\\')
 
     test.write('SConstruct', """\
 def marker(target, source, env):
--- test/explain/basic.py (original)
+++ test/explain/basic.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestSCons
 
@@ -317,7 +317,7 @@
 env.Cat('file3', ['zzz', 'yyy', 'xxx'])
 """)
 
-python_sep = string.replace(python, '\\', '\\\\')
+python_sep = python.replace('\\', '\\\\')
 
 expect = test.wrap_stdout("""\
 scons: rebuilding `file3' because the dependency order changed:
--- test/option/debug-count.py (original)
+++ test/option/debug-count.py (refactored)
@@ -28,7 +28,7 @@
 Test that the --debug=count option works.
 """
 
-import string
+#import string
 import re
 
 import TestSCons
@@ -77,7 +77,7 @@
 
     if missing:
         print "Missing the following object lines from '%s' output:" % args
-        print "\t", string.join(missing)
+        print "\t", ' '.join(missing)
         print "STDOUT =========="
         print stdout
         test.fail_test(1)
--- test/option/debug-memory.py (original)
+++ test/option/debug-memory.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import re
-import string
+#import string
 
 import TestSCons
 
@@ -60,7 +60,7 @@
 
 test.run(arguments = '--debug=memory')
 
-lines = string.split(test.stdout(), '\n')
+lines = test.stdout().split('\n')
 
 test.fail_test(re.match(r'Memory before reading SConscript files: +\d+', lines[-5]) is None)
 test.fail_test(re.match(r'Memory after reading SConscript files: +\d+', lines[-4]) is None)
@@ -71,7 +71,7 @@
 
 test.run(arguments = '-h --debug=memory')
 
-lines = string.split(test.stdout(), '\n')
+lines = test.stdout().split('\n')
 
 test.fail_test(re.match(r'Memory before reading SConscript files: +\d+', lines[-3]) is None)
 test.fail_test(re.match(r'Memory after reading SConscript files: +\d+', lines[-2]) is None)
--- test/option/debug-time.py (original)
+++ test/option/debug-time.py (refactored)
@@ -25,7 +25,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import TestSCons
-import string
+#import string
 import re
 import time
 
@@ -153,7 +153,7 @@
 """ % locals())
 
 if failures or warnings:
-    print string.join([test.stdout()] + failures + warnings, '\n')
+    print '\n'.join([test.stdout()] + failures + warnings)
 if failures:
     test.fail_test(1)
 
@@ -190,7 +190,7 @@
 """ % locals())
 
 if failures:
-    print string.join([test.stdout()] + failures, '\n')
+    print '\n'.join([test.stdout()] + failures)
     test.fail_test(1)
 
 test.run(arguments = "-j4 --debug=time . SLEEP=1")
--- test/option/help-options.py (original)
+++ test/option/help-options.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import re
-import string
+#import string
 
 import TestSCons
 
@@ -53,13 +53,13 @@
 ignored_re = re.compile('.*Ignored for compatibility\\.\n', re.S)
 stdout = ignored_re.sub('', test.stdout())
 
-lines = string.split(stdout, '\n')
+lines = stdout.split('\n')
 lines = filter(lambda x: x[:3] == '  -', lines)
 lines = map(lambda x: x[3:], lines)
 lines = map(lambda x: x[0] == '-' and x[1:] or x, lines)
-options = map(lambda x: string.split(x)[0], lines)
+options = map(lambda x: x.split()[0], lines)
 options = map(lambda x: x[-1] == ',' and x[:-1] or x, options)
-lowered = map(lambda x: string.lower(x), options)
+lowered = map(lambda x: x.lower(), options)
 sorted = lowered[:]
 sorted.sort()
 if lowered != sorted:
--- test/option/md5-chunksize.py (original)
+++ test/option/md5-chunksize.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -90,7 +90,7 @@
 #
 test2 = TestSCons.TestSCons()
 
-if string.find(sys.platform, 'linux') == -1:
+if sys.platform.find('linux') == -1:
     test2.skip_test("skipping test on non-Linux platform '%s'\n" % sys.platform)
 
 dd = test2.where_is('dd')
--- test/option/profile.py (original)
+++ test/option/profile.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 import StringIO
 import sys
 
@@ -96,8 +96,8 @@
 test.must_contain_all_lines(test.stdout(), expect)
 
 expect = 'Memory before reading SConscript files'
-lines = string.split(test.stdout(), '\n')
-memory_lines = filter(lambda l, e=expect: string.find(l, e) != -1, lines)
+lines = test.stdout().split('\n')
+memory_lines = filter(lambda l, e=expect: l.find(e) != -1, lines)
 
 test.fail_test(len(memory_lines) != 1)
 
--- test/option/stack-size.py (original)
+++ test/option/stack-size.py (refactored)
@@ -24,7 +24,7 @@
 
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
-import string
+#import string
 
 import TestSCons
 
@@ -81,7 +81,7 @@
 %(_python_)s ../build.py f2.out f2.in
 """ % locals())
 
-re_expected_stdout = string.replace(expected_stdout, '\\', '\\\\')
+re_expected_stdout = expected_stdout.replace('\\', '\\\\')
 
 expect_unsupported = """
 scons: warning: Setting stack size is unsupported by this version of Python:
--- test/option/tree-all.py (original)
+++ test/option/tree-all.py (refactored)
@@ -31,7 +31,7 @@
 
 import TestSCons
 import sys
-import string
+#import string
 
 test = TestSCons.TestSCons()
 
@@ -95,7 +95,7 @@
 """ % locals()
 
 test.run(arguments = "--tree=all Foo.xxx")
-if string.count(test.stdout(), tree1) != 1:
+if test.stdout().count(tree1) != 1:
     sys.stdout.write('Did not find expected tree (or found duplicate) in the following output:\n')
     sys.stdout.write(test.stdout())
     test.fail_test()
@@ -158,13 +158,13 @@
 """ % locals()
 
 test.run(arguments = "--tree=all,prune .")
-if string.count(test.stdout(), tree3) != 1:
+if test.stdout().count(tree3) != 1:
     sys.stdout.write('Did not find expected tree (or found duplicate) in the following output:\n')
     sys.stdout.write(test.stdout())
     test.fail_test()
 
 test.run(arguments = "--tree=prune .")
-if string.count(test.stdout(), tree3) != 1:
+if test.stdout().count(tree3) != 1:
     sys.stdout.write('Did not find expected tree (or found duplicate) in the following output:\n')
     sys.stdout.write(test.stdout())
     test.fail_test()
@@ -198,13 +198,13 @@
 test.run(arguments = '-c Foo.xxx')
 
 test.run(arguments = "--no-exec --tree=all,status Foo.xxx")
-if string.count(test.stdout(), tree4) != 1:
+if test.stdout().count(tree4) != 1:
     sys.stdout.write('Did not find expected tree (or found duplicate) in the following output:\n')
     sys.stdout.write(test.stdout())
     test.fail_test()
 
 test.run(arguments = "--no-exec --tree=status Foo.xxx")
-if string.count(test.stdout(), tree4) != 1:
+if test.stdout().count(tree4) != 1:
     sys.stdout.write('Did not find expected tree (or found duplicate) in the following output:\n')
     sys.stdout.write(test.stdout())
     test.fail_test()
@@ -221,7 +221,7 @@
 test.run(arguments = "--tree=all Foo.xxx",
          status = 2,
          stderr = None)
-if string.count(test.stdout(), tree1) != 1:
+if test.stdout().count(tree1) != 1:
     sys.stdout.write('Did not find expected tree (or found duplicate) in the following output:\n')
     sys.stdout.write(test.stdout())
     test.fail_test()
--- test/packaging/convenience-functions.py (original)
+++ test/packaging/convenience-functions.py (refactored)
@@ -29,7 +29,7 @@
 """
 
 import os.path
-import string
+#import string
 import TestSCons
 
 python = TestSCons.python
@@ -56,8 +56,8 @@
 bin_f1 = os.path.join('bin', 'f1')
 bin_f2 = os.path.join('bin', 'f2')
 
-bin__f1 = string.replace(bin_f1, '\\', '\\\\')
-bin__f2 = string.replace(bin_f2, '\\', '\\\\')
+bin__f1 = bin_f1.replace('\\', '\\\\')
+bin__f2 = bin_f2.replace('\\', '\\\\')
 
 expect_read = """\
 ['SConstruct', 'f1', 'f2', 'f3']
--- test/runtest/fallback.py (original)
+++ test/runtest/fallback.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestRuntest
 
@@ -42,9 +42,9 @@
 while test.where_is('qmtest'):
     qmtest=test.where_is('qmtest')
     dir = os.path.split(qmtest)[0]
-    path = string.split(os.environ['PATH'], os.pathsep)
+    path = os.environ['PATH'].split(os.pathsep)
     path.remove(dir)
-    os.environ['PATH'] = string.join(path, os.pathsep)
+    os.environ['PATH'] = os.pathsep.join(path)
 
 test.subdir('test')
 
@@ -83,7 +83,7 @@
     test_pass_py,
 ]
 
-test.run(arguments = string.join(testlist),
+test.run(arguments = ' '.join(testlist),
          status = 1,
          stdout = expect_stdout,
          stderr = expect_stderr)
--- test/runtest/noqmtest.py (original)
+++ test/runtest/noqmtest.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os
-import string
+#import string
 
 import TestRuntest
 
@@ -75,7 +75,7 @@
     test_pass_py,
 ]
 
-test.run(arguments = '--noqmtest %s' % string.join(testlist),
+test.run(arguments = '--noqmtest %s' % ' '.join(testlist),
          status = 1,
          stdout = expect_stdout,
          stderr = expect_stderr)
--- test/runtest/python.py (original)
+++ test/runtest/python.py (refactored)
@@ -30,7 +30,7 @@
 
 import os
 import re
-import string
+#import string
 
 if not hasattr(os.path, 'pardir'):
     os.path.pardir = '..'
@@ -47,7 +47,7 @@
 mypython = os.path.join(head, dir, os.path.pardir, dir, python)
 
 def escape(s):
-    return string.replace(s, '\\', '\\\\')
+    return s.replace('\\', '\\\\')
 
 if re.search('\s', mypython):
     mypythonstring = '"%s"' % escape(mypython)
--- test/runtest/qmtest.py (original)
+++ test/runtest/qmtest.py (refactored)
@@ -30,7 +30,7 @@
 """
 
 import os.path
-import string
+#import string
 
 import TestRuntest
 
@@ -92,7 +92,7 @@
     test_pass_py,
 ]
 
-test.run(arguments='--qmtest %s' % string.join(testlist),
+test.run(arguments='--qmtest %s' % ' '.join(testlist),
          status=1,
          stdout=expect_stdout)
 
--- test/runtest/xml/output.py (original)
+++ test/runtest/xml/output.py (refactored)
@@ -30,7 +30,7 @@
 
 import os
 import re
-import string
+#import string
 
 import TestCmd
 import TestRuntest
--- QMTest/TestCmd.py (original)
+++ QMTest/TestCmd.py (refactored)
@@ -224,7 +224,7 @@
 import re
 import shutil
 import stat
-import string
+#import string
 import sys
 import tempfile
 import time
@@ -407,9 +407,9 @@
     """
     """
     if not is_List(lines):
-        lines = string.split(lines, "\n")
+        lines = lines.split("\n")
     if not is_List(matches):
-        matches = string.split(matches, "\n")
+        matches = matches.split("\n")
     if len(lines) != len(matches):
         return
     for i in range(len(lines)):
@@ -421,9 +421,9 @@
     """
     """
     if not is_List(lines):
-        lines = string.split(lines, "\n")
+        lines = lines.split("\n")
     if not is_List(res):
-        res = string.split(res, "\n")
+        res = res.split("\n")
     if len(lines) != len(res):
         return
     for i in range(len(lines)):
@@ -441,9 +441,9 @@
     """
     """
     if not type(lines) is type(""):
-        lines = string.join(lines, "\n")
+        lines = "\n".join(lines)
     if not type(res) is type(""):
-        res = string.join(res, "\n")
+        res = "\n".join(res)
     s = "^" + res + "$"
     try:
         expr = re.compile(s, re.DOTALL)
@@ -530,13 +530,13 @@
         if path is None:
             path = os.environ['PATH']
         if is_String(path):
-            path = string.split(path, os.pathsep)
+            path = path.split(os.pathsep)
         if pathext is None:
             pathext = os.environ['PATHEXT']
         if is_String(pathext):
-            pathext = string.split(pathext, os.pathsep)
+            pathext = pathext.split(os.pathsep)
         for ext in pathext:
-            if string.lower(ext) == string.lower(file[-len(ext):]):
+            if ext.lower() == file[-len(ext):].lower():
                 pathext = ['']
                 break
         for dir in path:
@@ -553,7 +553,7 @@
         if path is None:
             path = os.environ['PATH']
         if is_String(path):
-            path = string.split(path, os.pathsep)
+            path = path.split(os.pathsep)
         for dir in path:
             f = os.path.join(dir, file)
             if os.path.isfile(f):
@@ -924,9 +924,9 @@
             slash = '\\'
             special = '"$'
 
-            arg = string.replace(arg, slash, slash+slash)
+            arg = arg.replace(slash, slash+slash)
             for c in special:
-                arg = string.replace(arg, c, slash+c)
+                arg = arg.replace(c, slash+c)
 
             if re_space.search(arg):
                 arg = '"' + arg + '"'
@@ -1012,7 +1012,7 @@
             cmd = list(interpreter) + cmd
         if arguments:
             if type(arguments) == type(''):
-                arguments = string.split(arguments)
+                arguments = arguments.split()
             cmd.extend(arguments)
         return cmd
 
@@ -1149,7 +1149,7 @@
         prepended unless it is enclosed in a [list].
         """
         cmd = self.command_args(program, interpreter, arguments)
-        cmd_string = string.join(map(self.escape, cmd), ' ')
+        cmd_string = ' '.join(map(self.escape, cmd))
         if self.verbose:
             sys.stderr.write(cmd_string + "\n")
         if universal_newlines is None:
@@ -1362,7 +1362,7 @@
         # letters is pretty much random on win32:
         drive,rest = os.path.splitdrive(path)
         if drive:
-            path = string.upper(drive) + rest
+            path = drive.upper() + rest
 
         #
         self._dirlist.append(path)
--- QMTest/TestCommon.py (original)
+++ QMTest/TestCommon.py (refactored)
@@ -96,7 +96,7 @@
 import os
 import os.path
 import stat
-import string
+#import string
 import sys
 import types
 import UserList
@@ -134,7 +134,7 @@
     lib_suffix   = '.a'
     dll_prefix   = ''
     dll_suffix   = '.dll'
-elif string.find(sys.platform, 'irix') != -1:
+elif sys.platform.find('irix') != -1:
     exe_suffix   = ''
     obj_suffix   = '.o'
     shobj_suffix = '.o'
@@ -143,7 +143,7 @@
     lib_suffix   = '.a'
     dll_prefix   = 'lib'
     dll_suffix   = '.so'
-elif string.find(sys.platform, 'darwin') != -1:
+elif sys.platform.find('darwin') != -1:
     exe_suffix   = ''
     obj_suffix   = '.o'
     shobj_suffix = '.os'
@@ -152,7 +152,7 @@
     lib_suffix   = '.a'
     dll_prefix   = 'lib'
     dll_suffix   = '.dylib'
-elif string.find(sys.platform, 'sunos') != -1:
+elif sys.platform.find('sunos') != -1:
     exe_suffix   = ''
     obj_suffix   = '.o'
     shobj_suffix = '.os'
@@ -231,16 +231,16 @@
         existing, missing = separate_files(files)
         unwritable = filter(lambda x, iw=is_writable: not iw(x), existing)
         if missing:
-            print "Missing files: `%s'" % string.join(missing, "', `")
+            print "Missing files: `%s'" % "', `".join(missing)
         if unwritable:
-            print "Unwritable files: `%s'" % string.join(unwritable, "', `")
+            print "Unwritable files: `%s'" % "', `".join(unwritable)
         self.fail_test(missing + unwritable)
 
     def must_contain(self, file, required, mode = 'rb'):
         """Ensures that the specified file contains the required text.
         """
         file_contents = self.read(file, mode)
-        contains = (string.find(file_contents, required) != -1)
+        contains = (file_contents.find(required) != -1)
         if not contains:
             print "File `%s' does not contain required string." % file
             print self.banner('Required string ')
@@ -261,7 +261,7 @@
         for lines in the output.
         """
         if find is None:
-            find = lambda o, l: string.find(o, l) != -1
+            find = lambda o, l: o.find(l) != -1
         missing = []
         for line in lines:
             if not find(output, line):
@@ -289,7 +289,7 @@
         for lines in the output.
         """
         if find is None:
-            find = lambda o, l: string.find(o, l) != -1
+            find = lambda o, l: o.find(l) != -1
         for line in lines:
             if find(output, line):
                 return
@@ -316,7 +316,7 @@
         files = map(lambda x: is_List(x) and apply(os.path.join, x) or x, files)
         missing = filter(lambda x: not os.path.exists(x), files)
         if missing:
-            print "Missing files: `%s'" % string.join(missing, "', `")
+            print "Missing files: `%s'" % "', `".join(missing)
             self.fail_test(missing)
 
     def must_match(self, file, expect, mode = 'rb'):
@@ -339,7 +339,7 @@
         """Ensures that the specified file doesn't contain the banned text.
         """
         file_contents = self.read(file, mode)
-        contains = (string.find(file_contents, banned) != -1)
+        contains = (file_contents.find(banned) != -1)
         if contains:
             print "File `%s' contains banned string." % file
             print self.banner('Banned string ')
@@ -360,7 +360,7 @@
         for lines in the output.
         """
         if find is None:
-            find = lambda o, l: string.find(o, l) != -1
+            find = lambda o, l: o.find(l) != -1
         unexpected = []
         for line in lines:
             if find(output, line):
@@ -388,7 +388,7 @@
         files = map(lambda x: is_List(x) and apply(os.path.join, x) or x, files)
         existing = filter(os.path.exists, files)
         if existing:
-            print "Unexpected files exist: `%s'" % string.join(existing, "', `")
+            print "Unexpected files exist: `%s'" % "', `".join(existing)
             self.fail_test(existing)
 
 
@@ -403,9 +403,9 @@
         existing, missing = separate_files(files)
         writable = filter(is_writable, existing)
         if missing:
-            print "Missing files: `%s'" % string.join(missing, "', `")
+            print "Missing files: `%s'" % "', `".join(missing)
         if writable:
-            print "Writable files: `%s'" % string.join(writable, "', `")
+            print "Writable files: `%s'" % "', `".join(writable)
         self.fail_test(missing + writable)
 
     def _complete(self, actual_stdout, expected_stdout,
--- QMTest/TestRuntest.py (original)
+++ QMTest/TestRuntest.py (refactored)
@@ -19,7 +19,7 @@
 import os
 import os.path
 import re
-import string
+#import string
 import shutil
 import sys
 
@@ -39,7 +39,7 @@
     pythonstring = _python_
 else:
     pythonstring = python
-pythonstring = string.replace(pythonstring, '\\', '\\\\')
+pythonstring = pythonstring.replace('\\', '\\\\')
 
 
 failing_test_template = """\
@@ -141,7 +141,7 @@
         dirs = [os.environ.get('SCONS_RUNTEST_DIR', orig_cwd)]
         
         spe = os.environ.get('SCONS_SOURCE_PATH_EXECUTABLE', orig_cwd)
-        for d in string.split(spe, os.pathsep):
+        for d in spe.split(os.pathsep):
             dirs.append(os.path.join(d, 'build'))
             dirs.append(d)
 
--- QMTest/TestSCons.py (original)
+++ QMTest/TestSCons.py (refactored)
@@ -19,7 +19,7 @@
 import os
 import re
 import shutil
-import string
+#import string
 import sys
 import time
 
@@ -123,7 +123,7 @@
         stderr = p.stderr
 
     for l in stderr.readlines():
-        list = string.split(l)
+        list = l.split()
         if len(list) > 3 and list[:2] == ['gcc', 'version']:
             if list[2][:3] in ('4.1','4.2','4.3'):
                 libs = ['gfortranbegin']
@@ -148,7 +148,7 @@
     fortran_lib = gccFortranLibs()
 elif sys.platform == 'cygwin':
     fortran_lib = gccFortranLibs()
-elif string.find(sys.platform, 'irix') != -1:
+elif sys.platform.find('irix') != -1:
     fortran_lib = ['ftn']
 else:
     fortran_lib = gccFortranLibs()
@@ -161,7 +161,7 @@
 # re.escape escapes too much.
 def re_escape(str):
     for c in ['.', '[', ']', '(', ')', '*', '+', '?']:  # Not an exhaustive list.
-        str = string.replace(str, c, '\\' + c)
+        str = str.replace(c, '\\' + c)
     return str
 
 
@@ -170,12 +170,12 @@
     sys.version_info
 except AttributeError:
     # Pre-1.6 Python has no sys.version_info
-    version_string = string.split(sys.version)[0]
-    version_ints = map(int, string.split(version_string, '.'))
+    version_string = sys.version.split()[0]
+    version_ints = map(int, version_string.split('.'))
     sys.version_info = tuple(version_ints + ['final', 0])
 
 def python_version_string():
-    return string.split(sys.version)[0]
+    return sys.version.split()[0]
 
 def python_minor_version_string():
     return sys.version[:3]
@@ -266,7 +266,7 @@
             else:
                 sconsflags = []
             sconsflags = sconsflags + ['--warn=no-python-version']
-            os.environ['SCONSFLAGS'] = string.join(sconsflags)
+            os.environ['SCONSFLAGS'] = ' '.join(sconsflags)
 
         apply(TestCommon.__init__, [self], kw)
 
@@ -307,7 +307,7 @@
             return None
         result = env.WhereIs(prog)
         if norm and os.sep != '/':
-            result = string.replace(result, os.sep, '/')
+            result = result.replace(os.sep, '/')
         return result
 
     def detect_tool(self, tool, prog=None, ENV=None):
@@ -376,7 +376,7 @@
         # support the --warn=no-visual-c-missing warning.)
         sconsflags = sconsflags + [os.environ.get('TESTSCONS_SCONSFLAGS',
                                                   '--warn=no-visual-c-missing')]
-        os.environ['SCONSFLAGS'] = string.join(sconsflags)
+        os.environ['SCONSFLAGS'] = ' '.join(sconsflags)
         try:
             result = apply(TestCommon.run, (self,)+args, kw)
         finally:
@@ -385,7 +385,7 @@
 
     def up_to_date(self, options = None, arguments = None, read_str = "", **kw):
         s = ""
-        for arg in string.split(arguments):
+        for arg in arguments.split():
             s = s + "scons: `%s' is up to date.\n" % arg
             if options:
                 arguments = options + " " + arguments
@@ -403,14 +403,14 @@
         This function is most useful in conjunction with the -n option.
         """
         s = ""
-        for arg in string.split(arguments):
+        for arg in arguments.split():
             s = s + "(?!scons: `%s' is up to date.)" % re.escape(arg)
             if options:
                 arguments = options + " " + arguments
         s = '('+s+'[^\n]*\n)*'
         kw['arguments'] = arguments
         stdout = re.escape(self.wrap_stdout(build_str='ARGUMENTSGOHERE'))
-        kw['stdout'] = string.replace(stdout, 'ARGUMENTSGOHERE', s)
+        kw['stdout'] = stdout.replace('ARGUMENTSGOHERE', s)
         kw['match'] = self.match_re_dotall
         apply(self.run, [], kw)
 
@@ -461,9 +461,9 @@
         places, abstracting out the version difference.
         """
         exec 'import traceback; x = traceback.format_stack()[-1]'
-        x = string.lstrip(x)
-        x = string.replace(x, '<string>', file)
-        x = string.replace(x, 'line 1,', 'line %s,' % line)
+        x = x.lstrip()
+        x = x.replace('<string>', file)
+        x = x.replace('line 1,', 'line %s,' % line)
         return x
 
     def normalize_pdf(self, s):
@@ -486,12 +486,12 @@
             end_marker = 'endstream\nendobj'
 
             encoded = []
-            b = string.find(s, begin_marker, 0)
+            b = s.find(begin_marker, 0)
             while b != -1:
                 b = b + len(begin_marker)
-                e = string.find(s, end_marker, b)
+                e = s.find(end_marker, b)
                 encoded.append((b, e))
-                b = string.find(s, begin_marker, e + len(end_marker))
+                b = s.find(begin_marker, e + len(end_marker))
 
             x = 0
             r = []
@@ -507,7 +507,7 @@
                 r.append(d)
                 x = e
             r.append(s[x:])
-            s = string.join(r, '')
+            s = ''.join(r)
 
         return s
 
@@ -553,7 +553,7 @@
             ]
             java_path = self.paths(patterns) + [env['ENV']['PATH']]
 
-        env['ENV']['PATH'] = string.join(java_path, os.pathsep)
+        env['ENV']['PATH'] = os.pathsep.join(java_path)
         return env['ENV']
 
     def java_where_includes(self,version=None):
@@ -634,7 +634,7 @@
                  stderr=None,
                  status=None)
         if version:
-            if string.find(self.stderr(), 'javac %s' % version) == -1:
+            if self.stderr().find('javac %s' % version) == -1:
                 fmt = "Could not find javac for Java version %s, skipping test(s).\n"
                 self.skip_test(fmt % version)
         else:
@@ -843,7 +843,7 @@
             lastEnd = 0
             logfile = self.read(self.workpath(logfile))
             if (doCheckLog and
-                string.find( logfile, "scons: warning: The stored build "
+                logfile.find( "scons: warning: The stored build "
                              "information has an unexpected class." ) >= 0):
                 self.fail_test()
             sconf_dir = sconf_dir
@@ -955,7 +955,7 @@
 print py_ver
 """)
 
-        return [python] + string.split(string.strip(self.stdout()), '\n')
+        return [python] + self.stdout().strip().split('\n')
 
     def start(self, *args, **kw):
         """
--- QMTest/TestSConsMSVS.py (original)
+++ QMTest/TestSConsMSVS.py (refactored)
@@ -18,7 +18,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os
-import string
+#import string
 import sys
 
 from TestSCons import *
@@ -596,7 +596,7 @@
         replace = 'sys.path = [ %s, join(sys' % enginepath
 
         contents = self.read(fname)
-        contents = string.replace(contents, orig, replace)
+        contents = contents.replace(orig, replace)
         self.write(fname, contents)
 
     def msvs_substitute(self, input, msvs_ver,
@@ -624,14 +624,14 @@
             exec_script_main = "from os.path import join; import sys; sys.path = [ r'%s' ] + sys.path; import SCons.Script; SCons.Script.main()" % os.environ['SCONS_LIB_DIR']
         else:
             exec_script_main = "from os.path import join; import sys; sys.path = [ join(sys.prefix, 'Lib', 'site-packages', 'scons-%s'), join(sys.prefix, 'scons-%s'), join(sys.prefix, 'Lib', 'site-packages', 'scons'), join(sys.prefix, 'scons') ] + sys.path; import SCons.Script; SCons.Script.main()" % (self.scons_version, self.scons_version)
-        exec_script_main_xml = string.replace(exec_script_main, "'", "&apos;")
-
-        result = string.replace(input, r'<WORKPATH>', workpath)
-        result = string.replace(result, r'<PYTHON>', python)
-        result = string.replace(result, r'<SCONSCRIPT>', sconscript)
-        result = string.replace(result, r'<SCONS_SCRIPT_MAIN>', exec_script_main)
-        result = string.replace(result, r'<SCONS_SCRIPT_MAIN_XML>', exec_script_main_xml)
-        result = string.replace(result, r'<PROJECT_GUID>', project_guid)
+        exec_script_main_xml = exec_script_main.replace("'", "&apos;")
+
+        result = input.replace(r'<WORKPATH>', workpath)
+        result = result.replace(r'<PYTHON>', python)
+        result = result.replace(r'<SCONSCRIPT>', sconscript)
+        result = result.replace(r'<SCONS_SCRIPT_MAIN>', exec_script_main)
+        result = result.replace(r'<SCONS_SCRIPT_MAIN_XML>', exec_script_main_xml)
+        result = result.replace(r'<PROJECT_GUID>', project_guid)
         return result
 
     def get_msvs_executable(self, version):
@@ -655,7 +655,7 @@
         else:
             sconsflags = []
         sconsflags = sconsflags + ['--warn=no-deprecated']
-        os.environ['SCONSFLAGS'] = string.join(sconsflags)
+        os.environ['SCONSFLAGS'] = ' '.join(sconsflags)
         try:
             result = apply(TestSCons.run, (self,)+args, kw)
         finally:
--- QMTest/TestSCons_time.py (original)
+++ QMTest/TestSCons_time.py (refactored)
@@ -17,7 +17,7 @@
 
 import os
 import os.path
-import string
+#import string
 import sys
 
 from TestCommon import *
@@ -196,14 +196,14 @@
         try:
             import __future__
         except ImportError:
-            version = string.split(sys.version)[0]
+            version = sys.version.split()[0]
             msg = 'scons-time does not work on Python version %s\n' % version
             self.skip_test(msg)
 
         try:
             eval('[x for x in [1, 2]]')
         except SyntaxError:
-            version = string.split(sys.version)[0]
+            version = sys.version.split()[0]
             msg = 'scons-time does not work on Python version %s\n' % version
             self.skip_test(msg)
 
@@ -249,7 +249,7 @@
         args = (tempdir, 'scons-time-',) + args
         x = apply(os.path.join, args)
         x = re.escape(x)
-        x = string.replace(x, 'time\\-', 'time\\-[^%s]*' % sep)
+        x = x.replace('time\\-', 'time\\-[^%s]*' % sep)
         return x
 
     def write_fake_aegis_py(self, name):
--- QMTest/TestSConsign.py (original)
+++ QMTest/TestSConsign.py (refactored)
@@ -19,7 +19,7 @@
 
 import os
 import os.path
-import string
+#import string
 import sys
 
 from TestSCons import *
--- QMTest/scons_tdb.py (original)
+++ QMTest/scons_tdb.py (refactored)
@@ -156,7 +156,7 @@
     result = map(lambda k: (k, getattr(sys, k, _null)), sys_attributes)
     result = filter(lambda t: not t[1] is _null, result)
     result = map(lambda t: t[0] + '=' + repr(t[1]), result)
-    return string.join(result, '\n ')
+    return '\n '.join(result)
 
 module_attributes = [
     '__version__',
@@ -171,7 +171,7 @@
     result = map(lambda k: (k, getattr(module, k, _null)), module_attributes)
     result = filter(lambda t: not t[1] is _null, result)
     result = map(lambda t: t[0] + '=' + repr(t[1]), result)
-    return string.join(result, '\n ')
+    return '\n '.join(result)
 
 environ_keys = [
    'PATH',
@@ -217,7 +217,7 @@
     result = map(lambda k: (k, os.environ.get(k, _null)), environ_keys)
     result = filter(lambda t: not t[1] is _null, result)
     result = map(lambda t: t[0] + '-' + t[1], result)
-    return string.join(result, '\n ')
+    return '\n '.join(result)
 
 class SConsXMLResultStream(XMLResultStream):
     def __init__(self, *args, **kw):
@@ -400,7 +400,7 @@
         file_names.sort()
         for file_name in file_names:
             exit_status = self._outcomes[file_name]
-            file_name = string.replace(file_name, '\\', '/')
+            file_name = file_name.replace('\\', '/')
             self.file.write('    { file_name = "%s";\n' % file_name)
             self.file.write('      exit_status = %s; },\n' % exit_status)
         self.file.write('];\n')
--- QMTest/unittest.py (original)
+++ QMTest/unittest.py (refactored)
@@ -35,15 +35,15 @@
 import time
 import sys
 import traceback
-import string
+#import string
 import os
 
 ##############################################################################
 # A platform-specific concession to help the code work for JPython users
 ##############################################################################
 
-plat = string.lower(sys.platform)
-_isJPython = string.find(plat, 'java') >= 0 or string.find(plat, 'jdk') >= 0
+plat = sys.platform.lower()
+_isJPython = plat.find('java') >= 0 or plat.find('jdk') >= 0
 del plat
 
 
@@ -149,7 +149,7 @@
         the specified test method's docstring.
         """
         doc = self.__testMethod.__doc__
-        return doc and string.strip(string.split(doc, "\n")[0]) or None
+        return doc and doc.split("\n")[0].strip() or None
 
     def id(self):
         return "%s.%s" % (self.__class__, self.__testMethod.__name__)
@@ -326,7 +326,7 @@
     def shortDescription(self):
         if self.__description is not None: return self.__description
         doc = self.__testFunc.__doc__
-        return doc and string.strip(string.split(doc, "\n")[0]) or None
+        return doc and doc.split("\n")[0].strip() or None
 
 
 
@@ -376,18 +376,18 @@
         -- returns result of calling makeSuite(ListTestCase, prefix="check")
     """
           
-    spec = string.split(name, ':')
+    spec = name.split(':')
     if len(spec) > 2: raise ValueError, "illegal test name: %s" % name
     if len(spec) == 1:
         testName = spec[0]
         caseName = None
     else:
         testName, caseName = spec
-    parts = string.split(testName, '.')
+    parts = testName.split('.')
     if module is None:
         if len(parts) < 2:
             raise ValueError, "incomplete test name: %s" % name
-        constructor = __import__(string.join(parts[:-1],'.'))
+        constructor = __import__('.'.join(parts[:-1]))
         parts = parts[1:]
     else:
         constructor = module
@@ -468,7 +468,7 @@
                                 (len(errors), errFlavour))
         i = 1
         for test,error in errors:
-            errString = string.join(apply(traceback.format_exception,error),"")
+            errString = "".join(apply(traceback.format_exception,error))
             self.stream.writeln("%i) %s" % (i, test))
             self.stream.writeln(errString)
             i = i + 1
@@ -568,7 +568,7 @@
         self.stream.writeln("\t%s" % flavour)
         self.stream.writeln(separator2)
         for line in apply(traceback.format_exception, err):
-            for l in string.split(line,"\n")[:-1]:
+            for l in line.split("\n")[:-1]:
                 self.stream.writeln("\t%s" % l)
         self.stream.writeln(separator1)
 
@@ -635,7 +635,7 @@
                  argv=None, testRunner=None):
         if type(module) == type(''):
             self.module = __import__(module)
-            for part in string.split(module,'.')[1:]:
+            for part in module.split('.')[1:]:
                 self.module = getattr(self.module, part)
         else:
             self.module = module
--- bin/linecount.py (original)
+++ bin/linecount.py (refactored)
@@ -26,7 +26,7 @@
 __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
 
 import os.path
-import string
+#import string
 
 fmt = "%-16s  %5s  %7s  %9s  %11s  %11s"
 
--- bin/scons-doc.py (original)
+++ bin/scons-doc.py (refactored)
@@ -93,7 +93,7 @@
 import os
 import re
 import sgmllib
-import string
+#import string
 import sys
 import time
 
@@ -412,8 +412,8 @@
     except AttributeError:
         pass
     else:
-        for arg in string.split(c.environment):
-            key, val = string.split(arg, '=')
+        for arg in c.environment.split():
+            key, val = arg.split('=')
             try:
                 save_vals[key] = os.environ[key]
             except KeyError:
@@ -426,17 +426,17 @@
              # warnings that come from the new revamped VS support so
              # we can build doc on (Linux) systems that don't have
              # Visual C installed.
-             arguments = '--warn=no-visual-c-missing -f - ' + string.join(args),
+             arguments = '--warn=no-visual-c-missing -f - ' + ' '.join(args),
              chdir = test.workpath('WORK'),
              stdin = Stdin % dict)
     os.environ.update(save_vals)
     for key in delete_keys:
         del(os.environ[key])
     out = test.stdout()
-    out = string.replace(out, test.workpath('ROOT'), '')
-    out = string.replace(out, test.workpath('WORK/SConstruct'),
+    out = out.replace(test.workpath('ROOT'), '')
+    out = out.replace(test.workpath('WORK/SConstruct'),
                               '/home/my/project/SConstruct')
-    lines = string.split(out, '\n')
+    lines = out.split('\n')
     if lines:
         while lines[-1] == '':
             lines = lines[:-1]
@@ -480,7 +480,7 @@
         files = os.listdir(a)
         files = filter(lambda x: x[0] != '.', files)
         files.sort()
-        return [string.join(files, '  ')]
+        return ['  '.join(files)]
     if args:
         l = []
         for a in args:
@@ -592,9 +592,9 @@
                     i = len(f.data) - 1
                     while f.data[i] == ' ':
                         i = i - 1
-                    output = string.replace(f.data[:i+1], '__ROOT__', '')
-                    output = string.replace(output, '<', '&lt;')
-                    output = string.replace(output, '>', '&gt;')
+                    output = f.data[:i+1].replace('__ROOT__', '')
+                    output = output.replace('<', '&lt;')
+                    output = output.replace('>', '&gt;')
                     self.outfp.write(output)
             if e.data and e.data[0] == '\n':
                 e.data = e.data[1:]
@@ -703,7 +703,7 @@
         if o.preserve:
             t.preserve()
         t.subdir('ROOT', 'WORK')
-        t.rootpath = string.replace(t.workpath('ROOT'), '\\', '\\\\')
+        t.rootpath = t.workpath('ROOT').replace('\\', '\\\\')
 
         for d in e.dirs:
             dir = t.workpath('WORK', d.name)
@@ -714,19 +714,19 @@
             i = 0
             while f.data[i] == '\n':
                 i = i + 1
-            lines = string.split(f.data[i:], '\n')
+            lines = f.data[i:].split('\n')
             i = 0
             while lines[0][i] == ' ':
                 i = i + 1
             lines = map(lambda l, i=i: l[i:], lines)
-            path = string.replace(f.name, '__ROOT__', t.rootpath)
+            path = f.name.replace('__ROOT__', t.rootpath)
             if not os.path.isabs(path):
                 path = t.workpath('WORK', path)
             dir, name = os.path.split(path)
             if dir and not os.path.exists(dir):
                 os.makedirs(dir)
-            content = string.join(lines, '\n')
-            content = string.replace(content, '__ROOT__', t.rootpath)
+            content = '\n'.join(lines)
+            content = content.replace('__ROOT__', t.rootpath)
             path = t.workpath('WORK', path)
             t.write(path, content)
             if hasattr(f, 'chmod'):
@@ -760,24 +760,24 @@
 
         for c in o.commandlist:
             self.outfp.write(p + Prompt[o.os])
-            d = string.replace(c.data, '__ROOT__', '')
+            d = c.data.replace('__ROOT__', '')
             self.outfp.write('<userinput>' + d + '</userinput>\n')
 
-            e = string.replace(c.data, '__ROOT__', t.workpath('ROOT'))
-            args = string.split(e)
+            e = c.data.replace('__ROOT__', t.workpath('ROOT'))
+            args = e.split()
             lines = ExecuteCommand(args, c, t, {'osname':o.os, 'tools':o.tools})
             content = None
             if c.output:
                 content = c.output
             elif lines:
-                content = string.join(lines, '\n' + p)
+                content = ( '\n' + p).join(lines)
             if content:
                 content = address_re.sub(r' at 0x700000&gt;', content)
                 content = engine_re.sub(r' File "bootstrap/src/engine/SCons/', content)
                 content = file_re.sub(r'\1 <module>', content)
                 content = nodelist_re.sub(r"\1 'NodeList' object \2", content)
-                content = string.replace(content, '<', '&lt;')
-                content = string.replace(content, '>', '&gt;')
+                content = content.replace('<', '&lt;')
+                content = content.replace('>', '&gt;')
                 self.outfp.write(p + content + '\n')
 
         if o.data[0] == '\n':
@@ -814,7 +814,7 @@
     def end_sconstruct(self):
         f = self.f
         self.outfp.write('<programlisting>')
-        output = string.replace(f.data, '__ROOT__', '')
+        output = f.data.replace('__ROOT__', '')
         self.outfp.write(output + '</programlisting>')
         delattr(self, 'f')
         self.afunclist = self.afunclist[:-1]
--- bin/scons-proc.py (original)
+++ bin/scons-proc.py (refactored)
@@ -13,7 +13,7 @@
 import getopt
 import os.path
 import re
-import string
+#import string
 import StringIO
 import sys
 import xml.sax
@@ -134,7 +134,7 @@
 
 class SCons_XML_to_XML(SCons_XML):
     def write(self, files):
-        gen, mod = string.split(files, ',')
+        gen, mod = files.split(',')
         g.write_gen(gen)
         g.write_mod(mod)
     def write_gen(self, filename):
@@ -204,17 +204,17 @@
             chunks.extend(map(str, v.summary.body))
 
         body = ''.join(chunks)
-        body = string.replace(body, '<programlisting>', '.ES')
-        body = string.replace(body, '</programlisting>', '.EE')
-        body = string.replace(body, '\n</para>\n<para>\n', '\n\n')
-        body = string.replace(body, '<para>\n', '')
-        body = string.replace(body, '<para>', '\n')
-        body = string.replace(body, '</para>\n', '')
+        body = body.replace('<programlisting>', '.ES')
+        body = body.replace('</programlisting>', '.EE')
+        body = body.replace('\n</para>\n<para>\n', '\n\n')
+        body = body.replace('<para>\n', '')
+        body = body.replace('<para>', '\n')
+        body = body.replace('</para>\n', '')
         body = re.sub('\.EE\n\n+(?!\.IP)', '.EE\n.IP\n', body)
         body = re.sub('&(scons|SConstruct|SConscript|jar);', r'\\fB\1\\fP', body)
-        body = string.replace(body, '&Dir;', r'\fBDir\fP')
-        body = string.replace(body, '&target;', r'\fItarget\fP')
-        body = string.replace(body, '&source;', r'\fIsource\fP')
+        body = body.replace('&Dir;', r'\fBDir\fP')
+        body = body.replace('&target;', r'\fItarget\fP')
+        body = body.replace('&source;', r'\fIsource\fP')
         body = re.sub('&b(-link)?-([^;]*);', r'\\fB\2\\fP()', body)
         body = re.sub('&cv(-link)?-([^;]*);', r'$\2', body)
         body = re.sub(r'<(command|envar|filename|literal|option)>([^<]*)</\1>',
@@ -223,8 +223,8 @@
                       r'\\fI\2\\fP', body)
         body = re.compile(r'^\\f([BI])(.*)\\fP\s*$', re.M).sub(r'.\1 \2', body)
         body = re.compile(r'^\\f([BI])(.*)\\fP(\S+)', re.M).sub(r'.\1R \2 \3', body)
-        body = string.replace(body, '&lt;', '<')
-        body = string.replace(body, '&gt;', '>')
+        body = body.replace('&lt;', '<')
+        body = body.replace('&gt;', '>')
         body = re.sub(r'\\([^f])', r'\\\\\1', body)
         body = re.compile("^'\\\\\\\\", re.M).sub("'\\\\", body)
         body = re.compile(r'^\.([BI]R?) -', re.M).sub(r'.\1 \-', body)
@@ -259,7 +259,7 @@
             description = 'tool',
             prefix = 't-',
             tag = 'literal',
-            idfunc = lambda x: string.replace(x, '+', 'X'),
+            idfunc = lambda x: x.replace('+', 'X'),
             termfunc = lambda x: [x],
             entityfunc = lambda x: x)
 
--- bin/scons-test.py (original)
+++ bin/scons-test.py (refactored)
@@ -19,7 +19,7 @@
 import imp
 import os
 import os.path
-import string
+#import string
 import sys
 import tempfile
 import time
@@ -135,7 +135,7 @@
 if not args:
     runtest_args = '-a'
 else:
-    runtest_args = string.join(args)
+    runtest_args = ' '.join(args)
 
 if format == '--xml':
 
--- bin/sconsexamples.py (original)
+++ bin/sconsexamples.py (refactored)
@@ -72,7 +72,7 @@
 import os.path
 import re
 import sgmllib
-import string
+#import string
 import sys
 
 sys.path.append(os.path.join(os.getcwd(), 'etc'))
@@ -293,7 +293,7 @@
                     i = len(f.data) - 1
                     while f.data[i] == ' ':
                         i = i - 1
-                    output = string.replace(f.data[:i+1], '__ROOT__', '')
+                    output = f.data[:i+1].replace('__ROOT__', '')
                     sys.stdout.write(output)
             if e.data and e.data[0] == '\n':
                 e.data = e.data[1:]
@@ -407,20 +407,19 @@
             i = 0
             while f.data[i] == '\n':
                 i = i + 1
-            lines = string.split(f.data[i:], '\n')
+            lines = f.data[i:].split('\n')
             i = 0
             while lines[0][i] == ' ':
                 i = i + 1
             lines = map(lambda l, i=i: l[i:], lines)
-            path = string.replace(f.name, '__ROOT__', t.workpath('ROOT'))
+            path = f.name.replace('__ROOT__', t.workpath('ROOT'))
             dir, name = os.path.split(f.name)
             if dir:
                 dir = t.workpath('WORK', dir)
                 if not os.path.exists(dir):
                     os.makedirs(dir)
-            content = string.join(lines, '\n')
-            content = string.replace(content,
-                                     '__ROOT__',
+            content = '\n'.join(lines)
+            content = content.replace('__ROOT__',
                                      t.workpath('ROOT'))
             t.write(t.workpath('WORK', f.name), content)
         i = len(o.prefix)
@@ -430,19 +429,19 @@
         p = o.prefix[i:]
         for c in o.commandlist:
             sys.stdout.write(p + Prompt[o.os])
-            d = string.replace(c.data, '__ROOT__', '')
+            d = c.data.replace('__ROOT__', '')
             sys.stdout.write('<userinput>' + d + '</userinput>\n')
-            e = string.replace(c.data, '__ROOT__', t.workpath('ROOT'))
-            args = string.split(e)[1:]
+            e = c.data.replace('__ROOT__', t.workpath('ROOT'))
+            args = e.split()[1:]
             os.environ['SCONS_LIB_DIR'] = scons_lib_dir
             t.run(interpreter = sys.executable,
                   program = scons_py,
-                  arguments = '-f - ' + string.join(args),
+                  arguments = '-f - ' + ' '.join(args),
                   chdir = t.workpath('WORK'),
                   stdin = Stdin % o.os)
-            out = string.replace(t.stdout(), t.workpath('ROOT'), '')
+            out = t.stdout().replace(t.workpath('ROOT'), '')
             if out:
-                lines = string.split(out, '\n')
+                lines = out.split('\n')
                 if lines:
                     while lines[-1] == '':
                         lines = lines[:-1]
--- bench/env.__setitem__.py (original)
+++ bench/env.__setitem__.py (refactored)
@@ -6,7 +6,7 @@
 
 import os.path
 import re
-import string
+#import string
 import sys
 import timeit
 
@@ -324,7 +324,7 @@
 
 common_imports = """
 from __main__ import %s
-""" % string.join(common_import_variables, ', ')
+""" % ', '.join(common_import_variables)
 
 # The test data (lists of variable names) that we'll use for the runs.
 
@@ -343,7 +343,7 @@
       apply(times,(),s)
 
 print 'Environment __setitem__ benchmark using',
-print 'Python', string.split(sys.version)[0],
+print 'Python', sys.version.split()[0],
 print 'on', sys.platform, os.name
 
 run_it('Results for re-adding an existing variable name 100 times:',
--- bench/timeit.py (original)
+++ bench/timeit.py (refactored)
@@ -70,7 +70,7 @@
     # Must be an older Python version (see timeit() below)
     itertools = None
 
-import string
+#import string
 
 __all__ = ["Timer"]
 
@@ -100,7 +100,7 @@
 
 def reindent(src, indent):
     """Helper to reindent a multi-line statement."""
-    return string.replace(src, "\n", "\n" + " "*indent)
+    return src.replace("\n", "\n" + " "*indent)
 
 class Timer:
     """Class for timing execution speed of small code snippets.
@@ -226,7 +226,7 @@
         print "use -h/--help for command line help"
         return 2
     timer = default_timer
-    stmt = string.join(args, "\n") or "pass"
+    stmt = "\n".join(args) or "pass"
     number = 0 # auto-determine
     setup = []
     repeat = default_repeat
@@ -252,7 +252,7 @@
         if o in ("-h", "--help"):
             print __doc__,
             return 0
-    setup = string.join(setup, "\n") or "pass"
+    setup = "\n".join(setup) or "pass"
     # Include the current directory, so that local imports work (sys.path
     # contains the directory of this script, rather than the current
     # directory)
@@ -279,7 +279,7 @@
         return 1
     best = min(r)
     if verbose:
-        print "raw times:", string.join(map(lambda x, p=precision: "%.*g" % (p, x), r))
+        print "raw times:", ' '.join(map(lambda x, p=precision: "%.*g" % (p, x), r))
     print "%d loops," % number,
     usec = best * 1e6 / number
     if usec < 1000:
