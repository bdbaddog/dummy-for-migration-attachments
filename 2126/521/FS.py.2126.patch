*** scons-src-1.1.0-clean/src/engine/SCons/Node/FS.py	2008-10-10 05:50:44.000000000 -0700
--- scons-src-1.1.0/src/engine/SCons/Node/FS.py	2008-10-26 01:49:29.000000000 -0700
***************
*** 400,416 ****
      def __get_abspath(self):
          entry = self.get()
          return SCons.Subst.SpecialAttrWrapper(entry.get_abspath(),
!                                              entry.name + "_abspath")
  
      def __get_filebase(self):
!         name = self.get().name
!         return SCons.Subst.SpecialAttrWrapper(SCons.Util.splitext(name)[0],
!                                              name + "_filebase")
  
      def __get_suffix(self):
!         name = self.get().name
!         return SCons.Subst.SpecialAttrWrapper(SCons.Util.splitext(name)[1],
!                                              name + "_suffix")
  
      def __get_file(self):
          name = self.get().name
--- 400,416 ----
      def __get_abspath(self):
          entry = self.get()
          return SCons.Subst.SpecialAttrWrapper(entry.get_abspath(),
!                                               entry.name + "_abspath")
  
      def __get_filebase(self):
!         entry = self.get()
!         return SCons.Subst.SpecialAttrWrapper(entry.filebase,
!                                               entry.name + "_filebase")
  
      def __get_suffix(self):
!         entry = self.get()
!         return SCons.Subst.SpecialAttrWrapper(entry.suffix,
!                                               entry.name + "_suffix")
  
      def __get_file(self):
          name = self.get().name
***************
*** 420,480 ****
          """Return the file's directory and file name, with the
          suffix stripped."""
          entry = self.get()
!         return SCons.Subst.SpecialAttrWrapper(SCons.Util.splitext(entry.get_path())[0],
                                               entry.name + "_base")
  
!     def __get_posix_path(self):
!         """Return the path with / as the path separator,
!         regardless of platform."""
!         if os.sep == '/':
              return self
!         else:
              entry = self.get()
!             r = string.replace(entry.get_path(), os.sep, '/')
!             return SCons.Subst.SpecialAttrWrapper(r, entry.name + "_posix")
  
!     def __get_windows_path(self):
!         """Return the path with \ as the path separator,
!         regardless of platform."""
!         if os.sep == '\\':
              return self
!         else:
              entry = self.get()
!             r = string.replace(entry.get_path(), os.sep, '\\')
!             return SCons.Subst.SpecialAttrWrapper(r, entry.name + "_windows")
! 
!     def __get_srcnode(self):
!         return EntryProxy(self.get().srcnode())
! 
!     def __get_srcdir(self):
!         """Returns the directory containing the source node linked to this
!         node via VariantDir(), or the directory of this node if not linked."""
!         return EntryProxy(self.get().srcnode().dir)
! 
!     def __get_rsrcnode(self):
!         return EntryProxy(self.get().srcnode().rfile())
! 
!     def __get_rsrcdir(self):
!         """Returns the directory containing the source node linked to this
!         node via VariantDir(), or the directory of this node if not linked."""
!         return EntryProxy(self.get().srcnode().rfile().dir)
! 
!     def __get_dir(self):
!         return EntryProxy(self.get().dir)
  
      dictSpecialAttrs = { "base"     : __get_base_path,
                           "posix"    : __get_posix_path,
                           "windows"  : __get_windows_path,
                           "win32"    : __get_windows_path,
!                          "srcpath"  : __get_srcnode,
!                          "srcdir"   : __get_srcdir,
!                          "dir"      : __get_dir,
                           "abspath"  : __get_abspath,
                           "filebase" : __get_filebase,
                           "suffix"   : __get_suffix,
                           "file"     : __get_file,
!                          "rsrcpath" : __get_rsrcnode,
!                          "rsrcdir"  : __get_rsrcdir,
                         }
  
      def __getattr__(self, name):
--- 420,465 ----
          """Return the file's directory and file name, with the
          suffix stripped."""
          entry = self.get()
!         return SCons.Subst.SpecialAttrWrapper(entry.base,
                                               entry.name + "_base")
  
!     if os.sep == '/':
!         def __get_posix_path(self):
!             """Return the path with / as the path separator,
!             regardless of platform."""
              return self
!     else:
!         def __get_posix_path(self):
!             """Return the path with / as the path separator,
!             regardless of platform."""
              entry = self.get()
!             return SCons.Subst.SpecialAttrWrapper(entry.posix, entry.name + "_posix")
  
!     if os.sep == '\\':
!         def __get_windows_path(self):
!             """Return the path with \ as the path separator,
!             regardless of platform."""
              return self
!     else:
!         def __get_windows_path(self):
!             """Return the path with \ as the path separator,
!             regardless of platform."""
              entry = self.get()
!             return SCons.Subst.SpecialAttrWrapper(entry.win32, entry.name + "_windows")
  
      dictSpecialAttrs = { "base"     : __get_base_path,
                           "posix"    : __get_posix_path,
                           "windows"  : __get_windows_path,
                           "win32"    : __get_windows_path,
!                          "srcpath"  : lambda self: EntryProxy(self.get().srcnode()),
!                          "srcdir"   : lambda self: EntryProxy(self.get().srcdir),
!                          "dir"      : lambda self: EntryProxy(self.get().dir),
                           "abspath"  : __get_abspath,
                           "filebase" : __get_filebase,
                           "suffix"   : __get_suffix,
                           "file"     : __get_file,
!                          "rsrcpath" : lambda self: EntryProxy(self.get().rsrcpath),
!                          "rsrcdir"  : lambda self: EntryProxy(self.get().rsrcdir),
                         }
  
      def __getattr__(self, name):
***************
*** 514,520 ****
  
      memoizer_counters = []
  
!     def __init__(self, name, directory, fs):
          """Initialize a generic Node.FS.Base object.
  
          Call the superclass initialization, take care of setting up
--- 499,505 ----
  
      memoizer_counters = []
  
!     def __init__(self, name, dir, fs):
          """Initialize a generic Node.FS.Base object.
  
          Call the superclass initialization, take care of setting up
***************
*** 525,550 ****
          SCons.Node.Node.__init__(self)
  
          self.name = name
!         self.suffix = SCons.Util.splitext(name)[1]
          self.fs = fs
  
!         assert directory, "A directory must be provided"
  
!         self.abspath = directory.entry_abspath(name)
!         self.labspath = directory.entry_labspath(name)
!         if directory.path == '.':
              self.path = name
          else:
!             self.path = directory.entry_path(name)
!         if directory.tpath == '.':
              self.tpath = name
          else:
!             self.tpath = directory.entry_tpath(name)
!         self.path_elements = directory.path_elements + [self]
  
-         self.dir = directory
          self.cwd = None # will hold the SConscript directory for target nodes
!         self.duplicate = directory.duplicate
  
      def str_for_display(self):
          return '"' + self.__str__() + '"'
--- 510,534 ----
          SCons.Node.Node.__init__(self)
  
          self.name = name
!         self.dir = dir
          self.fs = fs
  
!         assert dir, "A directory must be provided"
  
!         self.abspath = dir.entry_abspath(name)
!         self.labspath = dir.entry_labspath(name)
!         if dir.path == '.':
              self.path = name
          else:
!             self.path = dir.entry_path(name)
!         if dir.tpath == '.':
              self.tpath = name
          else:
!             self.tpath = dir.entry_tpath(name)
!         self.path_elements = dir.path_elements + [self]
  
          self.cwd = None # will hold the SConscript directory for target nodes
!         self.duplicate = dir.duplicate
  
      def str_for_display(self):
          return '"' + self.__str__() + '"'
***************
*** 807,812 ****
--- 791,821 ----
  
      def _glob1(self, pattern, ondisk=True, source=False, strings=False):
          return []
+     
+     # For Python 2.2+ we should change these all to properties:
+     __special_attrs = {
+         'file':     lambda self: self.name,
+         'filebase': lambda self: SCons.Util.splitext(self.name)[0],
+         'suffix':   lambda self: SCons.Util.splitext(self.name)[1],
+         'base':     lambda self: SCons.Util.splitext(self.path)[0],
+         'posix':    lambda self: string.replace(self.path, os.sep, '/'),
+         'win32':    lambda self: string.replace(self.path, os.sep, '\\'),
+         'srcpath':  lambda self: self.srcnode(),
+         'srcdir':   lambda self: self.srcnode().dir,
+         'rsrcpath': lambda self: self.srcnode().rfile(),
+         'rsrcdir':  lambda self: self.srcnode().rfile().dir,
+     }
+     if os.sep=='/':
+         __special_attrs['posix'] = lambda self: self.path
+     elif os.sep=='\\':
+         __special_attrs['win32'] = lambda self: self.path
+     
+     def __getattr__(self, name):
+         try:
+             return self.__special_attrs[name](self)
+         except Exception:
+             # Translate any exception into AttributeError so that getattr() raises properly
+             raise AttributeError, name
  
  class Entry(Base):
      """This is the class for generic Node.FS entries--that is, things
