? bin/SConsDoc.pyc
? etc/TestCmd.pyc
? etc/TestCommon.pyc
? etc/TestSCons.pyc
? etc/unittest.pyc
? src/build
? src/engine/SCons/Tool/python.py
? src/script/build
Index: src/engine/SCons/SConf.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/SConf.py,v
retrieving revision 1.31
diff -u -p -d -r1.31 SConf.py
--- src/engine/SCons/SConf.py	22 Jan 2006 03:15:50 -0000	1.31
+++ src/engine/SCons/SConf.py	12 Feb 2006 17:05:21 -0000
@@ -35,6 +35,7 @@ import StringIO
 import sys
 import traceback
 import types
+from subprocess import Popen, PIPE
 
 import SCons.Action
 import SCons.Builder
@@ -361,7 +362,9 @@ class SConf:
                  'CheckCHeader'       : CheckCHeader,
                  'CheckCXXHeader'     : CheckCXXHeader,
                  'CheckLib'           : CheckLib,
-                 'CheckLibWithHeader' : CheckLibWithHeader
+                 'CheckLibWithHeader' : CheckLibWithHeader,
+                 'CheckPython'        : CheckPython,
+                 'CheckPythonHeaders' : CheckPythonHeaders,
                }
         self.AddTests(default_tests)
         self.AddTests(custom_tests)
@@ -872,3 +875,92 @@ def CheckLibWithHeader(context, libs, he
             call = call, language = language, autoadd = autoadd)
     context.did_show_result = 1
     return not res
+
+def _get_python_prefix(python_exe):
+    out = Popen([python_exe, "-c",
+                 "import sys; print sys.prefix; print sys.exec_prefix"],
+                stdout=PIPE).communicate()[0].split("\n")
+    py_prefix = out[0].rstrip()
+    py_exec_prefix = out[1].rstrip()
+    return py_prefix, py_exec_prefix
+
+def CheckPython(context, minver):
+    """
+    Check if a python interpreter is found matching a given minimum version.
+    minver should be a tuple, eg. to check for python >= 2.4.2 pass (2,4,2) as minver.
+
+    If detection is successful, env['PYTHON'] is defined to point to
+    the python that matches the minimum version constraint.  In
+    addition, PYTHON_VERSION is defined as 'MAJOR.MINOR' (eg. '2.4') of
+    the actual python version found.  Finally, pythondir and pyexecdir
+    are defined, and point to the site-packages directories
+    (architecture independent and architecture dependent,
+    respectively) appropriate for this python version.
+    """
+    tmplist = []
+    for x in minver:
+        tmplist.append(str(x))
+    pyver_str = '.'.join(tmplist)
+    context.Message('Checking for Python >= %s...' % (pyver_str,))
+    try:
+        python = context.env['PYTHON']
+    except KeyError:
+        try:
+            python = os.environ['PYTHON']
+        except KeyError:
+            python = SCons.Util.WhereIs("python")
+            if not python:
+                python = python = SCons.Util.WhereIs("python%i.%i" % (minver[0], minver[1]))
+    minverhex = 0
+    minver = list(minver) + [0, 0, 0, 0]
+    for i in xrange(0, 4):
+        minverhex = (minverhex << 8) + minver[i]
+    prog = "import sys; sys.exit(sys.hexversion >= %s)" % minverhex
+    if python is None:
+        python = 'python'
+    try:
+        result = Popen([python, "-c", prog]).wait()
+    except OSError:
+        context.Result(False)
+        return False
+    context.Result(result)
+    if result:
+        context.env.Replace(PYTHON=python)
+        proc = Popen([python, "-c", "import sys; print sys.version[:3]"], stdout=PIPE)
+        pyver = proc.communicate()[0].rstrip()
+        context.env.Replace(PYTHON_VERSION=pyver)
+        ## we use prefix and exec_prefix if they're defined, else we ask python for them
+        try:
+            prefix = context.env['prefix']
+            exec_prefix = context.env['exec_prefix']
+        except KeyError:
+            prefix, exec_prefix = _get_python_prefix(python)
+        context.env.Replace(pythondir=os.path.join(prefix, "lib",
+                                                   context.env.subst("python$PYTHON_VERSION"),
+                                                   "site-packages"))
+        context.env.Replace(pyexecdir=os.path.join(exec_prefix, "lib",
+                                                   context.env.subst("python$PYTHON_VERSION"),
+                                                   "site-packages"))
+    return result
+
+
+def CheckPythonHeaders(context):
+    """Check for headers necessary to compile python extensions.
+    If successful, CPPPATH is augmented with paths for python headers.
+    This test requires that CheckPython was previously executed and successful."""
+    
+    context.Message("Checking for headers required to compile python extensions...\n")
+    py_prefix, py_exec_prefix = _get_python_prefix(context.env['PYTHON'])
+    python_includes = [os.path.join(py_prefix, "include", context.env.subst("python$PYTHON_VERSION"))]
+    if py_prefix != py_exec_prefix:
+        python_includes.append(path.join(py_exec_prefix, "include", context.env.subst("python$PYTHON_VERSION")))
+    try:
+        old_cpp_path = context.env['CPPPATH']
+    except KeyError:
+        old_cpp_path = []
+    context.env.Append(CPPPATH=python_includes)
+    result = context.sconf.CheckCHeader('Python.h', '<>')
+    if not result: # if headers not found, take it back
+        context.env.Replace(CPPPATH=old_cpp_path)
+    context.Result(result)
+    return result
Index: src/engine/SCons/SConfTests.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/SConfTests.py,v
retrieving revision 1.21
diff -u -p -d -r1.21 SConfTests.py
--- src/engine/SCons/SConfTests.py	12 Feb 2006 07:00:46 -0000	1.21
+++ src/engine/SCons/SConfTests.py	12 Feb 2006 17:05:22 -0000
@@ -536,6 +536,23 @@ int main() {
         finally:
             sconf.Finish()
             
+    def test_CheckPython(self):
+        """Test CheckPython and CheckPythonHeaders
+        """
+        self._resetSConfState()
+        sconf = self.SConf.SConf(self.scons_env,
+                                 conf_dir=self.test.workpath('config.tests'),
+                                 log_file=self.test.workpath('config.log'))
+        try:
+            ret = sconf.CheckPython((1,5,2))
+            assert ret, ret
+            ret = sconf.CheckPythonHeaders()
+            assert ret, ret
+            self.scons_env['PYTHON']
+            self.scons_env['PYTHON_VERSION']
+        finally:
+            sconf.Finish()
+
 
 if __name__ == "__main__":
     suite = unittest.makeSuite(SConfTestCase, 'test_')
