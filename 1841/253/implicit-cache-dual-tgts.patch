diff -r 08c2ec30ed26 src/engine/SCons/Node/__init__.py
--- a/src/engine/SCons/Node/__init__.py	Tue Nov 20 12:59:42 2007 -0500
+++ b/src/engine/SCons/Node/__init__.py	Thu Nov 22 15:14:52 2007 -0500
@@ -614,6 +614,7 @@ class Node:
             return
 
         build_env = self.get_build_env()
+        executor = self.get_executor()
 
         # Here's where we implement --implicit-cache.
         if implicit_cache and not implicit_deps_changed:
@@ -623,7 +624,14 @@ class Node:
                 # stored .sconsign entry to have already been converted
                 # to Nodes for us.  (We used to run them through a
                 # source_factory function here.)
-                self._add_child(self.implicit, self.implicit_dict, implicit)
+
+                # Update all of the targets with them.  This
+                # essentially short-circuits an N*M scan of the
+                # sources for each individual target, which is a hell
+                # of a lot more efficient.
+                for tgt in executor.targets:
+                    tgt.add_to_implicit(implicit)
+
                 if implicit_deps_unchanged or self.is_up_to_date():
                     return
                 # one of this node's sources has changed,
@@ -632,8 +640,6 @@ class Node:
                 self.implicit_dict = {}
                 self._children_reset()
                 self.del_binfo()
-
-        executor = self.get_executor()
 
         # Have the executor scan the sources.
         executor.scan_sources(self.builder.source_scanner)
diff -r 08c2ec30ed26 test/implicit-cache/DualTargets.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/test/implicit-cache/DualTargets.py	Thu Nov 22 15:14:52 2007 -0500
@@ -0,0 +1,137 @@
+#!/usr/bin/env python
+#
+# __COPYRIGHT__
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+
+"""
+Test that --implicit-cache works correctly in conjonction with a
+builder that produces multiple targets.
+"""
+
+import string
+
+import TestSCons
+
+test = TestSCons.TestSCons()
+
+test.write('SConstruct', """\
+import os.path
+
+def emitter(target, source, env):
+    tgt0 = target[0].abspath
+    base,ext = os.path.splitext(tgt0)
+    target.append(base + '.b')
+    return(target, source)
+
+
+def source_scan(node, env, path):
+    path = node.abspath
+    base,ext = os.path.splitext(path)
+    return [base + '.lib']
+
+
+env = Environment()
+env['BUILDERS']['DualTarget'] = Builder(
+    action = Action(
+        [ 
+            Copy( '$TARGET', '$SOURCE' ), 
+            Copy( '${TARGET.base}.b', '$SOURCE' ), 
+            ],
+        ),
+    suffix = '.a',
+    src_suffix = '.cpp',
+    single_source = True,
+    emitter=emitter,
+    source_scanner=Scanner(source_scan),
+    )
+
+env.Command( 'x.cpp', '', Touch('$TARGET') )
+env.Command( 'x.lib', '', Touch('$TARGET') )
+
+env.DualTarget('x.cpp')
+""" % locals())
+
+test.must_not_exist('x.cpp')
+test.must_not_exist('x.lib')
+test.must_not_exist('x.a')
+test.must_not_exist('x.b')
+
+# Build everything first.
+test.run(arguments = '.')
+test.must_exist('x.cpp')
+test.must_exist('x.lib')
+test.must_exist('x.a')
+test.must_exist('x.b')
+print test.stdout()
+test.fail_test(string.find(test.stdout(), 'Copy') == -1)
+
+# Double check that targets are not rebuilt.
+test.run(arguments = '.')
+test.must_exist('x.cpp')
+test.must_exist('x.lib')
+test.must_exist('x.a')
+test.must_exist('x.b')
+print test.stdout()
+test.fail_test(string.find(test.stdout(), 'Copy') != -1)
+
+# Double check that targets are not rebuilt even with --implicit-cache
+test.run(arguments = '--implicit-cache x.a')
+test.must_exist('x.cpp')
+test.must_exist('x.lib')
+test.must_exist('x.a')
+test.must_exist('x.b')
+print test.stdout()
+test.fail_test(string.find(test.stdout(), 'Copy') != -1)
+
+# Double check that targets are not rebuilt even with --implicit-cache
+# a second time.
+test.run(arguments = '--implicit-cache x.a')
+test.must_exist('x.cpp')
+test.must_exist('x.lib')
+test.must_exist('x.a')
+test.must_exist('x.b')
+print test.stdout()
+test.fail_test(string.find(test.stdout(), 'Copy') != -1)
+
+# Double check that targets are not rebuilt if we reran without
+# --implicit-cache
+test.run(arguments = '.')
+test.must_exist('x.cpp')
+test.must_exist('x.lib')
+test.must_exist('x.a')
+test.must_exist('x.b')
+print test.stdout()
+test.fail_test(string.find(test.stdout(), 'Copy') != -1)
+
+# Double check again
+test.run(arguments = '.')
+test.must_exist('x.cpp')
+test.must_exist('x.lib')
+test.must_exist('x.a')
+test.must_exist('x.b')
+print test.stdout()
+test.fail_test(string.find(test.stdout(), 'Copy') != -1)
+
+# Then only of the targets using --implicit-cache
+test.pass_test()
