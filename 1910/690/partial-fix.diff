Index: test/Scanner/dict-recurse.py
===================================================================
--- test/Scanner/dict-recurse.py	(revision 0)
+++ test/Scanner/dict-recurse.py	(revision 0)
@@ -0,0 +1,200 @@
+#!/usr/bin/env python
+#
+# __COPYRIGHT__
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+
+"""
+Verify that dictionary-based scanners use the recursive flag correctly.
+
+Issue 1910:  http://scons.tigris.org/issues/show_bug.cgi?id=1910
+"""
+
+import TestSCons
+
+_python_ = TestSCons._python_
+
+test = TestSCons.TestSCons()
+
+test.write('build.py', r"""
+import sys
+input = open(sys.argv[1], 'rb')
+output = open(sys.argv[2], 'wb')
+
+include_prefix = 'include%s ' % sys.argv[1][-1]
+
+def process(infp, outfp):
+    for line in infp.readlines():
+        if line[:len(include_prefix)] == include_prefix:
+            file = line[len(include_prefix):-1]
+            process(open(file, 'rb'), outfp)
+        else:
+            outfp.write(line)
+
+process(input, output)
+
+sys.exit(0)
+""")
+
+test.write('SConstruct', """
+import re
+
+include1_re = re.compile(r'^include1\s+(\S+)$', re.M)
+include2_re = re.compile(r'^include2\s+(\S+)$', re.M)
+include3_re = re.compile(r'^include3\s+(\S+)$', re.M)
+
+def kfile_scan1(node, env, scanpaths, arg=None):
+    contents = node.get_text_contents()
+    includes = include1_re.findall(contents)
+    return includes
+
+def kfile_scan2(node, env, scanpaths, arg=None):
+    contents = node.get_text_contents()
+    includes = include2_re.findall(contents)
+    return includes
+
+def kfile_scan3(node, env, scanpaths, arg=None):
+    contents = node.get_text_contents()
+    includes = include3_re.findall(contents)
+    return includes
+
+scan1 = Scanner(kfile_scan1)
+
+scan2 = Scanner(kfile_scan2)
+
+scan3 = Scanner(kfile_scan3)
+
+kscanner = Scanner({'.k1' : scan1, '.k2': scan2})
+
+env = Environment(SCANNERS = [kscanner])
+
+kscanner.add_scanner('.k3', scan3)
+
+env.Command('aaa', 'aaa.k1', r'%(_python_)s build.py $SOURCES $TARGET')
+env.Command('bbb', 'bbb.k2', r'%(_python_)s build.py $SOURCES $TARGET')
+env.Command('ccc', 'ccc.k3', r'%(_python_)s build.py $SOURCES $TARGET')
+""" % locals())
+
+test.write('aaa.k1', 
+"""aaa.k1 1
+line 2
+include1 xxx
+include2 yyy
+include3 zzz
+line 6
+""")
+
+test.write('bbb.k2', 
+"""bbb.k2 1
+line 2
+include1 xxx
+include2 yyy
+include3 zzz
+line 6
+""")
+
+test.write('ccc.k3', 
+"""ccc.k3 1
+line 2
+include1 xxx
+include2 yyy
+include3 zzz
+line 6
+""")
+
+test.write('xxx', "xxx 1\n")
+test.write('yyy', "yyy 1\n")
+test.write('zzz', "zzz 1\n")
+
+
+
+
+expect = test.wrap_stdout("""\
+%(_python_)s build.py aaa.k1 aaa
+%(_python_)s build.py bbb.k2 bbb
+%(_python_)s build.py ccc.k3 ccc
+""" % locals())
+
+test.run(stdout=expect)
+
+expect_aaa = 'aaa.k1 1\nline 2\nxxx 1\ninclude2 yyy\ninclude3 zzz\nline 6\n'
+expect_bbb = 'bbb.k2 1\nline 2\ninclude1 xxx\nyyy 1\ninclude3 zzz\nline 6\n'
+expect_ccc = 'ccc.k3 1\nline 2\ninclude1 xxx\ninclude2 yyy\nzzz 1\nline 6\n'
+
+test.must_match('aaa', expect_aaa)
+test.must_match('bbb', expect_bbb)
+test.must_match('ccc', expect_ccc)
+
+test.up_to_date(arguments = '.')
+
+
+
+test.write('zzz', "zzz 2\n")
+
+expect = test.wrap_stdout("""\
+%(_python_)s build.py ccc.k3 ccc
+""" % locals())
+
+test.run(stdout=expect)
+
+expect_ccc = 'ccc.k3 1\nline 2\ninclude1 xxx\ninclude2 yyy\nzzz 2\nline 6\n'
+
+test.must_match('bbb', expect_bbb)
+
+
+
+test.write('yyy', "yyy 2\n")
+
+expect = test.wrap_stdout("""\
+%(_python_)s build.py bbb.k2 bbb
+""" % locals())
+
+test.run(stdout=expect)
+
+expect_bbb = 'bbb.k2 1\nline 2\ninclude1 xxx\nyyy 2\ninclude3 zzz\nline 6\n'
+
+test.must_match('bbb', expect_bbb)
+
+
+
+test.write('xxx', "xxx 2\n")
+
+expect = test.wrap_stdout("""\
+%(_python_)s build.py aaa.k1 aaa
+""" % locals())
+
+test.run(stdout=expect)
+
+expect_aaa = 'aaa.k1 1\nline 2\nxxx 2\ninclude2 yyy\ninclude3 zzz\nline 6\n'
+
+test.must_match('bbb', expect_bbb)
+
+
+
+test.pass_test()
+
+# Local Variables:
+# tab-width:4
+# indent-tabs-mode:nil
+# End:
+# vim: set expandtab tabstop=4 shiftwidth=4:
Index: test/Scanner/dictionary.py
===================================================================
--- test/Scanner/dictionary.py	(revision 4666)
+++ test/Scanner/dictionary.py	(working copy)
@@ -83,13 +83,15 @@
     includes = include3_re.findall(contents)
     return includes
 
-scan1 = Scanner(kfile_scan1)
+scan1 = Scanner(kfile_scan1, name='kile_scan1')
 
-scan2 = Scanner(kfile_scan2)
+scan2 = Scanner(kfile_scan2, name='kile_scan2')
 
-scan3 = Scanner(kfile_scan3)
+scan3 = Scanner(kfile_scan3, name='kile_scan3')
 
-kscanner = Scanner({'.k1' : scan1, '.k2': scan2})
+kscanner = Scanner({'.k1' : scan1, '.k2': scan2},
+                   recursive=True,
+                   name='kscanner')
 
 env = Environment(SCANNERS = [kscanner])
 
@@ -106,7 +108,10 @@
 include1 xxx
 include2 yyy
 include3 zzz
-line 6
+include1 iii.k1
+include2 iii.k2
+include3 iii.k3
+line 9
 """)
 
 test.write('bbb.k2', 
@@ -115,7 +120,10 @@
 include1 xxx
 include2 yyy
 include3 zzz
-line 6
+include1 iii.k1
+include2 iii.k2
+include3 iii.k3
+line 9
 """)
 
 test.write('ccc.k3', 
@@ -124,9 +132,16 @@
 include1 xxx
 include2 yyy
 include3 zzz
-line 6
+include1 iii.k1
+include2 iii.k2
+include3 iii.k3
+line 9
 """)
 
+test.write('iii.k1', "iii.k1 1\n")
+test.write('iii.k2', "iii.k2 1\n")
+test.write('iii.k3', "iii.k3 1\n")
+
 test.write('xxx', "xxx 1\n")
 test.write('yyy', "yyy 1\n")
 test.write('zzz', "zzz 1\n")
@@ -142,10 +157,42 @@
 
 test.run(stdout=expect)
 
-expect_aaa = 'aaa.k1 1\nline 2\nxxx 1\ninclude2 yyy\ninclude3 zzz\nline 6\n'
-expect_bbb = 'bbb.k2 1\nline 2\ninclude1 xxx\nyyy 1\ninclude3 zzz\nline 6\n'
-expect_ccc = 'ccc.k3 1\nline 2\ninclude1 xxx\ninclude2 yyy\nzzz 1\nline 6\n'
+expect_aaa = """\
+aaa.k1 1
+line 2
+xxx 1
+include2 yyy
+include3 zzz
+iii.k1 1
+include2 iii.k2
+include3 iii.k3
+line 9
+"""
 
+expect_bbb = """\
+bbb.k2 1
+line 2
+include1 xxx
+yyy 1
+include3 zzz
+include1 iii.k1
+iii.k2 1
+include3 iii.k3
+line 9
+"""
+
+expect_ccc = """\
+ccc.k3 1
+line 2
+include1 xxx
+include2 yyy
+zzz 1
+include1 iii.k1
+include2 iii.k2
+iii.k3 1
+line 9
+"""
+
 test.must_match('aaa', expect_aaa)
 test.must_match('bbb', expect_bbb)
 test.must_match('ccc', expect_ccc)
@@ -162,7 +209,17 @@
 
 test.run(stdout=expect)
 
-expect_ccc = 'ccc.k3 1\nline 2\ninclude1 xxx\ninclude2 yyy\nzzz 2\nline 6\n'
+expect_ccc = """\
+ccc.k3 1
+line 2
+include1 xxx
+include2 yyy
+zzz 2
+include1 iii.k1
+include2 iii.k2
+iii.k3 1
+line 9
+"""
 
 test.must_match('bbb', expect_bbb)
 
@@ -176,7 +233,17 @@
 
 test.run(stdout=expect)
 
-expect_bbb = 'bbb.k2 1\nline 2\ninclude1 xxx\nyyy 2\ninclude3 zzz\nline 6\n'
+expect_bbb = """\
+bbb.k2 1
+line 2
+include1 xxx
+yyy 2
+include3 zzz
+include1 iii.k1
+iii.k2 1
+include3 iii.k3
+line 9
+"""
 
 test.must_match('bbb', expect_bbb)
 
@@ -190,12 +257,94 @@
 
 test.run(stdout=expect)
 
-expect_aaa = 'aaa.k1 1\nline 2\nxxx 2\ninclude2 yyy\ninclude3 zzz\nline 6\n'
+expect_aaa = """\
+aaa.k1 1
+line 2
+xxx 2
+include2 yyy
+include3 zzz
+iii.k1 1
+include2 iii.k2
+include3 iii.k3
+line 9
+"""
 
 test.must_match('bbb', expect_bbb)
 
 
 
+test.write('iii.k3', "iii.k3 2\n")
+
+expect = test.wrap_stdout("""\
+%(_python_)s build.py ccc.k3 ccc
+""" % locals())
+
+test.run(stdout=expect)
+
+expect_ccc = """\
+ccc.k3 1
+line 2
+include1 xxx
+include2 yyy
+zzz 2
+include1 iii.k1
+include2 iii.k2
+iii.k3 2
+line 9
+"""
+
+test.must_match('bbb', expect_bbb)
+
+
+
+test.write('iii.k2', "iii.k2 2\n")
+
+expect = test.wrap_stdout("""\
+%(_python_)s build.py bbb.k2 bbb
+""" % locals())
+
+test.run(stdout=expect)
+
+expect_bbb = """\
+bbb.k2 1
+line 2
+include1 xxx
+yyy 2
+include3 zzz
+include1 iii.k1
+iii.k2 2
+include3 iii.k3
+line 9
+"""
+
+test.must_match('bbb', expect_bbb)
+
+
+
+test.write('iii.k1', "iii.k1 2\n")
+
+expect = test.wrap_stdout("""\
+%(_python_)s build.py aaa.k1 aaa
+""" % locals())
+
+test.run(stdout=expect)
+
+expect_aaa = """\
+aaa.k1 1
+line 2
+xxx 2
+include2 yyy
+include3 zzz
+iii.k1 2
+include2 iii.k2
+include3 iii.k3
+line 9
+"""
+
+test.must_match('bbb', expect_bbb)
+
+
+
 test.pass_test()
 
 # Local Variables:
Index: src/engine/SCons/Node/FS.py
===================================================================
--- src/engine/SCons/Node/FS.py	(revision 4666)
+++ src/engine/SCons/Node/FS.py	(working copy)
@@ -2602,7 +2602,7 @@
 
         if scanner:
             # result = [n.disambiguate() for n in scanner(self, env, path)]
-            result = scanner(self, env, path)
+            result = scanner.select(self)(self, env, path)
             result = map(lambda N: N.disambiguate(), result)
         else:
             result = []
Index: src/engine/SCons/Node/__init__.py
===================================================================
--- src/engine/SCons/Node/__init__.py	(revision 4666)
+++ src/engine/SCons/Node/__init__.py	(working copy)
@@ -254,7 +254,7 @@
 
     def get_build_scanner_path(self, scanner):
         """Fetch the appropriate scanner path for this node."""
-        return self.get_executor().get_build_scanner_path(scanner)
+        return self.get_executor().get_build_scanner_path(scanner, self)
 
     def set_executor(self, executor):
         """Set the action executor for this node."""
@@ -548,13 +548,14 @@
         deps = []
         while nodes:
             n = nodes.pop(0)
+            s = scanner.select(n)
             d = filter(lambda x, seen=seen: not seen.has_key(x),
-                       n.get_found_includes(env, scanner, path))
+                       n.get_found_includes(env, s, path))
             if d:
                 deps.extend(d)
                 for n in d:
                     seen[n] = 1
-                nodes.extend(scanner.recurse_nodes(d))
+                nodes.extend(s.recurse_nodes(d))
 
         return deps
 
Index: src/engine/SCons/Executor.py
===================================================================
--- src/engine/SCons/Executor.py	(revision 4666)
+++ src/engine/SCons/Executor.py	(working copy)
@@ -313,7 +313,7 @@
 
         return build_env
 
-    def get_build_scanner_path(self, scanner):
+    def get_build_scanner_path(self, scanner, node):
         """Fetch the scanner path for this executor's targets and sources.
         """
         env = self.get_build_env()
@@ -321,9 +321,10 @@
             cwd = self.batches[0].targets[0].cwd
         except (IndexError, AttributeError):
             cwd = None
-        return scanner.path(env, cwd,
-                            self.get_all_targets(),
-                            self.get_all_sources())
+        s = scanner.select(node)
+        if not s:
+            s = scanner
+        return s.path(env, cwd, self.get_all_targets(), self.get_all_sources())
 
     def get_kw(self, kw={}):
         result = self.builder_kw.copy()
@@ -466,11 +467,8 @@
         if scanner:
             for node in node_list:
                 node.disambiguate()
-                s = scanner.select(node)
-                if not s:
-                    continue
-                path = self.get_build_scanner_path(s)
-                deps.extend(node.get_implicit_deps(env, s, path))
+                path = self.get_build_scanner_path(scanner, node)
+                deps.extend(node.get_implicit_deps(env, scanner, path))
         else:
             kw = self.get_kw()
             for node in node_list:
@@ -478,10 +476,7 @@
                 scanner = node.get_env_scanner(env, kw)
                 if not scanner:
                     continue
-                scanner = scanner.select(node)
-                if not scanner:
-                    continue
-                path = self.get_build_scanner_path(scanner)
+                path = self.get_build_scanner_path(scanner, node)
                 deps.extend(node.get_implicit_deps(env, scanner, path))
 
         deps.extend(self.get_implicit_deps())
@@ -582,7 +577,7 @@
         self.batches = [Batch(kw['targets'][:], [])]
     def get_build_env(self):
         return get_NullEnvironment()
-    def get_build_scanner_path(self):
+    def get_build_scanner_path(self, node):
         return None
     def cleanup(self):
         pass
Index: src/engine/SCons/Scanner/__init__.py
===================================================================
--- src/engine/SCons/Scanner/__init__.py	(revision 4666)
+++ src/engine/SCons/Scanner/__init__.py	(working copy)
@@ -35,7 +35,6 @@
 import SCons.Node.FS
 import SCons.Util
 
-
 class _Null:
     pass
 
Index: src/engine/SCons/Script/Main.py
===================================================================
--- src/engine/SCons/Script/Main.py	(revision 4666)
+++ src/engine/SCons/Script/Main.py	(working copy)
@@ -1292,7 +1292,7 @@
     values = SConsOptions.SConsValues(parser.get_default_values())
 
     OptionsParser = parser
-    
+
     try:
         _exec_main(parser, values)
     except SystemExit, s:
Index: src/engine/SCons/ExecutorTests.py
===================================================================
--- src/engine/SCons/ExecutorTests.py	(revision 4666)
+++ src/engine/SCons/ExecutorTests.py	(working copy)
@@ -187,9 +187,11 @@
                 target = map(str, target)
                 source = map(str, source)
                 return "scanner: %s, %s, %s, %s" % (env['SCANNERVAL'], dir, target, source)
+            def select(self, node):
+                return self
         s = LocalScanner()
 
-        p = x.get_build_scanner_path(s)
+        p = x.get_build_scanner_path(s, t)
         assert p == "scanner: sss, here, ['t'], ['s1', 's2']", p
 
     def test_get_kw(self):
