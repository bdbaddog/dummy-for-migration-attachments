Index: test/option/profile.py
===================================================================
*** test/option/profile.py	(revision 4811)
--- test/option/profile.py	(working copy)
***************
*** 23,30 ****
  
  __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
  
- import StringIO
  import sys
  
  import TestSCons
  
--- 23,43 ----
  
  __revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
  
  import sys
+ try:
+     # In Python 2.5 and before, there was no 'io' module.  The 'io' module
+     # in 2.6 provides a StringIO, but it only works with Unicode strings,
+     # while virtually all the strings we use are normal eight-bit strings,
+     # including all the strings generated by the 'profile' module.  This
+     # is a horrible hack that just papers over the problem without fixing
+     # it, but I don't see any other way to do it.  We'll keep using the old
+     # StringIO module until it no longer exists, and hope that if it's not
+     # there, it means that we've converted to Python 3.x where all strings
+     # are Unicode.
+     exec('from cStringIO import StringIO')
+ except ImportError:
+     # No 'cStringIO' assume new 3.x structure
+     from io import StringIO
  
  import TestSCons
  
***************
*** 48,54 ****
  
  try:
      save_stdout = sys.stdout
!     sys.stdout = StringIO.StringIO()
  
      stats = pstats.Stats(scons_prof)
      stats.sort_stats('time')
--- 61,67 ----
  
  try:
      save_stdout = sys.stdout
!     sys.stdout = StringIO()
  
      stats = pstats.Stats(scons_prof)
      stats.sort_stats('time')
***************
*** 69,75 ****
  
  try:
      save_stdout = sys.stdout
!     sys.stdout = StringIO.StringIO()
  
      stats = pstats.Stats(scons_prof)
      stats.sort_stats('time')
--- 82,88 ----
  
  try:
      save_stdout = sys.stdout
!     sys.stdout = StringIO()
  
      stats = pstats.Stats(scons_prof)
      stats.sort_stats('time')
Index: bench/is_types.py
===================================================================
*** bench/is_types.py	(revision 4811)
--- bench/is_types.py	(working copy)
***************
*** 5,13 ****
  # src/engine/SCons/Util.py.
  
  import types
! from UserDict import UserDict
! from UserList import UserList
! from UserString import UserString
  
  InstanceType = types.InstanceType
  DictType = dict
--- 5,17 ----
  # src/engine/SCons/Util.py.
  
  import types
! try:
!     from collections import UserDict, UserList, UserString
! except ImportError:
!     # No 'collections' module or no UserFoo in collections
!     exec('from UserDict import UserDict')
!     exec('from UserList import UserList')
!     exec('from UserString import UserString')
  
  InstanceType = types.InstanceType
  DictType = dict
***************
*** 25,43 ****
  # User* type.
  
  def original_is_Dict(e):
!     return isinstance(e, dict) or isinstance(e, UserDict)
  
  def original_is_List(e):
!     return isinstance(e, list) or isinstance(e, UserList)
  
  if UnicodeType is not None:
      def original_is_String(e):
!         return isinstance(e, str) \
!             or isinstance(e, unicode) \
!             or isinstance(e, UserString)
  else:
      def original_is_String(e):
!         return isinstance(e, str) or isinstance(e, UserString)
  
  
  
--- 29,45 ----
  # User* type.
  
  def original_is_Dict(e):
!     return isinstance(e, (dict,UserDict))
  
  def original_is_List(e):
!     return isinstance(e, (list,UserList))
  
  if UnicodeType is not None:
      def original_is_String(e):
!         return isinstance(e, (str,unicode,UserString))
  else:
      def original_is_String(e):
!         return isinstance(e, (str,UserString))
  
  
  
Index: src/engine/SCons/DefaultsTests.py
===================================================================
*** src/engine/SCons/DefaultsTests.py	(revision 4810)
--- src/engine/SCons/DefaultsTests.py	(working copy)
***************
*** 26,33 ****
  import SCons.compat
  
  import os
- import os.path
- import StringIO
  import sys
  import unittest
  
--- 26,31 ----
Index: src/engine/SCons/UtilTests.py
===================================================================
*** src/engine/SCons/UtilTests.py	(revision 4811)
--- src/engine/SCons/UtilTests.py	(working copy)
***************
*** 25,36 ****
  
  import SCons.compat
  
- import collections
  import io
  import os
  import sys
  import unittest
! 
  
  import TestCmd
  
--- 25,35 ----
  
  import SCons.compat
  
  import io
  import os
  import sys
  import unittest
! from collections import UserDict, UserList, UserString
  
  import TestCmd
  
***************
*** 38,44 ****
  
  from SCons.Util import *
  
! try: unicode
  except NameError: HasUnicode = False
  else:             HasUnicode = True
  
--- 37,43 ----
  
  from SCons.Util import *
  
! try: eval('unicode')
  except NameError: HasUnicode = False
  else:             HasUnicode = True
  
***************
*** 207,213 ****
  
      def test_is_Dict(self):
          assert is_Dict({})
!         assert is_Dict(collections.UserDict())
          try:
              class mydict(dict):
                  pass
--- 206,212 ----
  
      def test_is_Dict(self):
          assert is_Dict({})
!         assert is_Dict(UserDict())
          try:
              class mydict(dict):
                  pass
***************
*** 223,230 ****
  
      def test_is_List(self):
          assert is_List([])
!         import UserList
!         assert is_List(collections.UserList())
          try:
              class mylist(list):
                  pass
--- 222,228 ----
  
      def test_is_List(self):
          assert is_List([])
!         assert is_List(UserList())
          try:
              class mylist(list):
                  pass
***************
*** 242,253 ****
          assert is_String("")
          if HasUnicode:
              exec "assert is_String(u'')"
!         try:
!             import UserString
!         except:
!             pass
!         else:
!             assert is_String(collections.UserString(''))
          try:
              class mystr(str):
                  pass
--- 240,246 ----
          assert is_String("")
          if HasUnicode:
              exec "assert is_String(u'')"
!         assert is_String(UserString(''))
          try:
              class mystr(str):
                  pass
***************
*** 280,306 ****
          assert to_String([ 1, 2, 3]) == str([1, 2, 3]), to_String([1,2,3])
          assert to_String("foo") == "foo", to_String("foo")
  
!         try:
!             import UserString
  
!             s1=collections.UserString('blah')
!             assert to_String(s1) == s1, s1
!             assert to_String(s1) == 'blah', s1
! 
!             class Derived(collections.UserString):
!                 pass
!             s2 = Derived('foo')
!             assert to_String(s2) == s2, s2
!             assert to_String(s2) == 'foo', s2
! 
!             if HasUnicode:
!                 s3=collections.UserString(unicode('bar'))
!                 assert to_String(s3) == s3, s3
!                 assert to_String(s3) == unicode('bar'), s3
!                 assert isinstance(to_String(s3), unicode), \
!                        type(to_String(s3))
!         except ImportError:
              pass
  
          if HasUnicode:
              s4 = unicode('baz')
--- 273,294 ----
          assert to_String([ 1, 2, 3]) == str([1, 2, 3]), to_String([1,2,3])
          assert to_String("foo") == "foo", to_String("foo")
  
!         s1=UserString('blah')
!         assert to_String(s1) == s1, s1
!         assert to_String(s1) == 'blah', s1
  
!         class Derived(UserString):
              pass
+         s2 = Derived('foo')
+         assert to_String(s2) == s2, s2
+         assert to_String(s2) == 'foo', s2
+ 
+         if HasUnicode:
+             s3=UserString(unicode('bar'))
+             assert to_String(s3) == s3, s3
+             assert to_String(s3) == unicode('bar'), s3
+             assert isinstance(to_String(s3), unicode), \
+                    type(to_String(s3))
  
          if HasUnicode:
              s4 = unicode('baz')
***************
*** 618,624 ****
          s['c'] = 'CCC'
          assert s['c'] == 'CCC', s['c']
  
!         class DummyEnv(collections.UserDict):
              def subst(self, key):
                  if key[0] == '$':
                      return self[key[1:]]
--- 606,612 ----
          s['c'] = 'CCC'
          assert s['c'] == 'CCC', s['c']
  
!         class DummyEnv(UserDict):
              def subst(self, key):
                  if key[0] == '$':
                      return self[key[1:]]
Index: src/engine/SCons/SubstTests.py
===================================================================
*** src/engine/SCons/SubstTests.py	(revision 4811)
--- src/engine/SCons/SubstTests.py	(working copy)
***************
*** 26,33 ****
  import SCons.compat
  
  import os
- import os.path
- import StringIO
  import sys
  import unittest
  
--- 26,31 ----
Index: bin/scons-proc.py
===================================================================
*** bin/scons-proc.py	(revision 4810)
--- bin/scons-proc.py	(working copy)
***************
*** 10,21 ****
  # and/or .mod files contining the ENTITY definitions for each item,
  # or in man-page-formatted output.
  #
  import getopt
- import os.path
  import re
- import StringIO
- import sys
  import xml.sax
  
  import SConsDoc
  
--- 10,25 ----
  # and/or .mod files contining the ENTITY definitions for each item,
  # or in man-page-formatted output.
  #
+ import os
+ import sys
  import getopt
  import re
  import xml.sax
+ try:
+     from io import StringIO
+ except ImportError:
+     # No 'io' module or no StringIO in io
+     exec('from cStringIO import StringIO')
  
  import SConsDoc
  
***************
*** 100,106 ****
          content = content.replace('-->\n', '-->')
          input = xml_preamble + content + xml_postamble
          try:
!             saxparser.parse(StringIO.StringIO(input))
          except:
              sys.stderr.write("error in %s\n" % f)
              raise
--- 104,110 ----
          content = content.replace('-->\n', '-->')
          input = xml_preamble + content + xml_postamble
          try:
!             saxparser.parse(StringIO(input))
          except:
              sys.stderr.write("error in %s\n" % f)
              raise
Index: QMTest/TestCommon.py
===================================================================
*** QMTest/TestCommon.py	(revision 4811)
--- QMTest/TestCommon.py	(working copy)
***************
*** 95,104 ****
  
  import copy
  import os
- import os.path
  import stat
  import sys
! import UserList
  
  from TestCmd import *
  from TestCmd import __all__
--- 95,107 ----
  
  import copy
  import os
  import stat
  import sys
! try:
!     from collections import UserList
! except ImportError:
!     # no 'collections' module or no UserList in collections
!     exec('from UserList import UserList')
  
  from TestCmd import *
  from TestCmd import __all__
***************
*** 171,178 ****
      dll_suffix   = '.so'
  
  def is_List(e):
!     return isinstance(e, list) \
!         or isinstance(e, UserList.UserList)
  
  def is_writable(f):
      mode = os.stat(f)[stat.ST_MODE]
--- 174,180 ----
      dll_suffix   = '.so'
  
  def is_List(e):
!     return isinstance(e, (list,UserList))
  
  def is_writable(f):
      mode = os.stat(f)[stat.ST_MODE]
Index: QMTest/TestCmd.py
===================================================================
*** QMTest/TestCmd.py	(revision 4813)
--- QMTest/TestCmd.py	(working copy)
***************
*** 228,234 ****
  import tempfile
  import time
  import traceback
! import UserList
  
  try:
      # pre-2.7 doesn't have the memoryview() built-in
--- 228,239 ----
  import tempfile
  import time
  import traceback
! try:
!     from collections import UserList, UserString
! except ImportError:
!     # no 'collections' module or no UserFoo in collections
!     exec('from UserList import UserList')
!     exec('from UserString import UserString')
  
  try:
      # pre-2.7 doesn't have the memoryview() built-in
***************
*** 264,287 ****
      __all__.append('simple_diff')
  
  def is_List(e):
!     return isinstance(e, list) \
!         or isinstance(e, UserList.UserList)
! 
! try:
!     from UserString import UserString
! except ImportError:
!     class UserString:
!         pass
  
! try: unicode
  except NameError:
      def is_String(e):
!         return isinstance(e, str) or isinstance(e, UserString)
  else:
      def is_String(e):
!         return isinstance(e, str) \
!             or isinstance(e, unicode) \
!             or isinstance(e, UserString)
  
  tempfile.template = 'testcmd.'
  if os.name in ('posix', 'nt'):
--- 269,283 ----
      __all__.append('simple_diff')
  
  def is_List(e):
!     return isinstance(e, (list,UserList))
  
! try: eval('unicode')
  except NameError:
      def is_String(e):
!         return isinstance(e, (str,UserString))
  else:
      def is_String(e):
!         return isinstance(e, (str,unicode,UserString))
  
  tempfile.template = 'testcmd.'
  if os.name in ('posix', 'nt'):
