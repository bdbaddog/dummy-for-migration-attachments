Index: test/Parallel/ref_count.py
===================================================================
--- test/Parallel/ref_count.py	(revision 0)
+++ test/Parallel/ref_count.py	(revision 0)
@@ -0,0 +1,162 @@
+#!/usr/bin/env python
+#
+# __COPYRIGHT__
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+
+"""
+Test for a specific race condition that used to stop a build cold when
+a Node's ref_count would get decremented past 0 and "disappear" from
+the Taskmaster's walk of the dependency graph.
+
+Note that this test does not fail every time, but would at least fail
+more than 60%-70% of the time on the system(s) I tested.
+
+The rather complicated set up here creates a condition where,
+after building four "object files" simultaneously while running with
+-j4, sets up a race condition amongst the three dependencies of the
+c6146/cpumanf.out file, where two of the dependencies are built at the
+same time (that is, by the same command) and one is built separately.
+
+We used to detect Nodes that had been started but not finished building
+and just set the waiting ref_count to the number of Nodes.  In this case,
+if we got unlucky, we'd re-visit the Nodes for the two files first and
+set the ref_count to two *before* the command that built individual node
+completed and decremented the ref_count from two to one.  Then when the
+two files completed, we'd update the ref_count to 1 - 2 = -1, which would
+cause the Taskmaster to *not* "wake up" the Node because it's ref_count
+hadn't actually reached 0.
+
+(The solution was to not set the ref_count, but to add to it only the
+Nodes that were, in fact, added to the waiting_parents lists of various
+child Nodes.)
+"""
+
+import TestSCons
+
+_python_ = TestSCons._python_
+
+test = TestSCons.TestSCons()
+
+test.subdir(['domain'],
+            ['domain', 'dsp'],
+            ['domain', 'dsp', 'addcheck'])
+
+test.write('build.py', """\
+import string
+import sys
+import time
+args = sys.argv[1:]
+outputs = []
+while args:
+    if args[0][0] != '-':
+        break
+    arg = args.pop(0)
+    if arg == '-o':
+        outputs.append(args.pop(0))
+        continue
+    if arg == '-s':
+        time.sleep(int(args.pop(0)))
+contents = ''
+for ifile in args:
+    contents = contents + open(ifile, 'rb').read()
+for ofile in outputs:
+    ofp = open(ofile, 'wb')
+    ofp.write('%s:  building from %s\\n' % (ofile, string.join(args)))
+    ofp.write(contents)
+    ofp.close()
+""")
+
+#
+#
+#
+
+test.write('SConstruct', """\
+env = Environment()
+cmd = r'%(_python_)s build.py -o $TARGET $SOURCES'
+f1 = env.Command('c6416/cpumanf/file1.obj', 'file1.c', cmd)
+f2 = env.Command('c6416/cpumanf/file2.obj', 'file2.c', cmd)
+f3 = env.Command('c6416/cpumanf/file3.obj', 'file3.c', cmd)
+f4 = env.Command('c6416/cpumanf/file4.obj', 'file4.c', cmd)
+f5 = env.Command('c6416/cpumanf/file5.obj', 'file5.c', cmd)
+f6 = env.Command('c6416/cpumanf/file6.obj', 'file6.c', cmd)
+
+objs = f1 + f2 + f3 + f4 + f5 + f6
+
+btc = env.Command('build/target/cpumanf.out', 'c6416/cpumanf.out', cmd)
+
+addcheck_obj = env.Command('domain/dsp/addcheck/addcheck.obj',
+                           'domain/dsp/addcheck/addcheck.c',
+                           cmd)
+
+addcheck_exe = env.Command('domain/dsp/addcheck/addcheck.exe',
+                           addcheck_obj,
+                           cmd)
+
+cmd2 = r'%(_python_)s build.py -s 2 -o ${TARGETS[0]} -o ${TARGETS[1]} $SOURCES'
+
+cksums = env.Command(['c6416/cpumanf_pre_cksum.out',
+                     'c6416/cpumanf_pre_cksum.map'],
+                    objs,
+                    cmd2)
+
+cpumanf_out = env.Command('c6416/cpumanf.out',
+                          cksums + addcheck_exe,
+                          cmd)
+
+cpumanf = env.Alias('cpumanf', objs + btc)
+
+env.Command('after.out', cpumanf, r'%(_python_)s build.py -o $TARGET after.in')
+""" % locals())
+
+test.write('file1.c', "file1.c\n")
+test.write('file2.c', "file2.c\n")
+test.write('file3.c', "file3.c\n")
+test.write('file4.c', "file4.c\n")
+test.write('file5.c', "file5.c\n")
+test.write('file6.c', "file6.c\n")
+
+test.write(['domain', 'dsp', 'addcheck', 'addcheck.c'],
+           "domain/dsp/addcheck/addcheck.c")
+
+test.write('after.in', "after.in\n")
+
+test.run(arguments = '-j4 after.out')
+
+test.must_match('after.out', """\
+after.out:  building from after.in
+after.in
+""")
+
+test.write('file5.c', "file5.c modified\n")
+
+test.write('after.in', "after.in modified\n")
+
+test.run(arguments = '-j4 after.out')
+
+test.must_match('after.out', """\
+after.out:  building from after.in
+after.in modified
+""")
+
+test.pass_test()
Index: src/engine/SCons/Node/NodeTests.py
===================================================================
--- src/engine/SCons/Node/NodeTests.py	(revision 1889)
+++ src/engine/SCons/Node/NodeTests.py	(working copy)
@@ -1314,8 +1314,11 @@
         n1 = SCons.Node.Node()
         n2 = SCons.Node.Node()
         assert n1.waiting_parents == {}, n1.waiting_parents
-        n1.add_to_waiting_parents(n2)
+        r = n1.add_to_waiting_parents(n2)
+        assert r == 1, r
         assert n1.waiting_parents == {n2:1}, n1.waiting_parents
+        r = n1.add_to_waiting_parents(n2)
+        assert r == 0, r
 
     def test_call_for_all_waiting_parents(self):
         """Test the call_for_all_waiting_parents() method"""
Index: src/engine/SCons/Node/__init__.py
===================================================================
--- src/engine/SCons/Node/__init__.py	(revision 1889)
+++ src/engine/SCons/Node/__init__.py	(working copy)
@@ -336,7 +336,18 @@
         self.waiting_s_e[node] = 1
 
     def add_to_waiting_parents(self, node):
-        self.waiting_parents[node] = 1
+        """
+        Returns the number of nodes added to our waiting parents list:
+        1 (not True) if we add a unique waiting parent, 0 (not False)
+        if not.
+        """
+        wp = self.waiting_parents
+        if wp.has_key(node):
+            result = 0
+        else:
+            result = 1
+        wp[node] = 1
+        return result
 
     def call_for_all_waiting_parents(self, func):
         func(self)
Index: src/engine/SCons/TaskmasterTests.py
===================================================================
--- src/engine/SCons/TaskmasterTests.py	(revision 1889)
+++ src/engine/SCons/TaskmasterTests.py	(working copy)
@@ -54,6 +54,7 @@
         self.csig = None
         self.state = SCons.Node.no_state
         self.prepared = None
+        self.ref_count = 0
         self.waiting_parents = {}
         self.waiting_s_e = {}
         self.side_effect = 0
@@ -112,7 +113,13 @@
         return self.name
 
     def add_to_waiting_parents(self, node):
-        self.waiting_parents[node] = 1
+        wp = self.waiting_parents
+        if wp.has_key(node):
+            result = 0
+        else:
+            result = 1
+        wp[node] = 1
+        return result
 
     def call_for_all_waiting_parents(self, func):
         func(self)
Index: src/engine/SCons/Taskmaster.py
===================================================================
--- src/engine/SCons/Taskmaster.py	(revision 1889)
+++ src/engine/SCons/Taskmaster.py	(working copy)
@@ -52,6 +52,7 @@
 
 import SCons.compat
 
+import operator
 import string
 import sys
 import traceback
@@ -577,8 +578,8 @@
                 # when they've finished building, our implicit dependency
                 # list will get cleared and we'll re-scan the newly-built
                 # file(s) for updated implicit dependencies.
-                map(lambda n, P=node: n.add_to_waiting_parents(P), not_started)
-                node.ref_count = len(set(not_started))
+                added = map(lambda n, P=node: n.add_to_waiting_parents(P), not_started)
+                node.ref_count = node.ref_count + reduce(operator.add, added, 0)
 
                 # Now we add these derived targets to the candidates
                 # list so they can be examined and built.  We have to
@@ -612,8 +613,8 @@
                 # so that when they've finished building, our implicit
                 # dependency list will get cleared and we'll re-scan the
                 # newly-built file(s) for updated implicit dependencies.
-                map(lambda n, P=node: n.add_to_waiting_parents(P), not_built)
-                node.ref_count = len(set(not_built))
+                added = map(lambda n, P=node: n.add_to_waiting_parents(P), not_built)
+                node.ref_count = node.ref_count + reduce(operator.add, added, 0)
 
                 if S: S.not_built = S.not_built + 1
                 if T:
