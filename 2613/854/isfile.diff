Index: src/engine/SCons/Tool/tex.py
===================================================================
--- src/engine/SCons/Tool/tex.py	(revision 5256)
+++ src/engine/SCons/Tool/tex.py	(working copy)
@@ -153,7 +153,7 @@
         testName = os.path.join(path,name)
         if Verbose:
             print " look for '%s'" % testName
-        if os.path.exists(testName):
+        if os.path.isfile(testName):
             if Verbose:
                 print " found '%s'" % testName
             return env.fs.File(testName)
@@ -168,7 +168,7 @@
                 if Verbose:
                     print " look for '%s'" % testNameExt
 
-                if os.path.exists(testNameExt):
+                if os.path.isfile(testNameExt):
                     if Verbose:
                         print " found '%s'" % testNameExt
                     return env.fs.File(testNameExt)
@@ -215,13 +215,13 @@
     # if there is a \makeindex there will be a .idx and thus
     # we have to run makeindex at least once to keep the build
     # happy even if there is no index.
-    # Same for glossaries and nomenclature
+    # Same for glossaries, nomenclature, and acronyms
     src_content = source[0].get_text_contents()
-    run_makeindex = makeindex_re.search(src_content) and not os.path.exists(targetbase + '.idx')
-    run_nomenclature = makenomenclature_re.search(src_content) and not os.path.exists(targetbase + '.nlo')
-    run_glossary = makeglossary_re.search(src_content) and not os.path.exists(targetbase + '.glo')
-    run_glossaries = makeglossaries_re.search(src_content) and not os.path.exists(targetbase + '.glo')
-    run_acronyms = makeacronyms_re.search(src_content) and not os.path.exists(targetbase + '.acn')
+    run_makeindex = makeindex_re.search(src_content) and not os.path.isfile(targetbase + '.idx')
+    run_nomenclature = makenomenclature_re.search(src_content) and not os.path.isfile(targetbase + '.nlo')
+    run_glossary = makeglossary_re.search(src_content) and not os.path.isfile(targetbase + '.glo')
+    run_glossaries = makeglossaries_re.search(src_content) and not os.path.isfile(targetbase + '.glo')
+    run_acronyms = makeacronyms_re.search(src_content) and not os.path.isfile(targetbase + '.acn')
 
     saved_hashes = {}
     suffix_nodes = {}
@@ -274,7 +274,7 @@
         # Read the log file to find warnings/errors
         logfilename = targetbase + '.log'
         logContent = ''
-        if os.path.exists(logfilename):
+        if os.path.isfile(logfilename):
             logContent = open(logfilename, "rb").read()
 
 
@@ -282,7 +282,7 @@
         flsfilename = targetbase + '.fls'
         flsContent = ''
         auxfiles = []
-        if os.path.exists(flsfilename):
+        if os.path.isfile(flsfilename):
             flsContent = open(flsfilename, "rb").read()
             auxfiles = openout_aux_re.findall(flsContent)
             # remove duplicates
@@ -302,7 +302,7 @@
         if count == 1:
             for auxfilename in auxfiles:
                 target_aux = os.path.join(targetdir, auxfilename)
-                if os.path.exists(target_aux):
+                if os.path.isfile(target_aux):
                     content = open(target_aux, "rb").read()
                     if content.find("bibdata") != -1:
                         if Verbose:
@@ -388,8 +388,8 @@
 # end of while loop
 
     # rename Latex's output to what the target name is
-    if not (str(target[0]) == resultfilename  and  os.path.exists(resultfilename)):
-        if os.path.exists(resultfilename):
+    if not (str(target[0]) == resultfilename  and  os.path.isfile(resultfilename)):
+        if os.path.isfile(resultfilename):
             print "move %s to %s" % (resultfilename, str(target[0]), )
             shutil.move(resultfilename,str(target[0]))
 
@@ -609,10 +609,11 @@
 
     content = source[0].get_text_contents()
 
-    idx_exists = os.path.exists(targetbase + '.idx')
-    nlo_exists = os.path.exists(targetbase + '.nlo')
-    glo_exists = os.path.exists(targetbase + '.glo')
-    acr_exists = os.path.exists(targetbase + '.acn')
+    # These variables are no longer used.
+    #idx_exists = os.path.isfile(targetbase + '.idx')
+    #nlo_exists = os.path.isfile(targetbase + '.nlo')
+    #glo_exists = os.path.isfile(targetbase + '.glo')
+    #acr_exists = os.path.isfile(targetbase + '.acn')
 
     # set up list with the regular expressions
     # we use to find features used
@@ -702,7 +703,7 @@
         env.Clean(target[0],aFile_base + '.aux')
     # read fls file to get all other files that latex creates and will read on the next pass
     # remove files from list that we explicitly dealt with above
-    if os.path.exists(flsfilename):
+    if os.path.isfile(flsfilename):
         content = open(flsfilename, "rb").read()
         out_files = openout_re.findall(content)
         myfiles = [auxfilename, logfilename, flsfilename, targetbase+'.dvi',targetbase+'.pdf']
