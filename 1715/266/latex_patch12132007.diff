Index: test/TEX/multi-run.py
===================================================================
--- test/TEX/multi-run.py	(revision 2528)
+++ test/TEX/multi-run.py	(working copy)
@@ -28,6 +28,8 @@
 Validate that both .tex and .ltx files can handle a LaTeX-style
 bibliography (by calling $BIBTEX to generate a .bbl file) and
 correctly re-run to resolve undefined references.
+
+Also test that package warnings are caught and re-run as needed
 """
 
 import string
@@ -42,7 +44,7 @@
 if not tex and not latex:
     test.skip_test("Could not find tex or latex; skipping test(s).\n")
 
-test.subdir('work1', 'work2', 'work4')
+test.subdir('work1', 'work2', 'work3', 'work4')
 
 
 input_file = r"""
@@ -64,6 +66,62 @@
 \end{document}
 """
 
+input_file3 = r"""
+\documentclass{article}
+\usepackage{longtable}
+
+\begin{document}
+As stated in the last paper, this is a bug-a-boo.
+here is some more junk and another table
+here is some more junk and another table
+
+\begin{longtable}[l]{rlll}
+         Isotope  &\multicolumn{1}{c}{Abar}  &Name\\
+\\
+         1001    &1.0078    &Proton        &$p$\\
+         1002    &2.0141    &Deuterium     &$d$\\
+         1003    &3.0170    &Tritium       &$t$\\
+         2003    &3.0160    &Helium 3      &He$^3$\\
+         2004    &4.0026    &Helium 4      &He$^{4}$\\
+\end{longtable}
+
+and a closing comment
+
+ These parameters and arrays are filled in when the parameter \textbf{iftnrates}
+   is set to 1:
+
+\begin{longtable}[l]{ll}
+\\
+\textbf{nxxxx}     &Total number of particles made by xxxx reaction\\
+\textbf{pxxxx}     &Total number of particles made by xxxx reaction\\
+\textbf{nxxxxx}    &Total number of particles made by xxxxx reaction\\
+\textbf{nxxxx}     &Total number of particles made by xxxx reaction\\
+\textbf{pxxxx}     &Total number of particles made by xxxx reaction\\
+\textbf{nxxxx}     &Total number of particles made by xxxx reaction\\
+\textbf{pxxxx}     &Total number of particles made by xxxx reaction\\
+\textbf{nxxxxx}    &Total number of particles made by xxxxx reaction\\
+\textbf{nxxxx}     &Total number of particles made by xxxx reaction\\
+\textbf{pxxxx}     &Total number of particles made by xxxx reaction\\
+\\
+\textbf{rnxxxx}    &Regional total of particles made by xxxx reaction\\
+\textbf{rpxxxx}    &Regional total of particles made by xxxx reaction\\
+\textbf{rnxxxxx}   &Regional total of particles made by xxxxx reaction\\
+\textbf{rnxxxx}    &Regional total of particles made by xxxx reaction\\
+\textbf{rpxxxx}    &Regional total of particles made by xxxx reaction\\
+\textbf{rnxxxx}    &Regional total of particles made by xxxx reaction\\
+\textbf{rpxxxx}    &Regional total of particles made by xxxx reaction\\
+\textbf{rnxxxxx}   &Regional total of particles made by xxxxx reaction\\
+\textbf{rnxxxx}    &Regional total of particles made by xxxx reaction\\
+\textbf{rpxxxx}    &Regional total of particles made by xxxx reaction\\
+\\
+\textbf{reactot}(r)     &Total number of reactions for reaction r\\
+\textbf{reacreg}(r,ir)  &Total number of reactions for reaction r in region ir\\
+\end{longtable}
+
+
+\end{document}
+"""
+
 bibfile = r"""
 @Article{X,
   author = 	 "Mr. X",
@@ -95,8 +153,22 @@
         print foo_log
         test.fail_test(1)
 
+    test.write(['work3', 'SConstruct'], """\
+DVI( "foo3.tex" )
+""")
 
+    test.write(['work3', 'foo3.tex'], input_file3)
 
+    test.run(chdir = 'work3', arguments = '.')
+
+    foo_log = test.read(['work3', 'foo3.log'])
+    if string.find(foo_log, 'Rerun LaTeX') != -1:
+        print 'foo.log contains "Rerun LaTeX":'
+        print foo_log
+        test.fail_test(1)
+
+
+
 if latex:
 
     test.write(['work2', 'SConstruct'], """\
@@ -117,8 +189,22 @@
         print foo_log
         test.fail_test(1)
 
+    test.write(['work3', 'SConstruct'], """\
+DVI( "foo3.tex" )
+PDF( "foo3.tex" )
+""")
 
+    test.write(['work3', 'foo3.tex'], input_file3)
 
+    test.run(chdir = 'work3', arguments = '.')
+
+    foo_log = test.read(['work3', 'foo3.log'])
+    if string.find(foo_log, 'Rerun LaTeX') != -1:
+        print 'foo.log contains "Rerun LaTeX":'
+        print foo_log
+        test.fail_test(1)
+
+
     test.write(['work4', 'SConstruct'], """\
 DVI( "foo.ltx" )
 """)
Index: test/TEX/build_dir_dup0.py
===================================================================
--- test/TEX/build_dir_dup0.py	(revision 0)
+++ test/TEX/build_dir_dup0.py	(revision 0)
@@ -0,0 +1,257 @@
+#!/usr/bin/env python
+#
+# __COPYRIGHT__
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+
+"""
+Test creation of a fully-featured TeX document (with bibliography
+and index) in a build_dir.
+
+Test courtesy Rob Managan.
+"""
+
+import TestSCons
+
+test = TestSCons.TestSCons()
+
+latex = test.where_is('latex')
+dvipdf = test.where_is('dvipdf')
+makeindex = test.where_is('makeindex')
+bibtex = test.where_is('bibtex')
+if not latex or not makeindex or not bibtex or not dvipdf:
+    test.skip_test("Could not find 'latex', 'makeindex', 'bibtex', or dvipdf; skipping test.\n")
+
+test.subdir(['docs'])
+
+
+test.write(['SConstruct'], """\
+import os
+
+env = Environment(ENV = { 'PATH' : os.environ['PATH'] },
+                  TOOLS = ['tex', 'latex', 'dvipdf'])
+Export(['env'])
+
+SConscript(os.path.join('docs', 'SConscript'),
+           build_dir=os.path.join('mybuild','docs'),
+           duplicate=0)
+""")
+
+
+test.write(['docs', 'SConscript'], """\
+Import('env')
+
+test_dvi = env.DVI(source='test.tex')
+testpdf = env.PDF(source=test_dvi)
+""")
+
+
+test.write(['docs', 'Fig1.ps'], """\
+%!PS-Adobe-2.0 EPSF-2.0
+%%Title: Fig1.fig
+%%Creator: fig2dev Version 3.2 Patchlevel 4
+%%CreationDate: Tue Apr 25 09:56:11 2006
+%%BoundingBox: 0 0 98 98
+%%Magnification: 1.0000
+%%EndComments
+/$F2psDict 200 dict def
+$F2psDict begin
+$F2psDict /mtrx matrix put
+/col-1 {0 setgray} bind def
+/col0 {0.000 0.000 0.000 srgb} bind def
+
+end
+save
+newpath 0 98 moveto 0 0 lineto 98 0 lineto 98 98 lineto closepath clip newpath
+-24.9 108.2 translate
+1 -1 scale
+
+/cp {closepath} bind def
+/ef {eofill} bind def
+/gr {grestore} bind def
+/gs {gsave} bind def
+/rs {restore} bind def
+/l {lineto} bind def
+/m {moveto} bind def
+/rm {rmoveto} bind def
+/n {newpath} bind def
+/s {stroke} bind def
+/slc {setlinecap} bind def
+/slj {setlinejoin} bind def
+/slw {setlinewidth} bind def
+/srgb {setrgbcolor} bind def
+/sc {scale} bind def
+/sf {setfont} bind def
+/scf {scalefont} bind def
+/tr {translate} bind def
+ /DrawEllipse {
+	/endangle exch def
+	/startangle exch def
+	/yrad exch def
+	/xrad exch def
+	/y exch def
+	/x exch def
+	/savematrix mtrx currentmatrix def
+	x y tr xrad yrad sc 0 0 1 startangle endangle arc
+	closepath
+	savematrix setmatrix
+	} def
+
+/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
+/$F2psEnd {$F2psEnteredState restore end} def
+
+$F2psBegin
+10 setmiterlimit
+ 0.06299 0.06299 sc
+%
+% Fig objects follow
+% 
+7.500 slw
+% Ellipse
+n 1170 945 766 766 0 360 DrawEllipse gs col0 s gr
+
+$F2psEnd
+rs
+""")
+
+
+test.write(['docs', 'Fig1.tex'],
+r"""\begin{picture}(0,0)%
+\includegraphics{Fig1.ps}%
+\end{picture}%
+\setlength{\unitlength}{4144sp}%
+%
+\begingroup\makeatletter\ifx\SetFigFont\undefined%
+\gdef\SetFigFont#1#2#3#4#5{%
+  \reset@font\fontsize{#1}{#2pt}%
+  \fontfamily{#3}\fontseries{#4}\fontshape{#5}%
+  \selectfont}%
+\fi\endgroup%
+\begin{picture}(1548,1546)(397,-879)
+\put(856,-196){\makebox(0,0)[lb]{\smash{\SetFigFont{12}{14.4}{\rmdefault}{\mddefault}{\updefault}{\color[rgb]{0,0,0}center $r_0$}%
+}}}
+\end{picture}
+""")
+
+
+test.write(['docs', 'test.bib'], """\
+%% This BibTeX bibliography file was created using BibDesk.
+%% http://bibdesk.sourceforge.net/
+
+%% Saved with string encoding Western (ASCII) 
+
+@techreport{AnAuthor:2006fk,
+	Author = {A. N. Author},
+	Date-Added = {2006-11-15 12:51:30 -0800},
+	Date-Modified = {2006-11-15 12:52:35 -0800},
+	Institution = {none},
+	Month = {November},
+	Title = {A Test Paper},
+	Year = {2006}}
+""")
+
+
+test.write(['docs', 'test.tex'],
+r"""\documentclass{report}
+
+\usepackage{graphicx}
+\usepackage{epsfig,color} % for .tex version of figures if we go that way
+
+\usepackage{makeidx}
+\makeindex
+
+\begin{document}
+ 
+\title{Report Title}
+
+\author{A. N. Author}
+ 
+\maketitle 
+ 
+\begin{abstract}
+there is no abstract
+\end{abstract}
+
+\tableofcontents
+\listoffigures
+
+\chapter{Introduction}
+
+The introduction is short.
+
+\index{Acknowledgements}
+
+\section{Acknowledgements}
+
+The Acknowledgements are show as well \cite{AnAuthor:2006fk}.  
+
+\index{Getting the Report}
+
+To get a hard copy of this report call me.
+
+\begin{figure}[htbp]
+\begin{center}
+\input{Fig1.tex} % testing figure variant that uses TeX labeling
+\caption{Zone and Node indexing}
+\label{fig1}
+\end{center}
+\end{figure}
+
+All done now.
+
+\bibliographystyle{unsrt}
+\bibliography{test}
+\newpage
+
+\printindex
+
+\end{document}
+""")
+
+
+# makeindex will write status messages to stderr (grrr...), so ignore it.
+test.run(arguments = '.', stderr=None)
+
+
+# All (?) the files we expect will get created in the build_dir
+# (mybuild/docs) and not in the srcdir (docs).
+files = [
+    'test.aux',
+    'test.bbl',
+    'test.blg',
+    'test.dvi',
+    'test.idx',
+    'test.ilg',
+    'test.ind',
+    'test.lof',
+    'test.log',
+    'test.pdf',
+    'test.toc',
+]
+
+for f in files:
+    test.must_exist(['mybuild', 'docs', f])
+    test.must_not_exist(['docs', f])
+
+
+test.pass_test()
Index: src/engine/SCons/Scanner/LaTeX.py
===================================================================
--- src/engine/SCons/Scanner/LaTeX.py	(revision 2528)
+++ src/engine/SCons/Scanner/LaTeX.py	(working copy)
@@ -56,7 +56,7 @@
     but leave the file name untouched for "includegraphics." For
     the "bibliography" keyword we need to add .bib if there is
     no extension. (This need to be revisited since if there
-    is no extension for an :includegraphics" keyword latex will 
+    is no extension for an "includegraphics" keyword latex will 
     append .ps or .eps to find the file; while pdftex will use 
     other extensions.)
     """
Index: src/engine/SCons/Tool/tex.py
===================================================================
--- src/engine/SCons/Tool/tex.py	(revision 2528)
+++ src/engine/SCons/Tool/tex.py	(working copy)
@@ -42,7 +42,7 @@
 import SCons.Node.FS
 import SCons.Util
 
-warning_rerun_re = re.compile("^LaTeX Warning:.*Rerun", re.MULTILINE)
+warning_rerun_re = re.compile('(^LaTeX Warning:.*Rerun)|(^Package \w+ Warning:.*Rerun)', re.MULTILINE)
 
 rerun_citations_str = "^LaTeX Warning:.*\n.*Rerun to get citations correct"
 rerun_citations_re = re.compile(rerun_citations_str, re.MULTILINE)
@@ -51,7 +51,6 @@
 undefined_references_re = re.compile(undefined_references_str, re.MULTILINE)
 
 openout_aux_re = re.compile(r"\\openout.*`(.*\.aux)'")
-openout_re = re.compile(r"\\openout.*`(.*)'")
 
 makeindex_re = re.compile(r"^[^%]*\\makeindex", re.MULTILINE)
 tableofcontents_re = re.compile(r"^[^%]*\\tableofcontents", re.MULTILINE)
@@ -76,26 +75,63 @@
 
     basename = SCons.Util.splitext(str(source[0]))[0]
     basedir = os.path.split(str(source[0]))[0]
+    basefile = os.path.split(str(basename))[1]
+    abspath = os.path.abspath(basedir)
+    targetbase = SCons.Util.splitext(str(target[0]))[0]
+    targetdir = os.path.split(str(target[0]))[0]
 
-    # Notice that all the filenames are not prefixed with the basedir.
+#
+# Not sure if these environment changes should go here or make the user do them
+# I undo all but TEXPICTS but there is still the side effect of creating the 
+# empty (':') entries in the environment.
+#
+    try:
+        texinputs_save = env['ENV']['TEXINPUTS']
+    except KeyError:
+        texinputs_save = ':'
+        env['ENV']['TEXINPUTS']=''
+    env['ENV']['TEXINPUTS']=abspath + os.path.pathsep + env['ENV']['TEXINPUTS']
+
+    try:
+        bibinputs_save = env['ENV']['BIBINPUTS']
+    except KeyError:
+        bibinputs_save = ':'
+        env['ENV']['BIBINPUTS']=''
+    env['ENV']['BIBINPUTS']=abspath + os.path.pathsep + env['ENV']['BIBINPUTS']
+
+    try:
+        bstinputs_save = env['ENV']['BSTINPUTS']
+    except KeyError:
+        bstinputs_save = ':'
+        env['ENV']['BSTINPUTS']=''
+    env['ENV']['BSTINPUTS']=abspath + os.path.pathsep + env['ENV']['BSTINPUTS']
+
+    try:
+        texpicts_save = env['ENV']['TEXPICTS']
+    except KeyError:
+        texpicts_save = ':'
+        env['ENV']['TEXPICTS']=''
+    env['ENV']['TEXPICTS']=abspath + os.path.pathsep + env['ENV']['TEXPICTS']
+
+    # Create these file names with the target directory since they will be made there
     # That's because the *COM variables have the cd command in the prolog.
 
-    bblfilename = basename + '.bbl'
+    bblfilename = os.path.join(targetdir,basefile + '.bbl')
     bblContents = ""
     if os.path.exists(bblfilename):
         bblContents = open(bblfilename, "rb").read()
 
-    idxfilename = basename + '.idx'
+    idxfilename = os.path.join(targetdir,basefile + '.idx')
     idxContents = ""
     if os.path.exists(idxfilename):
         idxContents = open(idxfilename, "rb").read()
 
-    tocfilename = basename + '.toc'
+    tocfilename = os.path.join(targetdir,basefile + '.toc')
     tocContents = ""
     if os.path.exists(tocfilename):
         tocContents = open(tocfilename, "rb").read()
 
-    # Run LaTeX once to generate a new aux file.
+    # Run LaTeX once to generate a new aux file and log file.
     XXXLaTeXAction(target, source, env)
 
     # Decide if various things need to be run, or run again.  We check
@@ -104,7 +140,7 @@
     # with stubs that don't necessarily generate all of the same files.
 
     # Read the log file to find all .aux files
-    logfilename = basename + '.log'
+    logfilename = os.path.join(targetbase + '.log')
     auxfiles = []
     if os.path.exists(logfilename):
         content = open(logfilename, "rb").read()
@@ -112,10 +148,10 @@
 
     # Now decide if bibtex will need to be run.
     for auxfilename in auxfiles:
-        if os.path.exists(os.path.join(basedir, auxfilename)):
-            content = open(os.path.join(basedir, auxfilename), "rb").read()
+        if os.path.exists(os.path.join(targetdir, auxfilename)):
+            content = open(os.path.join(targetdir, auxfilename), "rb").read()
             if string.find(content, "bibdata") != -1:
-                bibfile = env.fs.File(basename)
+                bibfile = env.fs.File(targetbase)
                 BibTeXAction(bibfile, bibfile, env)
                 break
 
@@ -131,7 +167,7 @@
     # Now decide if latex will need to be run again due to index.
     if os.path.exists(idxfilename) and idxContents != open(idxfilename, "rb").read():
         # We must run makeindex
-        idxfile = env.fs.File(basename)
+        idxfile = env.fs.File(targetbase)
         MakeIndexAction(idxfile, idxfile, env)
         must_rerun_latex = 1
 
@@ -139,7 +175,7 @@
         XXXLaTeXAction(target, source, env)
 
     # Now decide if latex needs to be run yet again to resolve warnings.
-    logfilename = basename + '.log'
+    logfilename = targetbase + '.log'
     for _ in range(int(env.subst('$LATEXRETRIES'))):
         if not os.path.exists(logfilename):
             break
@@ -149,6 +185,14 @@
            not undefined_references_re.search(content):
             break
         XXXLaTeXAction(target, source, env)
+    env['ENV']['TEXINPUTS'] = texinputs_save
+    env['ENV']['BIBINPUTS'] = bibinputs_save
+    env['ENV']['BSTINPUTS'] = bibinputs_save
+#
+#   the TEXPICTS enviroment variable is needed by a dvi -> pdf step later on Mac OSX
+#   so leave it, 
+#
+#    env['ENV']['TEXPICTS']  = texpicts_save
     return 0
 
 def LaTeXAuxAction(target = None, source= None, env=None):
@@ -176,36 +220,37 @@
 
 def tex_emitter(target, source, env):
     base = SCons.Util.splitext(str(source[0]))[0]
-    target.append(base + '.aux')
-    env.Precious(base + '.aux')
-    target.append(base + '.log')
+    targetbase = SCons.Util.splitext(str(target[0]))[0]
+
+    target.append(targetbase + '.aux')
+    env.Precious(targetbase + '.aux')
+    target.append(targetbase + '.log')
     for f in source:
         content = f.get_contents()
         if tableofcontents_re.search(content):
-            target.append(base + '.toc')
-            env.Precious(base + '.toc')
+            target.append(targetbase + '.toc')
+            env.Precious(targetbase + '.toc')
         if makeindex_re.search(content):
-            target.append(base + '.ilg')
-            target.append(base + '.ind')
-            target.append(base + '.idx')
-            env.Precious(base + '.idx')
+            target.append(targetbase + '.ilg')
+            target.append(targetbase + '.ind')
+            target.append(targetbase + '.idx')
+            env.Precious(targetbase + '.idx')
         if bibliography_re.search(content):
-            target.append(base + '.bbl')
-            env.Precious(base + '.bbl')
-            target.append(base + '.blg')
+            target.append(targetbase + '.bbl')
+            env.Precious(targetbase + '.bbl')
+            target.append(targetbase + '.blg')
 
-    # read log file to get all output file (include .aux files)
-    logfilename = base + '.log'
-    dir, base_nodir = os.path.split(base)
+    # read log file to get all .aux files
+    logfilename = targetbase + '.log'
+    dir, base_nodir = os.path.split(targetbase)
     if os.path.exists(logfilename):
         content = open(logfilename, "rb").read()
-        out_files = openout_re.findall(content)
-        out_files = filter(lambda f, b=base_nodir+'.aux': f != b, out_files)
-        if dir != '':
-            out_files = map(lambda f, d=dir: d+os.sep+f, out_files)
-        target.extend(out_files)
-        for f in out_files:
-            env.Precious( f )
+        aux_files = openout_aux_re.findall(content)
+        aux_files = filter(lambda f, b=base_nodir+'.aux': f != b, aux_files)
+        aux_files = map(lambda f, d=dir: d+os.sep+f, aux_files)
+        target.extend(aux_files)
+        for a in aux_files:
+            env.Precious( a )
 
     return (target, source)
 
