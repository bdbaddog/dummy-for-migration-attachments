Index: test/SWIG/SWIG.py
===================================================================
--- test/SWIG/SWIG.py	(revision 1519)
+++ test/SWIG/SWIG.py	(working copy)
@@ -218,6 +218,56 @@
 
     test.up_to_date(arguments = '.')
 
+    # Test that swig-generated modules are removed
+    # The %module directive specifies the module name
+    test.write("module.i", """\
+%module modulename
+""")
+    test.write('SConstruct', """
+foo = Environment(SWIGFLAGS='-python',
+                  CPPPATH='%(platform_sys_prefix)s/include/python%(version)s/',
+                  SHCCFLAGS='',
+                  LDMODULEPREFIX='%(ldmodule_prefix)s',
+                  LDMODULESUFFIX='%(_dll)s',
+                  FRAMEWORKSFLAGS='%(frameworks)s',
+                  )
 
+foo.LoadableModule(target = 'modulename', source = ['module.i'])
+""" % locals())
+    test.run()
+    test.must_exist(test.workpath("modulename.py"))
+    test.run(arguments = "-c")
+    test.must_not_exist(test.workpath("modulename.py"))
 
+    # Test that implicit dependencies are caught
+
+    test.write("dependency.i", """\
+%module dependency
+""")
+    test.write("dependent.i", """\
+%module dependent
+
+%include dependency.i
+""")
+    test.write('SConstruct', """
+foo = Environment(SWIGFLAGS='-python',
+                  CPPPATH='%(platform_sys_prefix)s/include/python%(version)s/',
+                  SHCCFLAGS='',
+                  LDMODULEPREFIX='%(ldmodule_prefix)s',
+                  LDMODULESUFFIX='%(_dll)s',
+                  FRAMEWORKSFLAGS='%(frameworks)s',
+                  )
+
+swig = foo.Dictionary('SWIG')
+bar = foo.Copy(SWIG = r'%(python)s wrapper.py ' + swig)
+foo.CFile(target = 'dependent', source = ['dependent.i'])
+""" % locals())
+
+    test.run()
+    test.write("dependency.i", """%module dependency
+
+extern char *dependency_string();
+""")
+    test.not_up_to_date(arguments = "dependent_wrap.c")
+
 test.pass_test()
Index: src/engine/SCons/Tool/swig.py
===================================================================
--- src/engine/SCons/Tool/swig.py	(revision 1519)
+++ src/engine/SCons/Tool/swig.py	(working copy)
@@ -37,6 +37,9 @@
 import SCons.Defaults
 import SCons.Tool
 import SCons.Util
+from SCons.Scanner import Scanner
+import os
+import re
 
 SwigAction = SCons.Action.Action('$SWIGCOM', '$SWIGCOMSTR')
 
@@ -46,6 +49,48 @@
     else:
         return '$SWIGCFILESUFFIX'
 
+_reSwig = re.compile(r"%include\s+(\S+)")
+def _scanSwig(node, env, path):
+    def recurse(path, searchPath):
+        global _reSwig
+        f = open(path)
+        try: contents = f.read()
+        finally: f.close()
+
+        found = []
+        for m in _reSwig.finditer(contents):
+            fname = m.group(1)
+            for dpath in searchPath:
+                absPath = os.path.join(dpath, fname)
+                if os.path.isfile(absPath):
+                    found.append(absPath)
+                    break
+        
+        for f in [f for f in found if os.path.splitext(f)[1] == ".i"]:
+            found += recurse(f, searchPath)
+        return found
+
+    import sys
+    r = recurse(str(node), [os.path.abspath(os.path.dirname(str(node))), os.path.abspath(os.path.join("include", "swig"))])
+    return r
+
+def _swigEmitter(target, source, env):
+    for src in source:
+        src = str(src)
+        mname = None
+        if "-python" in SCons.Util.CLVar(env.subst("$SWIGFLAGS")):
+            f = file(src)
+            try:
+                for l in f:
+                    m = re.match("%module (.+)", l)
+                    if m:
+                        mname = m.group(1)
+            finally:
+                f.close()
+            if mname is not None:
+                target.append(mname + ".py")
+    return (target, source)
+
 def generate(env):
     """Add Builders and construction variables for swig to an Environment."""
     c_file, cxx_file = SCons.Tool.createCFileBuilders(env)
@@ -54,13 +99,16 @@
     cxx_file.suffix['.i'] = swigSuffixEmitter
 
     c_file.add_action('.i', SwigAction)
+    c_file.add_emitter('.i', _swigEmitter)
     cxx_file.add_action('.i', SwigAction)
+    cxx_file.add_emitter('.i', _swigEmitter)
 
     env['SWIG']              = 'swig'
     env['SWIGFLAGS']         = SCons.Util.CLVar('')
     env['SWIGCFILESUFFIX']   = '_wrap$CFILESUFFIX'
     env['SWIGCXXFILESUFFIX'] = '_wrap$CXXFILESUFFIX'
     env['SWIGCOM']           = '$SWIG $SWIGFLAGS -o $TARGET $SOURCES'
+    env.Append(SCANNERS=Scanner(function=_scanSwig, skeys=[".i"]))
 
 def exists(env):
     return env.Detect(['swig'])
