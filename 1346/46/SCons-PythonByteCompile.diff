? src/engine/SCons/Tool/python.py
Index: src/engine/SCons/Tool/__init__.py
===================================================================
RCS file: /cvsroot/scons/scons/src/engine/SCons/Tool/__init__.py,v
retrieving revision 1.59
diff -u -p -d -r1.59 __init__.py
--- src/engine/SCons/Tool/__init__.py	29 Nov 2005 06:54:57 -0000	1.59
+++ src/engine/SCons/Tool/__init__.py	12 Feb 2006 22:16:58 -0000
@@ -426,7 +426,9 @@ def tool_list(platform, env):
                                 # 'Subversion',
                                 'swig',
                                 'tar', 'tex',
-                                'yacc', 'zip'],
+                                'yacc', 'zip',
+                                'python',
+                                ],
                                env)
 
     tools = ([linker, c_compiler, cxx_compiler,
--- /dev/null	2006-02-10 17:39:15.000000000 +0000
+++ src/engine/SCons/Tool/python.py	2006-02-12 22:29:16.000000000 +0000
@@ -0,0 +1,81 @@
+"""SCons.Tool.python
+
+Tool-specific initialization for the PythonC interpreter.
+
+There normally shouldn't be any need to import this module directly.
+It will usually be imported through the generic SCons.Tool.Tool()
+selection method.
+"""
+
+#
+# __COPYRIGHT__
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "__FILE__ __REVISION__ __DATE__ __DEVELOPER__"
+
+from subprocess import Popen, PIPE
+
+import SCons.Tool
+import SCons.Defaults
+import SCons.Util
+
+pycompile_program = '''
+import sys, py_compile
+py_compile.compile(sys.argv[1])'''
+
+def byte_compile_python(target=None, source=None, env=None):
+    try:
+        python = env['PYTHON']
+    except KeyError:
+        python = SCons.Util.WhereIs('python')
+    for target_node in target:
+        status = Popen([python, "-c", pycompile_program,
+                        str(target_node)]).wait()
+        if status:
+            return status
+        status = Popen([python, "-O", "-c", pycompile_program,
+                        str(target_node)]).wait()
+        if status:
+            return status
+
+def generate(env):
+    """
+    Add Builders and construction variables for Python to an Environment.
+
+    It defines env.PythonByteCompile: an Action that can be used as
+    post-installation action of python sources.  Example:
+
+        demo_PYTHON = [
+           'pygtk-demo/demos/__init__.py',
+           'pygtk-demo/demos/appwindow.py',
+           # ...
+        ]
+        demos = env.Install('$libdir/pygtk/2.0/demos', demo_PYTHON)
+        env.Alias('install', demos)
+        env.AddPostAction(demos, env.PythonByteCompile)
+
+    """
+    env.PythonByteCompile = env.Action(byte_compile_python)
+    
+def exists(env):
+    ## detection should normally happen _after_ an environment is created, with SConf.CheckPython
+    return 1
